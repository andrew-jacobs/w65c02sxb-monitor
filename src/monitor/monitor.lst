
Portable 65xx Assembler [20.01]

                             ;===============================================================================
                             ; __        ____  ____   ____ ___ ____  ______  ______
                             ; \ \      / / /_| ___| / ___/ _ \___ \/ ___\ \/ / __ )
                             ;  \ \ /\ / / '_ \___ \| |  | | | |__) \___ \\  /|  _ \
                             ;   \ V  V /| (_) |__) | |__| |_| / __/ ___) /  \| |_) |
                             ;  __\_/\_/  \___/____/ \____\___/_____|____/_/\_\____/
                             ; |  \/  | ___  _ __ (_) |_ ___  _ __
                             ; | |\/| |/ _ \| '_ \| | __/ _ \| '__|
                             ; | |  | | (_) | | | | | || (_) | |
                             ; |_|  |_|\___/|_| |_|_|\__\___/|_|
                             ;
                             ;
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2014-2020 Andrew John Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;===============================================================================
                             ;
                             ; Notes:
                             ;
                             ;
                             ;-------------------------------------------------------------------------------

                                             .include "w65c02sxb.inc"
                             ;===============================================================================
                             ; WDC W65C02SXB System Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                                             .include "w65c02.inc"
                             ;===============================================================================
                             ; WDC W65C02 Processor Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons

Portable 65xx Assembler [20.01]

                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                                             .65c02

                             ;===============================================================================
                             ; Constants
                             ;-------------------------------------------------------------------------------

                             ; Status Registers Bits

         00000080          = N               .equ    $80
         00000040          = V               .equ    $40
         00000010          = B               .equ    $10
         00000008          = D               .equ    $08
         00000004          = I               .equ    $04
         00000002          = Z               .equ    $02
         00000001          = C               .equ    $01

                             ; Hardware Stack Page

         00000100          = STACK           .equ    $0100
                                             .include "w65c22.inc"
                             ;===============================================================================
                             ; WDC W65C22 Versatile Interface Adapter (VIA) Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; Peripheral Registers
                             ;-------------------------------------------------------------------------------

         00000000          = VIA_ORB         .equ    $00
         00000000          = VIA_IRB         .equ    $00
         00000001          = VIA_ORA         .equ    $01

Portable 65xx Assembler [20.01]

         00000001          = VIA_IRA         .equ    $01
         00000002          = VIA_DDRB        .equ    $02
         00000003          = VIA_DDRA        .equ    $03
         00000004          = VIA_T1CL        .equ    $04
         00000005          = VIA_T1CH        .equ    $05
         00000006          = VIA_T1LL        .equ    $06
         00000007          = VIA_T1LH        .equ    $07
         00000008          = VIA_T2CL        .equ    $08
         00000009          = VIA_T2CH        .equ    $09
         0000000A          = VIA_SR          .equ    $0a
         0000000B          = VIA_ACR         .equ    $0b
         0000000C          = VIA_PCR         .equ    $0c
         0000000D          = VIA_IFR         .equ    $0d
         0000000E          = VIA_IER         .equ    $0e
         0000000F          = VIA_ORAN        .equ    $0f
         0000000F          = VIA_IRAN        .equ    $0f

                             ; ACR Register Bits

         00000080          = VIA_ACR_T1C1    .equ    $80
         00000040          = VIA_ACR_T1C0    .equ    $40
         00000020          = VIA_ACR_T2C     .equ    $20
         00000010          = VIA_ACR_SRC2    .equ    $10
         00000008          = VIA_ACR_SRC1    .equ    $08
         00000004          = VIA_ACR_SRC0    .equ    $04
         00000002          = VIA_ACR_PA      .equ    $02
         00000001          = VIA_ACR_PB      .equ    $01

                             ; PCR Register Bits

         00000080          = VIA_PCR_CB2C2   .equ    $80
         00000040          = VIA_PCR_CB2C1   .equ    $40
         00000020          = VIA_PCR_CB2C0   .equ    $20
         00000010          = VIA_PCR_CB1C    .equ    $10
         00000008          = VIA_PCR_CA2C2   .equ    $08
         00000004          = VIA_PCR_CA2C1   .equ    $04
         00000002          = VIA_PCR_CA2C0   .equ    $02
         00000001          = VIA_PCR_CA1C    .equ    $01

                             ; IFR Register Bits

         00000080          = VIA_IFR_IRQ     .equ    $80
         00000040          = VIA_IFR_T1      .equ    $40
         00000020          = VIA_IFR_T2      .equ    $20
         00000010          = VIA_IFR_CB1     .equ    $10
         00000008          = VIA_IFR_CB2     .equ    $08
         00000004          = VIA_IFR_SR      .equ    $04
         00000002          = VIA_IFR_CA1     .equ    $02
         00000001          = VIA_IFR_CA2     .equ    $01

                             ; IER Register Bits

         00000080          = VIA_IER_SET     .equ    $80
         00000040          = VIA_IER_T1      .equ    $40

Portable 65xx Assembler [20.01]

         00000020          = VIA_IER_T2      .equ    $20
         00000010          = VIA_IER_CB1     .equ    $10
         00000008          = VIA_IER_CB2     .equ    $08
         00000004          = VIA_IER_SR      .equ    $04
         00000002          = VIA_IER_CA1     .equ    $02
         00000001          = VIA_IER_CA2     .equ    $01
                                             .include "w65c51.inc"
                             ;===============================================================================
                             ; WDC W65C51 Asynchronous Communications Interface Adapter (ACIA) Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; The 'Transmitter Data Register Empty' (TDRE) bit in the status register is
                             ; faulty in physical W65C51 chips.
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; Peripheral Registers
                             ;-------------------------------------------------------------------------------

         00000000          = ACIA_DATA       .equ    0               ; Transmit/Receive Register
         00000001          = ACIA_SR         .equ    1               ; Status Register
         00000002          = ACIA_CMD        .equ    2               ; Command Register
         00000003          = ACIA_CR         .equ    3               ; Control Register

         00000080          = ACIA_SR_IRQ     .equ    1<<7            ; Interrupt (IRQ)
         00000040          = ACIA_SR_DSRB    .equ    1<<6            ; Data Set Ready (0=Ready)
         00000020          = ACIA_SR_DCDB    .equ    1<<5            ; Data Carrier Detect (0=Detected)
         00000010          = ACIA_SR_TDRE    .equ    1<<4            ; Tranmitter Data Register Empty
         00000008          = ACIA_SR_RDRF    .equ    1<<3            ; Receiver Data Register Full
         00000004          = ACIA_SR_OVRN    .equ    1<<2            ; Overrun
         00000002          = ACIA_SR_FE      .equ    1<<1            ; Framing Error
         00000001          = ACIA_SR_PE      .equ    1<<0            ; Parity Error

         00000080          = ACIA_CMD_PMC1   .equ    1<<7
         00000040          = ACIA_CMD_PMC0   .equ    1<<6
         00000020          = ACIA_CMD_PME    .equ    1<<5
         00000010          = ACIA_CMD_REM    .equ    1<<4
         00000008          = ACIA_CMD_TIC1   .equ    1<<3
         00000004          = ACIA_CMD_TIC0   .equ    1<<2
         00000002          = ACIA_CMD_IRD    .equ    1<<1
         00000001          = ACIA_CMD_DTR    .equ    1<<0

         00000080          = ACIA_CR_SBN     .equ    1<<7

Portable 65xx Assembler [20.01]

         00000040          = ACIA_CR_WL1     .equ    1<<6
         00000020          = ACIA_CR_WL0     .equ    1<<5
         00000010          = ACIA_CR_RCS     .equ    1<<4
         00000008          = ACIA_CR_SBR3    .equ    1<<3
         00000004          = ACIA_CR_SBR2    .equ    1<<2
         00000002          = ACIA_CR_SBR1    .equ    1<<1
         00000001          = ACIA_CR_SBR0    .equ    1<<0

                             ;===============================================================================
                             ; Configuration
                             ;-------------------------------------------------------------------------------

         007A1200          = FOSC            .equ    8000000         ; Oscillator speed (8MHz)

                             ;===============================================================================
                             ; Peripherals
                             ;-------------------------------------------------------------------------------

         00007F80          = ACIA            .equ    $7f80
         00007FA0          = PIA             .equ    $7fa0
         00007FC0          = VIA1            .equ    $7fc0
         00007FE0          = VIA2            .equ    $7fe0           ; Connected to FTDI 245

         00007FE0          = VIA2_IRB        .equ    VIA2+VIA_IRB
         00007FE0          = VIA2_ORB        .equ    VIA2+VIA_ORB
         00007FE1          = VIA2_ORA        .equ    VIA2+VIA_ORA
         00007FE1          = VIA2_IRA        .equ    VIA2+VIA_IRA
         00007FE2          = VIA2_DDRB       .equ    VIA2+VIA_DDRB
         00007FE3          = VIA2_DDRA       .equ    VIA2+VIA_DDRA

                             ;===============================================================================
                             ; Utility Routines
                             ;-------------------------------------------------------------------------------


                             ;===============================================================================
                             ; ASCII Control Characters
                             ;-------------------------------------------------------------------------------

         00000001          = SOH             .equ    $01
         00000004          = EOT             .equ    $04
         00000006          = ACK             .equ    $06
         00000007          = BEL             .equ    $07
         00000008          = BS              .equ    $08
         0000000A          = LF              .equ    $0a
         0000000D          = CR              .equ    $0d
         00000011          = DC1             .equ    $11             ; XON
         00000013          = DC3             .equ    $13             ; XOFF
         00000015          = NAK             .equ    $15
         00000018          = CAN             .equ    $18
         0000001B          = ESC             .equ    $1b
         0000007F          = DEL             .equ    $7f

                             ;===============================================================================

Portable 65xx Assembler [20.01]

                             ; Instruction and Mode Constants
                             ;-------------------------------------------------------------------------------

         00000000          = OP_ERR          .equ    $00
         00000002          = OP_ADC          .equ    $02
         00000004          = OP_AND          .equ    $04
         00000006          = OP_ASL          .equ    $06
                                             .if     __65C02__
         00000008          = OP_BBR          .equ    $08
         0000000A          = OP_BBS          .equ    $0A
                                             .endif
         0000000C          = OP_BCC          .equ    $0C
         0000000E          = OP_BCS          .equ    $0E
         00000010          = OP_BEQ          .equ    $10
         00000012          = OP_BIT          .equ    $12
         00000014          = OP_BMI          .equ    $14
         00000016          = OP_BNE          .equ    $16
         00000018          = OP_BPL          .equ    $18
                                             .if     __65C02__|__65SC02__
         0000001A          = OP_BRA          .equ    $1A
                                             .endif
         0000001C          = OP_BRK          .equ    $1C
         0000001E          = OP_BVC          .equ    $1E
         00000020          = OP_BVS          .equ    $20
         00000022          = OP_CLC          .equ    $22
         00000024          = OP_CLD          .equ    $24
         00000026          = OP_CLI          .equ    $26
         00000028          = OP_CLV          .equ    $28
         0000002A          = OP_CMP          .equ    $2A
         0000002C          = OP_CPX          .equ    $2C
         0000002E          = OP_CPY          .equ    $2E
         00000030          = OP_DEC          .equ    $30
         00000032          = OP_DEX          .equ    $32
         00000034          = OP_DEY          .equ    $34
         00000036          = OP_EOR          .equ    $36
         00000038          = OP_INC          .equ    $38
         0000003A          = OP_INX          .equ    $3A
         0000003C          = OP_INY          .equ    $3C
         0000003E          = OP_JMP          .equ    $3E
         00000040          = OP_JSR          .equ    $40
         00000042          = OP_LDA          .equ    $42
         00000044          = OP_LDX          .equ    $44
         00000046          = OP_LDY          .equ    $46
         00000048          = OP_LSR          .equ    $48
         0000004A          = OP_NOP          .equ    $4A
         0000004C          = OP_ORA          .equ    $4C
         0000004E          = OP_PHA          .equ    $4E
         00000050          = OP_PHP          .equ    $50
                                             .if     __65C02__|__65SC02__
         00000052          = OP_PHX          .equ    $52
         00000054          = OP_PHY          .equ    $54
                                             .endif
         00000056          = OP_PLA          .equ    $56
         00000058          = OP_PLP          .equ    $58

Portable 65xx Assembler [20.01]

                                             .if     __65C02__|__65SC02__
         0000005A          = OP_PLX          .equ    $5A
         0000005C          = OP_PLY          .equ    $5C
                                             .endif
                                             .if     __65C02__
         0000005E          = OP_RMB          .equ    $5E
                                             .endif
         00000060          = OP_ROL          .equ    $60
         00000062          = OP_ROR          .equ    $62
         00000064          = OP_RTI          .equ    $64
         00000066          = OP_RTS          .equ    $66
         00000068          = OP_SBC          .equ    $68
         0000006A          = OP_SEC          .equ    $6A
         0000006C          = OP_SED          .equ    $6C
         0000006E          = OP_SEI          .equ    $6E
                                             .if     __65C02__
         00000070          = OP_SMB          .equ    $70
                                             .endif
         00000072          = OP_STA          .equ    $72
                                             .if     __65C02__|__65SC02__
         00000074          = OP_STP          .equ    $74
                                             .endif
         00000076          = OP_STX          .equ    $76
         00000078          = OP_STY          .equ    $78
                                             .if     __65C02__|__65SC02__
         0000007A          = OP_STZ          .equ    $7A
                                             .endif
         0000007C          = OP_TAX          .equ    $7C
         0000007E          = OP_TAY          .equ    $7E
                                             .if     __65C02__|__65SC02__
         00000080          = OP_TRB          .equ    $80
         00000082          = OP_TSB          .equ    $82
                                             .endif
         00000084          = OP_TSX          .equ    $84
         00000086          = OP_TXA          .equ    $86
         00000088          = OP_TXS          .equ    $88
         0000008A          = OP_TYA          .equ    $8A
                                             .if     __65C02__|__65SC02__
         0000008C          = OP_WAI          .equ    $8C
                                             .endif

                             ; Bit patterns for addressing modes

         00000080          = MB_IND          .equ    %10000000
         00000040          = MB_REL          .equ    %01000000
         00000020          = MB_BIT          .equ    %00100000

         00000000          = MB_IMP          .equ    %00000000
         00000001          = MB_ZPG          .equ    %00000001
         00000002          = MB_IMM          .equ    %00000010
         00000003          = MB_ABS          .equ    %00000011

         00000010          = MB_ACC          .equ    %00010000
         00000008          = MB_XRG          .equ    %00001000

Portable 65xx Assembler [20.01]

         00000004          = MB_YRG          .equ    %00000100

                             ; Addressing modes

                                             .if     __65C02__
         00000021          = MO_BIT          .equ    MB_BIT       |MB_ZPG
         00000061          = MO_BRL          .equ    MB_BIT|MB_REL|MB_ZPG
                                             .endif
         00000010          = MO_ACC          .equ           MB_ACC|MB_IMP
         00000000          = MO_IMP          .equ                  MB_IMP
         00000002          = MO_IMM          .equ                  MB_IMM
         00000040          = MO_REL          .equ                  MB_REL
         00000001          = MO_ZPG          .equ                  MB_ZPG
         00000009          = MO_ZPX          .equ           MB_XRG|MB_ZPG
         00000005          = MO_ZPY          .equ           MB_YRG|MB_ZPG
                                             .if     __65C02__|__65SC02__
         00000081          = MO_IZP          .equ    MB_IND       |MB_ZPG
                                             .endif
         00000089          = MO_IZX          .equ    MB_IND|MB_XRG|MB_ZPG
         00000085          = MO_IZY          .equ    MB_IND|MB_YRG|MB_ZPG
         00000003          = MO_ABS          .equ                  MB_ABS
         0000000B          = MO_ABX          .equ           MB_XRG|MB_ABS
         00000007          = MO_ABY          .equ           MB_YRG|MB_ABS
         00000083          = MO_IAB          .equ    MB_IND       |MB_ABS
                                             .if     __65C02__|__65SC02__
         0000008B          = MO_IAX          .equ    MB_IND|MB_XRG|MB_ABS
                                             .endif

                             ;===============================================================================
                             ; Macros
                             ;-------------------------------------------------------------------------------

                             ; The MNEM macro compresses three characters into a 16-bit value.

                             MNEM            .macro  CH1,CH2,CH3
                                             .word   ((((CH3 & $1f) << 5)|(CH2 & $1f)) << 5)|(CH1 & $1f)
                                             .endm

                             ;===============================================================================
                             ; Data Areas
                             ;-------------------------------------------------------------------------------

                                             .page0
                                             .org    $00f0

00:00F0  00                : A_REG           .space  1                       ; Saved registers
00:00F1  00                : X_REG           .space  1
00:00F2  00                : Y_REG           .space  1
00:00F3  00                : P_REG           .space  1
00:00F4  0000              : PC_REG          .space  2

00:00F6  00                : CMD_LEN         .space  1                       ; Command buffer length
00:00F7  0000              : ADDR_S          .space  2
00:00F9  0000              : ADDR_E          .space  2

Portable 65xx Assembler [20.01]


00:00FB  0000              : TEMP            .space  2
00:00FD  00                : COUNT           .space  1

                             ;-------------------------------------------------------------------------------

         00007E70          = IRQV            .equ    $7e70           ; Vectors
         00007E72          = NMIV            .equ    $7e72

                             ;===============================================================================
                             ; UART Buffers
                             ;-------------------------------------------------------------------------------

                                             .bss
                                             .org    $0200

         00000080          = CMD_SIZE        .equ    128

00:0200  0000000000000000> : COMMAND         .space  CMD_SIZE        ; Command buffer area

                             ;===============================================================================
                             ; Compressed Mnemonics
                             ;-------------------------------------------------------------------------------

                                             .code

00:0000' 4C????            :                 jmp     RESET

                             MNEMONICS:
                                             MNEM    '?','?','?'
00:0003' FF7F              +                 .word   (((('?' & $1f) << 5)|('?' & $1f)) << 5)|('?' & $1f)
                                             MNEM    'A','D','C'
00:0005' 810C              +                 .word   (((('C' & $1f) << 5)|('D' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'A','N','D'
00:0007' C111              +                 .word   (((('D' & $1f) << 5)|('N' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'A','S','L'
00:0009' 6132              +                 .word   (((('L' & $1f) << 5)|('S' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'B','B','R'
00:000B' 4248              +                 .word   (((('R' & $1f) << 5)|('B' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','B','S'
00:000D' 424C              +                 .word   (((('S' & $1f) << 5)|('B' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','C','C'
00:000F' 620C              +                 .word   (((('C' & $1f) << 5)|('C' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','C','S'
00:0011' 624C              +                 .word   (((('S' & $1f) << 5)|('C' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','E','Q'
00:0013' A244              +                 .word   (((('Q' & $1f) << 5)|('E' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','I','T'
00:0015' 2251              +                 .word   (((('T' & $1f) << 5)|('I' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','M','I'
00:0017' A225              +                 .word   (((('I' & $1f) << 5)|('M' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','N','E'
00:0019' C215              +                 .word   (((('E' & $1f) << 5)|('N' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','P','L'

Portable 65xx Assembler [20.01]

00:001B' 0232              +                 .word   (((('L' & $1f) << 5)|('P' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','R','A'
00:001D' 4206              +                 .word   (((('A' & $1f) << 5)|('R' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','R','K'
00:001F' 422E              +                 .word   (((('K' & $1f) << 5)|('R' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','V','C'
00:0021' C20E              +                 .word   (((('C' & $1f) << 5)|('V' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','V','S'
00:0023' C24E              +                 .word   (((('S' & $1f) << 5)|('V' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'C','L','C'
00:0025' 830D              +                 .word   (((('C' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','D'
00:0027' 8311              +                 .word   (((('D' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','I'
00:0029' 8325              +                 .word   (((('I' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','V'
00:002B' 8359              +                 .word   (((('V' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','M','P'
00:002D' A341              +                 .word   (((('P' & $1f) << 5)|('M' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','P','X'
00:002F' 0362              +                 .word   (((('X' & $1f) << 5)|('P' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','P','Y'
00:0031' 0366              +                 .word   (((('Y' & $1f) << 5)|('P' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'D','E','C'
00:0033' A40C              +                 .word   (((('C' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'D','E','X'
00:0035' A460              +                 .word   (((('X' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'D','E','Y'
00:0037' A464              +                 .word   (((('Y' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'E','O','R'
00:0039' E549              +                 .word   (((('R' & $1f) << 5)|('O' & $1f)) << 5)|('E' & $1f)
                                             MNEM    'I','N','C'
00:003B' C90D              +                 .word   (((('C' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'I','N','X'
00:003D' C961              +                 .word   (((('X' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'I','N','Y'
00:003F' C965              +                 .word   (((('Y' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'J','M','P'
00:0041' AA41              +                 .word   (((('P' & $1f) << 5)|('M' & $1f)) << 5)|('J' & $1f)
                                             MNEM    'J','S','R'
00:0043' 6A4A              +                 .word   (((('R' & $1f) << 5)|('S' & $1f)) << 5)|('J' & $1f)
                                             MNEM    'L','D','A'
00:0045' 8C04              +                 .word   (((('A' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','D','X'
00:0047' 8C60              +                 .word   (((('X' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','D','Y'
00:0049' 8C64              +                 .word   (((('Y' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','S','R'
00:004B' 6C4A              +                 .word   (((('R' & $1f) << 5)|('S' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'N','O','P'
00:004D' EE41              +                 .word   (((('P' & $1f) << 5)|('O' & $1f)) << 5)|('N' & $1f)
                                             MNEM    'O','R','A'
00:004F' 4F06              +                 .word   (((('A' & $1f) << 5)|('R' & $1f)) << 5)|('O' & $1f)
                                             MNEM    'P','H','A'

Portable 65xx Assembler [20.01]

00:0051' 1005              +                 .word   (((('A' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','P'
00:0053' 1041              +                 .word   (((('P' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','X'
00:0055' 1061              +                 .word   (((('X' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','Y'
00:0057' 1065              +                 .word   (((('Y' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','A'
00:0059' 9005              +                 .word   (((('A' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','P'
00:005B' 9041              +                 .word   (((('P' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','X'
00:005D' 9061              +                 .word   (((('X' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','Y'
00:005F' 9065              +                 .word   (((('Y' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'R','M','B'
00:0061' B209              +                 .word   (((('B' & $1f) << 5)|('M' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','O','L'
00:0063' F231              +                 .word   (((('L' & $1f) << 5)|('O' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','O','R'
00:0065' F249              +                 .word   (((('R' & $1f) << 5)|('O' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','T','I'
00:0067' 9226              +                 .word   (((('I' & $1f) << 5)|('T' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','T','S'
00:0069' 924E              +                 .word   (((('S' & $1f) << 5)|('T' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'S','B','C'
00:006B' 530C              +                 .word   (((('C' & $1f) << 5)|('B' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','C'
00:006D' B30C              +                 .word   (((('C' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','D'
00:006F' B310              +                 .word   (((('D' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','I'
00:0071' B324              +                 .word   (((('I' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','M','B'
00:0073' B309              +                 .word   (((('B' & $1f) << 5)|('M' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','A'
00:0075' 9306              +                 .word   (((('A' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','P'
00:0077' 9342              +                 .word   (((('P' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','X'
00:0079' 9362              +                 .word   (((('X' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','Y'
00:007B' 9366              +                 .word   (((('Y' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','Z'
00:007D' 936A              +                 .word   (((('Z' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'T','A','X'
00:007F' 3460              +                 .word   (((('X' & $1f) << 5)|('A' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','A','Y'
00:0081' 3464              +                 .word   (((('Y' & $1f) << 5)|('A' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','R','B'
00:0083' 540A              +                 .word   (((('B' & $1f) << 5)|('R' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','S','B'
00:0085' 740A              +                 .word   (((('B' & $1f) << 5)|('S' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','S','X'

Portable 65xx Assembler [20.01]

00:0087' 7462              +                 .word   (((('X' & $1f) << 5)|('S' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','X','A'
00:0089' 1407              +                 .word   (((('A' & $1f) << 5)|('X' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','X','S'
00:008B' 144F              +                 .word   (((('S' & $1f) << 5)|('X' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','Y','A'
00:008D' 3407              +                 .word   (((('A' & $1f) << 5)|('Y' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'W','A','I'
00:008F' 3724              +                 .word   (((('I' & $1f) << 5)|('A' & $1f)) << 5)|('W' & $1f)

                             ;===============================================================================
                             ; Power On Reset
                             ;-------------------------------------------------------------------------------

                             RESET:
00:0091' 78                :                 sei
00:0092' D8                :                 cld                     ; Ensure binary mode

00:0093' A2FF              :                 ldx     #$ff            ; Reset the stack
00:0095' 9A                :                 txs

                                             repeat                  ; Setup vectors
00:0096' BD????            :                  lda    VECTORS,x
00:0099' 9D707E            :                  sta    IRQV,x
00:009C' E8                :                  inx
00:009D' E004              :                  cpx    #4
00:009F' D0F5              :                 until eq

00:00A1' 20????            :                 jsr     NewLine
00:00A4' A200              :                 ldx     #TTL_STR
00:00A6' 20????            :                 jsr     ShowString
00:00A9' 20????            :                 jsr     NewLine

                                             repeat
00:00AC' 0000              :                  brk    #0              ; And enter monitor
00:00AE' 80FC              :                 forever

                             ;-------------------------------------------------------------------------------

00:00B0' ????              : VECTORS:        .word   IRQ             ; Default vectors
00:00B2' ????              :                 .word   NMI

                             ;===============================================================================
                             ; Entry Point
                             ;-------------------------------------------------------------------------------

                             BRK:
00:00B4' 68                :                 pla                     ; Pull off saved registers
00:00B5' 85F2              :                 sta     Y_REG
00:00B7' 68                :                 pla
00:00B8' 85F1              :                 sta     X_REG
00:00BA' 68                :                 pla
00:00BB' 85F0              :                 sta     A_REG
00:00BD' 68                :                 pla

Portable 65xx Assembler [20.01]

00:00BE' 85F3              :                 sta     P_REG
00:00C0' 38                :                 sec                     ; Move PC back to BRK
00:00C1' 68                :                 pla
00:00C2' E902              :                 sbc     #2
00:00C4' 85F4              :                 sta     PC_REG+0
00:00C6' 68                :                 pla
00:00C7' E900              :                 sbc     #0
00:00C9' 85F5              :                 sta     PC_REG+1

                                     ;       cli                     ; Allow interrupts

                             ;===============================================================================
                             ; Show Registers
                             ;-------------------------------------------------------------------------------

                             ShowRegisters:
00:00CB' 20????            :                 jsr     NewLine
00:00CE' A214              :                 ldx     #PC_STR         ; Display the PC
00:00D0' 20????            :                 jsr     ShowString
00:00D3' A5F5              :                 lda     PC_REG+1
00:00D5' 20????            :                 jsr     ShowHex2
00:00D8' A5F4              :                 lda     PC_REG+0
00:00DA' 20????            :                 jsr     ShowHex2

00:00DD' BA                :                 tsx
00:00DE' 20????            :                 jsr     DumpRegisters

                             ;===============================================================================
                             ; Command Line
                             ;-------------------------------------------------------------------------------

                             NewCommand:
                                             .if     __65C02__|__65SC02__
00:00E1' 64F6              :                 stz     CMD_LEN         ; Mark the buffer as empty
                                             .else
                           -                 lda     #0              ; Mark the buffer as empty
                           -                 sta     CMD_LEN
                                             .endif

                             RptCommand:
00:00E3' 20????            :                 jsr     NewLine         ; Move cursor to next line
00:00E6' A92E              :                 lda     #'.'            ; And output the prompt
00:00E8' 20????            :                 jsr     UartTx

00:00EB' A200              :                 ldx     #0              ; Output prepared command
                                             repeat
00:00ED' E4F6              :                  cpx    CMD_LEN         ; Any saved characters to display?
00:00EF' B009              :                  break  cs              ; No
00:00F1' BD0002            :                  lda    COMMAND,x       ; Yes, print from the buffer
00:00F4' 20????            :                  jsr    UartTx
00:00F7' E8                :                  inx
00:00F8' 80F3              :                 forever

00:00FA' A911              :                 lda     #DC1            ; Send XON

Portable 65xx Assembler [20.01]

00:00FC' 20????            :                 jsr     UartTx
                                             repeat
00:00FF' 20????            :                  jsr    UartRx          ; Wait for some user input
00:0102' 9D0002            :                  sta    COMMAND,x

00:0105' C90D              :                  cmp    #CR             ; End of input?
00:0107' F033              :                  break eq

00:0109' C91B              :                  cmp    #ESC            ; Cancel input?
00:010B' D002              :                  if     eq
00:010D' F0D2              :                   beq   NewCommand      ; Yes
                                              endif

00:010F' C97F              :                  cmp    #DEL            ; Turn a delete
00:0111' D002              :                  if     eq
00:0113' A908              :                   lda   #BS             ; .. into a backspace
                                              endif

00:0115' C908              :                  cmp    #BS             ; Handle backspace
00:0117' D012              :                  if     eq
00:0119' E000              :                   cpx   #0
00:011B' F00C              :                   if    ne
00:011D' 48                :                    pha
00:011E' 20????            :                    jsr  UartTx
00:0121' 20????            :                    jsr  Space
00:0124' 68                :                    pla
00:0125' 20????            :                    jsr  UartTx
00:0128' CA                :                    dex
                                               endif
00:0129' 80D4              :                   continue
                                              endif

00:012B' C920              :                  cmp    #' '            ; Beep if non-printable
00:012D' B007              :                  if     cc
00:012F' A907              :                   lda   #BEL
00:0131' 20????            :                   jsr   UartTx
00:0134' 80C9              :                   continue
                                              endif

00:0136' 20????            :                  jsr    UartTx          ; Otherwise echo to screen
00:0139' E8                :                  inx                    ; And bump counter
00:013A' 80C3              :                 forever

00:013C' 86F6              :                 stx     CMD_LEN         ; Save the command length
00:013E' A913              :                 lda     #DC3            ; Send XOFF
00:0140' 20????            :                 jsr     UartTx

00:0143' A200              :                 ldx     #0              ; Set character offset to start
00:0145' 20????            :                 jsr     SkipSpaces      ; And get first character
00:0148' B097              :                 bcs     NewCommand

00:014A' C90D              :                 cmp     #CR             ; Empty line?
00:014C' F093              :                 beq     NewCommand      ; Yes


Portable 65xx Assembler [20.01]

                             ;===============================================================================
                             ; 'D' - Disassemble Memory
                             ;-------------------------------------------------------------------------------

00:014E' C944              :                 cmp     #'D'
00:0150' D037              :                 if      eq
00:0152' 20????            :                  jsr    GetWord
00:0155' B02F              :                  if     cc
00:0157' 20????            :                   jsr   SetStartAddr
00:015A' 20????            :                   jsr   SetEndAddr
00:015D' 20????            :                   jsr   GetWord
00:0160' B005              :                   if    cc
00:0162' 20????            :                    jsr  SetEndAddr
00:0165' 8002              :                   else
00:0167' E6FA              :                    inc  ADDR_E+1
                                               endif

                                               repeat
00:0169' 20????            :                    jsr  NewLine         ; Print the memory address
00:016C' A5F8              :                    lda  ADDR_S+1
00:016E' 20????            :                    jsr  ShowHex2
00:0171' A5F7              :                    lda  ADDR_S+0
00:0173' 20????            :                    jsr  ShowHex2

00:0176' 20????            :                    jsr  Disassemble
00:0179' 20????            :                    jsr  BumpAddr
00:017C' B005              :                    break cs
00:017E' 20????            :                    jsr  CheckEnd
00:0181' 90E6              :                   until cs
00:0183' 4C????            :                   jmp   NewCommand
                                              endif
00:0186' 4C????            :                  jmp    Error
                                             endif

                             ;===============================================================================
                             ; 'F' - Fill
                             ;-------------------------------------------------------------------------------

00:0189' C946              :                 cmp     #'F'
00:018B' D02F              :                 if      eq
00:018D' 20????            :                  jsr    GetWord         ; Extract start address
00:0190' B024              :                  if cc
00:0192' 20????            :                   jsr   SetStartAddr
00:0195' 20????            :                   jsr   GetWord         ; Extract end address
00:0198' B01C              :                   bcs   .FillFail
00:019A' 20????            :                   jsr   SetEndAddr
00:019D' 20????            :                   jsr   GetByte         ; Extract fill byte
00:01A0' B014              :                   bcs   .FillFail

                                               repeat
00:01A2' A000              :                    ldy  #0              ; Perform the fill
00:01A4' A5FB              :                    lda  TEMP+0
00:01A6' 91F7              :                    sta  (ADDR_S),y


Portable 65xx Assembler [20.01]

00:01A8' C8                :                    iny
00:01A9' 98                :                    tya
00:01AA' 20????            :                    jsr  BumpAddr        ; Until the end
00:01AD' B005              :                    break cs
00:01AF' 20????            :                    jsr  CheckEnd
00:01B2' 90EE              :                   until cs
00:01B4' 8003              :                  else
00:01B6' 4C????            : .FillFail:        jmp   Error
                                              endif
00:01B9' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'G' - Go
                             ;-------------------------------------------------------------------------------

00:01BC' C947              :                 cmp     #'G'
00:01BE' D022              :                 if      eq
00:01C0' 20????            :                  jsr    GetWord         ; Extract start address
00:01C3' B008              :                  if cc
00:01C5' A5FC              :                   lda   TEMP+1
00:01C7' 48                :                   pha
00:01C8' A5FB              :                   lda   TEMP+0
00:01CA' 48                :                   pha
00:01CB' 8006              :                  else
00:01CD' A5F5              :                   lda   PC_REG+1        ; Push the target address
00:01CF' 48                :                   pha
00:01D0' A5F4              :                   lda   PC_REG+0
00:01D2' 48                :                   pha
                                              endif

00:01D3' A911              :                  lda    #DC1            ; Send XON
00:01D5' 20????            :                  jsr    UartTx

00:01D8' A5F3              :                  lda    P_REG           ; And status flags
00:01DA' 48                :                  pha
00:01DB' A5F0              :                  lda    A_REG           ; Reload A, X and Y
00:01DD' A6F1              :                  ldx    X_REG
00:01DF' A4F2              :                  ldy    Y_REG
00:01E1' 40                :                  rti                    ; Then go to code
                                             endif

                             ;===============================================================================
                             ; 'M' - Show Memory
                             ;-------------------------------------------------------------------------------

00:01E2' C94D              :                 cmp     #'M'
00:01E4' D060              :                 if      eq
00:01E6' 20????            :                  jsr    GetWord         ; Extract start address
00:01E9' B058              :                  if     cc
00:01EB' 20????            :                   jsr   SetStartAddr
00:01EE' 20????            :                   jsr   SetEndAddr
00:01F1' 20????            :                   jsr   GetWord         ; Extract end address
00:01F4' B005              :                   if    cc

Portable 65xx Assembler [20.01]

00:01F6' 20????            :                    jsr  SetEndAddr
00:01F9' 8002              :                   else
00:01FB' E6FA              :                    inc  ADDR_E+1        ; Or default to start + 256
                                               endif

                                               repeat
00:01FD' 20????            :                    jsr  NewLine         ; Print the memory address
00:0200' A5F8              :                    lda  ADDR_S+1
00:0202' 20????            :                    jsr  ShowHex2
00:0205' A5F7              :                    lda  ADDR_S+0
00:0207' 20????            :                    jsr  ShowHex2

00:020A' A000              :                    ldy  #0              ; Dump 16 bytes of data
                                                repeat
00:020C' 20????            :                     jsr Space
00:020F' B1F7              :                     lda (ADDR_S),Y
00:0211' C8                :                     iny
00:0212' 20????            :                     jsr ShowHex2
00:0215' C010              :                     cpy #16
00:0217' D0F3              :                    until eq

00:0219' 20????            :                    jsr  Space           ; Then show as characters
00:021C' 20????            :                    jsr  Bar
00:021F' A000              :                    ldy  #0
                                                repeat
00:0221' B1F7              :                     lda (ADDR_S),Y
00:0223' C8                :                     iny
00:0224' 20????            :                     jsr IsPrintable
00:0227' B002              :                     if  cc
00:0229' A92E              :                      lda #'.'
                                                 endif
00:022B' 20????            :                     jsr UartTx
00:022E' C010              :                     cpy #16
00:0230' D0EF              :                    until eq
00:0232' 20????            :                    jsr  Bar

00:0235' 98                :                    tya
00:0236' 20????            :                    jsr  BumpAddr
00:0239' B005              :                    break cs
00:023B' 20????            :                    jsr  CheckEnd
00:023E' 90BD              :                   until cs
00:0240' 4C????            :                   jmp   NewCommand
                                              endif
00:0243' 4C????            :                  jmp    Error
                                             endif

                             ;===============================================================================
                             ; 'R' - Show Registers
                             ;-------------------------------------------------------------------------------

00:0246' C952              :                 cmp     #'R'
00:0248' D003              :                 if      eq
00:024A' 4C????            :                  jmp    ShowRegisters
                                             endif

Portable 65xx Assembler [20.01]


                             ;===============================================================================
                             ; 'S' - S19 Record Loader
                             ;-------------------------------------------------------------------------------

00:024D' C953              :                 cmp     #'S'
00:024F' D051              :                 if      eq
00:0251' 20????            :                  jsr    NextChar
00:0254' C931              :                  cmp    #'1'            ; Data record?
00:0256' D02C              :                  if     eq
00:0258' 20????            :                   jsr   GetByte         ; Extract length
00:025B' B03F              :                   bcs   .S19Fail
00:025D' 85F9              :                   sta   ADDR_E+0
00:025F' 20????            :                   jsr   GetWord         ; Extract address
00:0262' B038              :                   bcs   .S19Fail
00:0264' 20????            :                   jsr   SetStartAddr
00:0267' C6F9              :                   dec   ADDR_E+0        ; Reduce count
00:0269' C6F9              :                   dec   ADDR_E+0
00:026B' C6F9              :                   dec   ADDR_E+0

00:026D' A000              :                   ldy   #0
00:026F' 84FA              :                   sty   ADDR_E+1
                                               repeat
00:0271' 20????            :                    jsr  GetByte         ; Extract data byte
00:0274' B026              :                    bcs  .S19Fail
00:0276' A4FA              :                    ldy  ADDR_E+1        ; And save
00:0278' A5FB              :                    lda  TEMP+0
00:027A' 91F7              :                    sta  (ADDR_S),y
00:027C' E6FA              :                    inc  ADDR_E+1
00:027E' C6F9              :                    dec  ADDR_E+0        ; Until line processed
00:0280' D0EF              :                   until eq
00:0282' 801B              :                  else
00:0284' C939              :                   cmp   #'9'
00:0286' D014              :                   if    eq
00:0288' 20????            :                    jsr  GetByte         ; Extract length
00:028B' B00F              :                    bcs  .S19Fail
00:028D' 20????            :                    jsr  GetWord         ; Extract start address
00:0290' B00A              :                    bcs  .S19Fail
00:0292' A5FB              :                    lda  TEMP+0          ; Copy to PC
00:0294' 85F4              :                    sta  PC_REG+0
00:0296' A5FC              :                    lda  TEMP+1
00:0298' 85F5              :                    sta  PC_REG+1
00:029A' 8003              :                   else
00:029C' 4C????            : .S19Fail:          jmp  Error
                                               endif
                                              endif
00:029F' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'T' - Trace
                             ;-------------------------------------------------------------------------------

00:02A2' C954              :                 cmp     #'T'

Portable 65xx Assembler [20.01]

00:02A4' F0034C????        :                 if eq
00:02A9' 20????            :                  jsr    GetWord         ; Extract start address
00:02AC' B008              :                  if cc
00:02AE' A4FB              :                   ldy   TEMP+0          ; And overwrite PC
00:02B0' 84F4              :                   sty   PC_REG+0
00:02B2' A4FC              :                   ldy   TEMP+1
00:02B4' 84F5              :                   sty   PC_REG+1
                                              endif

00:02B6' C92C              :                  cmp    #','
00:02B8' 38                :                  sec
00:02B9' D003              :                  if eq
00:02BB' 20????            :                   jsr   GetWord         ; Extract count
                                              endif
00:02BE' 9007              :                  if cs
00:02C0' A001              :                   ldy   #1              ; Default one step
00:02C2' 84FB              :                   sty   TEMP+0
00:02C4' 88                :                   dey
00:02C5' 84FC              :                   sty   TEMP+1
                                              endif

                             Trace:
00:02C7' 20????            :                  jsr    NewLine         ; Show the current PC
00:02CA' A5F5              :                  lda    PC_REG+1
00:02CC' 85F8              :                  sta    ADDR_S+1
00:02CE' 20????            :                  jsr    ShowHex2
00:02D1' A5F4              :                  lda    PC_REG+0
00:02D3' 85F7              :                  sta    ADDR_S+0
00:02D5' 20????            :                  jsr    ShowHex2

00:02D8' 20????            :                  jsr    Disassemble     ; Disassembly opcode
                                              repeat
00:02DB' E010              :                   cpx   #16             ; .. justify output
00:02DD' B006              :                   break cs
00:02DF' 20????            :                   jsr   Space
00:02E2' E8                :                   inx
00:02E3' 80F6              :                  forever
00:02E5' BA                :                  tsx
00:02E6' 20????            :                  jsr    DumpRegisters   ; .. and show registers

00:02E9' A9F0              :                  lda    #<A_REG         ; Assume accumulator is target
00:02EB' 85F7              :                  sta    ADDR_S+0
00:02ED' A900              :                  lda    #>A_REG
00:02EF' 85F8              :                  sta    ADDR_S+1

00:02F1' A000              :                  ldy    #0
00:02F3' B1F4              :                  lda    (PC_REG),y      ; Fetch the next opcode
00:02F5' E6F4              :                  inc    PC_REG+0        ; .. and bump PC
00:02F7' D002              :                  if eq
00:02F9' E6F5              :                   inc   PC_REG+1
                                              endif
00:02FB' AA                :                  tax
00:02FC' BD????            :                  lda    MODES,X         ; Extract address type
00:02FF' 2903              :                  and    #MB_ABS

Portable 65xx Assembler [20.01]

00:0301' C901              :                  cmp    #MB_ZPG         ; Zero page?
00:0303' D00E              :                  if eq
00:0305' B1F4              :                   lda   (PC_REG),y
00:0307' 85F7              :                   sta   ADDR_S+0
00:0309' 84F8              :                   sty   ADDR_S+1
00:030B' E6F4              :                   inc   PC_REG+0
00:030D' D002              :                   if eq
00:030F' E6F5              :                    inc  PC_REG+1
                                               endif
00:0311' 802C              :                  else
00:0313' C903              :                   cmp   #MB_ABS         ; Absolute ?
00:0315' D016              :                   if eq
00:0317' B1F4              :                    lda  (PC_REG),y
00:0319' 85F7              :                    sta  ADDR_S+0
00:031B' E6F4              :                    inc  PC_REG+0
00:031D' D002              :                    if eq
00:031F' E6F5              :                     inc PC_REG+1
                                                endif
00:0321' B1F4              :                    lda  (PC_REG),y
00:0323' 85F8              :                    sta  ADDR_S+1
00:0325' E6F4              :                    inc  PC_REG+0
00:0327' D002              :                    if eq
00:0329' E6F5              :                     inc PC_REG+1
                                                endif
00:032B' 8012              :                   else
00:032D' C902              :                    cmp  #MB_IMM         ; Immediate?
00:032F' D00E              :                    if eq
00:0331' A5F4              :                     lda PC_REG+0
00:0333' 85F7              :                     sta ADDR_S+0
00:0335' A5F5              :                     lda PC_REG+1
00:0337' 85F8              :                     sta ADDR_S+1
00:0339' E6F4              :                     inc PC_REG+0
00:033B' D002              :                     if eq
00:033D' E6F5              :                      inc PC_REG+1
                                                 endif
                                                endif
                                               endif
                                              endif

00:033F' A908              :                  lda    #MB_XRG         ; Handle X index
00:0341' 3D????            :                  and    MODES,x
00:0344' F01D              :                  if ne
00:0346' 18                :                   clc
00:0347' A5F1              :                   lda   X_REG
00:0349' 65F7              :                   adc   ADDR_S+0
00:034B' 85F7              :                   sta   ADDR_S+0
00:034D' 9002              :                   if cs
00:034F' E6F8              :                    inc  ADDR_S+1
                                               endif

00:0351' A909              :                   lda   #MO_ZPX         ; Force wrap around for ZPG,X
00:0353' DD????            :                   cmp   MODES,x
00:0356' D002              :                   if eq
00:0358' 84F8              :                    sty  ADDR_S+1

Portable 65xx Assembler [20.01]

                                               endif

00:035A' A989              :                   lda   #MO_IZX         ; .. and (ZPG,X)
00:035C' DD????            :                   cmp   MODES,x
00:035F' D002              :                   if eq
00:0361' 84F8              :                    sty  ADDR_S+1
                                               endif
                                              endif

00:0363' A980              :                  lda    #MB_IND         ; Handle indirection
00:0365' 3D????            :                  and    MODES,x
00:0368' F01C              :                  if ne
00:036A' B1F7              :                   lda   (ADDR_S),y      ; Fetch low byte of target
00:036C' 48                :                   pha

                                             .if     __65C02__|__65SC02__
00:036D' E06C              :                   cpx   #$6C            ; JMP (abs)?
00:036F' F002              :                   if ne
00:0371' E07C              :                    cpx  #$7C            ; or JMP (abs,X)?
                                               endif
00:0373' D008              :                   if eq
00:0375' E6F7              :                    inc  ADDR_S+0        ; 65C02 increments properly
00:0377' D002              :                    if eq
00:0379' E6F8              :                     inc ADDR_S+1
                                                endif
00:037B' 8002              :                   else
00:037D' E6F7              :                    inc  ADDR_S+0        ; Otherwise just the low byte
                                               endif
                                             .else
                           -                   inc   ADDR_S+0        ; 6502 bumps just the low byte
                                             .endif

00:037F' B1F7              :                   lda   (ADDR_S),y      ; Fetch high byte of target
00:0381' 85F8              :                   sta   ADDR_S+1        ; And save indirect address
00:0383' 68                :                   pla
00:0384' 85F7              :                   sta   ADDR_S+0
                                              endif

00:0386' A904              :                  lda    #MB_YRG         ; Handle Y index
00:0388' 3D????            :                  and    MODES,x
00:038B' F014              :                  if ne
00:038D' 18                :                   clc
00:038E' A5F2              :                   lda   Y_REG
00:0390' 65F7              :                   adc   ADDR_S+0
00:0392' 85F7              :                   sta   ADDR_S+0
00:0394' 9002              :                   if cs
00:0396' E6F8              :                    inc  ADDR_S+1
                                               endif

00:0398' A901              :                   lda   #MB_ZPG         ; Restrict to zero page
00:039A' 3D????            :                   and   MODES,x
00:039D' F002              :                   if ne
00:039F' A4F8              :                    ldy  ADDR_S+1
                                               endif

Portable 65xx Assembler [20.01]

                                              endif

00:03A1' A940              :                  lda    #MB_REL         ; Relative address?
00:03A3' 3D????            :                  and    MODES,x
00:03A6' F015              :                  if ne
00:03A8' B1F4              :                   lda   (PC_REG),y
00:03AA' 1001              :                   if mi
00:03AC' 88                :                    dey
                                               endif
00:03AD' E6F4              :                   inc   PC_REG+0
00:03AF' D002              :                   if eq
00:03B1' E6F5              :                    inc  PC_REG+1
                                               endif
00:03B3' 18                :                   clc
00:03B4' 65F4              :                   adc   PC_REG+0
00:03B6' 85F9              :                   sta   ADDR_E+0
00:03B8' 98                :                   tya
00:03B9' 65F5              :                   adc   PC_REG+1
00:03BB' 85FA              :                   sta   ADDR_E+1
                                              endif

00:03BD' BC????            :                  ldy    OPCODES,x       ; Recover the opcode index
00:03C0' B9????            :                  lda    EMULATE+1,y
00:03C3' 48                :                  pha
00:03C4' B9????            :                  lda    EMULATE+0,y
00:03C7' 48                :                  pha
00:03C8' A000              :                  ldy    #0
00:03CA' A5F3              :                  lda    P_REG           ; Restore status flags
00:03CC' 48                :                  pha
00:03CD' A5F0              :                  lda    A_REG           ; .. and A
00:03CF' 28                :                  plp
00:03D0' 60                :                  rts                    ; Go to emulation code

                             EMULATE:
00:03D1' ????              :                 .word   EM_ERR-1
00:03D3' ????              :                 .word   EM_ADC-1
00:03D5' ????              :                 .word   EM_AND-1
00:03D7' ????              :                 .word   EM_ASL-1
00:03D9' ????              :                 .word   EM_BBR-1
00:03DB' ????              :                 .word   EM_BBS-1
00:03DD' ????              :                 .word   EM_BCC-1
00:03DF' ????              :                 .word   EM_BCS-1
00:03E1' ????              :                 .word   EM_BEQ-1
00:03E3' ????              :                 .word   EM_BIT-1
00:03E5' ????              :                 .word   EM_BMI-1
00:03E7' ????              :                 .word   EM_BNE-1
00:03E9' ????              :                 .word   EM_BPL-1
00:03EB' ????              :                 .word   EM_BRA-1
00:03ED' ????              :                 .word   EM_BRK-1
00:03EF' ????              :                 .word   EM_BVC-1
00:03F1' ????              :                 .word   EM_BVS-1
00:03F3' ????              :                 .word   EM_CLC-1
00:03F5' ????              :                 .word   EM_CLD-1
00:03F7' ????              :                 .word   EM_CLI-1

Portable 65xx Assembler [20.01]

00:03F9' ????              :                 .word   EM_CLV-1
00:03FB' ????              :                 .word   EM_CMP-1
00:03FD' ????              :                 .word   EM_CPX-1
00:03FF' ????              :                 .word   EM_CPY-1
00:0401' ????              :                 .word   EM_DEC-1
00:0403' ????              :                 .word   EM_DEX-1
00:0405' ????              :                 .word   EM_DEY-1
00:0407' ????              :                 .word   EM_EOR-1
00:0409' ????              :                 .word   EM_INC-1
00:040B' ????              :                 .word   EM_INX-1
00:040D' ????              :                 .word   EM_INY-1
00:040F' ????              :                 .word   EM_JMP-1
00:0411' ????              :                 .word   EM_JSR-1
00:0413' ????              :                 .word   EM_LDA-1
00:0415' ????              :                 .word   EM_LDX-1
00:0417' ????              :                 .word   EM_LDY-1
00:0419' ????              :                 .word   EM_LSR-1
00:041B' ????              :                 .word   EM_NOP-1
00:041D' ????              :                 .word   EM_ORA-1
00:041F' ????              :                 .word   EM_PHA-1
00:0421' ????              :                 .word   EM_PHP-1
00:0423' ????              :                 .word   EM_PHX-1
00:0425' ????              :                 .word   EM_PHY-1
00:0427' ????              :                 .word   EM_PLA-1
00:0429' ????              :                 .word   EM_PLP-1
00:042B' ????              :                 .word   EM_PLX-1
00:042D' ????              :                 .word   EM_PLY-1
00:042F' ????              :                 .word   EM_RMB-1
00:0431' ????              :                 .word   EM_ROL-1
00:0433' ????              :                 .word   EM_ROR-1
00:0435' ????              :                 .word   EM_RTI-1
00:0437' ????              :                 .word   EM_RTS-1
00:0439' ????              :                 .word   EM_SBC-1
00:043B' ????              :                 .word   EM_SEC-1
00:043D' ????              :                 .word   EM_SED-1
00:043F' ????              :                 .word   EM_SEI-1
00:0441' ????              :                 .word   EM_SMB-1
00:0443' ????              :                 .word   EM_STA-1
00:0445' ????              :                 .word   EM_STP-1
00:0447' ????              :                 .word   EM_STX-1
00:0449' ????              :                 .word   EM_STY-1
00:044B' ????              :                 .word   EM_STZ-1
00:044D' ????              :                 .word   EM_TAX-1
00:044F' ????              :                 .word   EM_TAY-1
00:0451' ????              :                 .word   EM_TSB-1
00:0453' ????              :                 .word   EM_TRB-1
00:0455' ????              :                 .word   EM_TXS-1
00:0457' ????              :                 .word   EM_TXA-1
00:0459' ????              :                 .word   EM_TXS-1
00:045B' ????              :                 .word   EM_TYA-1
00:045D' ????              :                 .word   EM_WAI-1

                             ;-------------------------------------------------------------------------------


Portable 65xx Assembler [20.01]

                             EM_CLC:
00:045F' 18                :                  clc
00:0460' 4C????            :                  jmp    SaveP

                             EM_CLD:
00:0463' D8                :                  cld
00:0464' 4C????            :                  jmp    SaveP

                             EM_CLI:
00:0467' 58                :                  cli
00:0468' 4C????            :                  jmp    SaveP

                             EM_CLV:
00:046B' B8                :                  clv
00:046C' 4C????            :                  jmp    SaveP

                             EM_SEC:
00:046F' 38                :                  sec
00:0470' 4C????            :                  jmp    SaveP

                             EM_SED:
00:0473' F8                :                  sed
00:0474' 4C????            :                  jmp    SaveP

                             EM_SEI:
00:0477' 78                :                  sei
00:0478' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_ADC:
00:047B' 71F7              :                  adc    (ADDR_S),y
00:047D' 4C????            :                  jmp    SaveAP

                             EM_SBC:
00:0480' F1F7              :                  sbc    (ADDR_S),y
00:0482' 4C????            :                  jmp    SaveAP

                             ;-------------------------------------------------------------------------------

                             EM_CPX:
00:0485' A5F1              :                  lda    X_REG
00:0487' 2C                :                  .byte  $2c             ; BIT trick

                             EM_CPY:
00:0488' A5F2              :                  lda    Y_REG

                             EM_CMP:
00:048A' D1F7              :                  cmp    (ADDR_S),y
00:048C' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_AND:

Portable 65xx Assembler [20.01]

00:048F' 31F7              :                  and    (ADDR_S),y
00:0491' 4C????            :                  jmp    SaveAP

                             EM_EOR:
00:0494' 51F7              :                  eor    (ADDR_S),y
00:0496' 4C????            :                  jmp    SaveAP

                             EM_ORA:
00:0499' 31F7              :                  and    (ADDR_S),y
00:049B' 4C????            :                  jmp    SaveAP

                             EM_BIT:
                                             .if     __65C02__|__65SC02__
00:049E' E089              :                  cpx    #$89            ; Immediate does not affect NV
00:04A0' F00C              :                  if ne
00:04A2' 48                :                   pha
00:04A3' B1F7              :                   lda   (ADDR_S),y      ; Extract NV bits from value
00:04A5' 45F3              :                   eor   P_REG
00:04A7' 29C0              :                   and   #$c0
00:04A9' 45F3              :                   eor   P_REG
00:04AB' 85F3              :                   sta   P_REG
00:04AD' 68                :                   pla
                                              endif
                                             .endif
00:04AE' 31F7              :                  and    (ADDR_S),y      ; Handle Z flag
00:04B0' 08                :                  php
00:04B1' 68                :                  pla
00:04B2' 45F3              :                  eor    P_REG
00:04B4' 2902              :                  and    #$02
00:04B6' 45F3              :                  eor    P_REG
00:04B8' 85F3              :                  sta    P_REG
00:04BA' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_ASL:
00:04BD' B1F7              :                  lda    (ADDR_S),y
00:04BF' 0A                :                  asl    a
00:04C0' 91F7              :                  sta    (ADDR_S),y
00:04C2' 4C????            :                  jmp    SaveP

                             EM_LSR:
00:04C5' B1F7              :                  lda    (ADDR_S),y
00:04C7' 4A                :                  lsr    a
00:04C8' 91F7              :                  sta    (ADDR_S),y
00:04CA' 4C????            :                  jmp    SaveP

                             EM_ROL:
00:04CD' B1F7              :                  lda    (ADDR_S),y
00:04CF' 2A                :                  rol    a
00:04D0' 91F7              :                  sta    (ADDR_S),y
00:04D2' 4C????            :                  jmp    SaveP

                             EM_ROR:

Portable 65xx Assembler [20.01]

00:04D5' B1F7              :                  lda    (ADDR_S),y
00:04D7' 6A                :                  ror    a
00:04D8' 91F7              :                  sta    (ADDR_S),y
00:04DA' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_DEC:
00:04DD' B1F7              :                  lda    (ADDR_S),y
00:04DF' AA                :                  tax
00:04E0' CA                :                  dex
00:04E1' 8A                :                  txa
00:04E2' 91F7              :                  sta    (ADDR_S),y
00:04E4' 4C????            :                  jmp    SaveP

                             EM_DEX:
00:04E7' C6F1              :                  dec    X_REG
00:04E9' 4C????            :                  jmp    SaveP

                             EM_DEY:
00:04EC' C6F2              :                  dec    Y_REG
00:04EE' 4C????            :                  jmp    SaveP

                             EM_INC:
00:04F1' B1F7              :                  lda    (ADDR_S),y
00:04F3' AA                :                  tax
00:04F4' E8                :                  inx
00:04F5' 8A                :                  txa
00:04F6' 91F7              :                  sta    (ADDR_S),y
00:04F8' 4C????            :                  jmp    SaveP

                             EM_INX:
00:04FB' E6F1              :                  inc    X_REG
00:04FD' 4C????            :                  jmp    SaveP

                             EM_INY:
00:0500' E6F2              :                  inc    Y_REG
00:0502' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_BCC:
00:0505' 901C              :                  bcc    EM_BRA
00:0507' 4C????            :                  jmp    SaveNone

                             EM_BCS:
00:050A' B017              :                  bcs    EM_BRA
00:050C' 4C????            :                  jmp    SaveNone

                             EM_BEQ:
00:050F' F012              :                  beq    EM_BRA
00:0511' 4C????            :                  jmp    SaveNone

                             EM_BMI:

Portable 65xx Assembler [20.01]

00:0514' 300D              :                  bmi    EM_BRA
00:0516' 4C????            :                  jmp    SaveNone

                             EM_BNE:
00:0519' D008              :                  bne    EM_BRA
00:051B' 4C????            :                  jmp    SaveNone

                             EM_BPL:
00:051E' 1003              :                  bpl    EM_BRA
00:0520' 4C????            :                  jmp    SaveNone

                             EM_BRA:
00:0523' A5F9              :                  lda    ADDR_E+0
00:0525' 85F4              :                  sta    PC_REG+0
00:0527' A5FA              :                  lda    ADDR_E+1
00:0529' 85F5              :                  sta    PC_REG+1
00:052B' 4C????            :                  jmp    SaveNone

                             EM_BVC:
00:052E' 50F3              :                  bvc    EM_BRA
00:0530' 4C????            :                  jmp    SaveNone

                             EM_BVS:
00:0533' 70EE              :                  bvs    EM_BRA
00:0535' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_JSR:
00:0538' A5F4              :                  lda    PC_REG+0        ; Back up
00:053A' D002              :                  if eq
00:053C' C6F5              :                   dec   PC_REG+1
                                              endif
00:053E' C6F4              :                  dec    PC_REG+0
00:0540' A5F5              :                  lda    PC_REG+1        ; And push PC
00:0542' 48                :                  pha
00:0543' A5F4              :                  lda    PC_REG+0
00:0545' 48                :                  pha

                             EM_JMP:
00:0546' A5F7              :                  lda    ADDR_S+0        ; Set PC to target address
00:0548' 85F4              :                  sta    PC_REG+0
00:054A' A5F8              :                  lda    ADDR_S+1
00:054C' 85F5              :                  sta    PC_REG+1
00:054E' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_LDA:
00:0551' B1F7              :                  lda    (ADDR_S),y
00:0553' 4C????            :                  jmp    SaveAP

                             EM_LDX:
00:0556' B1F7              :                  lda    (ADDR_S),y

Portable 65xx Assembler [20.01]

00:0558' 85F1              :                  sta    X_REG
00:055A' 4C????            :                  jmp    SaveP

                             EM_LDY:
00:055D' B1F7              :                  lda    (ADDR_S),y
00:055F' 85F2              :                  sta    Y_REG
00:0561' 4C????            :                  jmp    SaveP

                             EM_STA:
00:0564' 91F7              :                  sta    (ADDR_S),y
00:0566' 4C????            :                  jmp    SaveNone

                             EM_STX:
00:0569' A5F1              :                  lda    X_REG
00:056B' 4C????            :                  JMP    EM_STA

                             EM_STY:
00:056E' A5F2              :                  lda    Y_REG
00:0570' 4C????            :                  jmp    EM_STA

                             EM_STZ:
00:0573' A900              :                  lda    #0
00:0575' 4C????            :                  jmp    EM_STA

                             ;-------------------------------------------------------------------------------

                             EM_PHA:
00:0578' 48                :                  pha
00:0579' 4C????            :                  jmp    SaveNone

                             EM_PHP:
00:057C' A5F3              :                  lda    P_REG
00:057E' 48                :                  pha
00:057F' 4C????            :                  jmp    SaveNone

                             EM_PHX:
00:0582' A5F1              :                  lda    X_REG
00:0584' 48                :                  pha
00:0585' 4C????            :                  jmp    SaveNone

                             EM_PHY:
00:0588' A5F2              :                  lda    Y_REG
00:058A' 48                :                  pha
00:058B' 4C????            :                  jmp    SaveNone

                             EM_PLA:
00:058E' 68                :                  pla
00:058F' 4C????            :                  jmp    SaveAP

                             EM_PLP:
00:0592' 68                :                  pla
00:0593' 0930              :                  ora    #$30
00:0595' 85F3              :                  sta    P_REG
00:0597' 4C????            :                  jmp    SaveNone

Portable 65xx Assembler [20.01]


                             EM_PLX:
00:059A' 68                :                  pla
00:059B' 85F1              :                  sta    X_REG
00:059D' 4C????            :                  jmp    SaveP

                             EM_PLY:
00:05A0' 68                :                  pla
00:05A1' 85F2              :                  sta    Y_REG
00:05A3' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_NOP:
00:05A6' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_BRK:
00:05A9' 08                :                  php
00:05AA' 68                :                  pla
00:05AB' 0904              :                  ora    #(1<<2)         ; Set interrupt disable bit
00:05AD' 48                :                  pha
00:05AE' A5F5              :                  lda    PC_REG+1        ; Push instruction address
00:05B0' 48                :                  pha
00:05B1' A5F4              :                  lda    PC_REG+0
00:05B3' 48                :                  pha
00:05B4' ADFEFF            :                  lda    $fffe           ; Load vector address
00:05B7' 85F4              :                  sta    PC_REG+0
00:05B9' ADFFFF            :                  lda    $ffff
00:05BC' 85F5              :                  sta    PC_REG+1
00:05BE' 4C????            :                  jmp    SaveNone

                             EM_RTI:
00:05C1' 68                :                  pla
00:05C2' 85F4              :                  sta    PC_REG+0
00:05C4' 68                :                  pla
00:05C5' 85F5              :                  sta    PC_REG+1
00:05C7' 68                :                  pla
00:05C8' 0930              :                  ora    #$30
00:05CA' 85F3              :                  sta    P_REG
00:05CC' 4C????            :                  jmp    SaveNone

                             EM_RTS:
00:05CF' 68                :                  pla
00:05D0' 85F4              :                  sta    PC_REG+0
00:05D2' 68                :                  pla
00:05D3' 85F5              :                  sta    PC_REG+1
00:05D5' E6F4              :                  inc    PC_REG+0
00:05D7' D002              :                  if eq
00:05D9' E6F5              :                   inc   PC_REG+1
                                              endif
00:05DB' 4C????            :                  jmp    SaveNone


Portable 65xx Assembler [20.01]

                             EM_STP:
00:05DE' 4C????            :                  jmp    SaveNone

                             EM_WAI:
00:05E1' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_TAX:
00:05E4' A5F0              :                  lda    A_REG
00:05E6' 85F1              :                  sta    X_REG
00:05E8' 4C????            :                  jmp    SaveP

                             EM_TAY:
00:05EB' A5F0              :                  lda    A_REG
00:05ED' 85F2              :                  sta    Y_REG
00:05EF' 4C????            :                  jmp    SaveP

                             EM_TSX:
00:05F2' BA                :                  tsx
00:05F3' 86F1              :                  stx    X_REG
00:05F5' 4C????            :                  jmp    SaveP

                             EM_TXA:
00:05F8' A5F1              :                  lda    X_REG
00:05FA' 4C????            :                  jmp    SaveAP

                             EM_TXS:
00:05FD' A6F1              :                  ldx    X_REG
00:05FF' 9A                :                  txs
00:0600' 4C????            :                  jmp    SaveNone

                             EM_TYA:
00:0603' A5F2              :                  lda    Y_REG
00:0605' 4C????            :                  jmp    SaveAP

                             ;-------------------------------------------------------------------------------

                             EM_BBR:
00:0608' 8A                :                  txa                    ; Get bit number
00:0609' 2970              :                  and    #$70
00:060B' 4A                :                  lsr    a
00:060C' 4A                :                  lsr    a
00:060D' 4A                :                  lsr    a
00:060E' 4A                :                  lsr    a
00:060F' AA                :                  tax
00:0610' BD????            :                  lda    BITS,x          ; Map to bit mask
00:0613' 31F7              :                  and    (ADDR_S),y      ; And test value
00:0615' D06B              :                  bne    SaveNone
00:0617' 4C????            :                  jmp    EM_BRA

                             EM_BBS:
00:061A' 8A                :                  txa                    ; Get bit number
00:061B' 2970              :                  and    #$70

Portable 65xx Assembler [20.01]

00:061D' 4A                :                  lsr    a
00:061E' 4A                :                  lsr    a
00:061F' 4A                :                  lsr    a
00:0620' 4A                :                  lsr    a
00:0621' AA                :                  tax
00:0622' BD????            :                  lda    BITS,x          ; Map to bit mask
00:0625' 31F7              :                  and    (ADDR_S),y      ; And test value
00:0627' F059              :                  beq    SaveNone
00:0629' 4C????            :                  jmp    EM_BRA

                             EM_RMB:
00:062C' 8A                :                  txa                    ; Get bit number
00:062D' 2970              :                  and    #$70
00:062F' 4A                :                  lsr    a
00:0630' 4A                :                  lsr    a
00:0631' 4A                :                  lsr    a
00:0632' 4A                :                  lsr    a
00:0633' AA                :                  tax
00:0634' BD????            :                  lda    MASK,x          ; Map to bit mask
00:0637' 31F7              :                  and    (ADDR_S),y
00:0639' 91F7              :                  sta    (ADDR_S),y
00:063B' 4C????            :                  jmp    SaveNone

                             EM_SMB:
00:063E' 8A                :                  txa                    ; Get bit number
00:063F' 2970              :                  and    #$70
00:0641' 4A                :                  lsr    a
00:0642' 4A                :                  lsr    a
00:0643' 4A                :                  lsr    a
00:0644' 4A                :                  lsr    a
00:0645' AA                :                  tax
00:0646' BD????            :                  lda    BITS,x          ; Map to bit mask
00:0649' 11F7              :                  ora    (ADDR_S),y
00:064B' 91F7              :                  sta    (ADDR_S),y
00:064D' 4C????            :                  jmp    SaveNone

                             EM_TRB:
00:0650' 48                :                  pha
00:0651' 31F7              :                  and    (ADDR_S),Y
00:0653' 08                :                  php
00:0654' 68                :                  pla
00:0655' 45F3              :                  eor    P_REG
00:0657' 2902              :                  and    #1<<1
00:0659' 45F3              :                  eor    P_REG
00:065B' 85F3              :                  sta    P_REG
00:065D' 68                :                  pla
00:065E' 49FF              :                  eor    #$ff
00:0660' 31F7              :                  and    (ADDR_S),y
00:0662' 91F7              :                  sta    (ADDR_S),y
00:0664' 4C????            :                  jmp    SaveNone

                             EM_TSB:
00:0667' 48                :                  pha
00:0668' 31F7              :                  and    (ADDR_S),Y

Portable 65xx Assembler [20.01]

00:066A' 08                :                  php
00:066B' 68                :                  pla
00:066C' 45F3              :                  eor    P_REG
00:066E' 2902              :                  and    #1<<1
00:0670' 45F3              :                  eor    P_REG
00:0672' 85F3              :                  sta    P_REG
00:0674' 68                :                  pla
00:0675' 11F7              :                  ora    (ADDR_S),y
00:0677' 91F7              :                  sta    (ADDR_S),y
00:0679' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             SaveAP:
00:067C' 85F0              :                  sta    A_REG           ; Save the updated A
                             SaveP:
00:067E' 08                :                  php                    ; Save the updated flags
00:067F' 68                :                  pla
00:0680' 85F3              :                  sta    P_REG
                             SaveNone:
00:0682' A5FB              :                  lda    TEMP+0          ; Repeat as instructed
00:0684' D002              :                  if eq
00:0686' C6FC              :                   dec   TEMP+1
                                              endif
00:0688' C6FB              :                  dec    TEMP+0

00:068A' A5FB              :                  lda    TEMP+0
00:068C' 05FC              :                  ora    TEMP+1
00:068E' F003              :                  if ne
00:0690' 4C????            :                   jmp   Trace
                                              endif

                             EM_ERR:
00:0693' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'W' - Write Memory
                             ;-------------------------------------------------------------------------------

00:0696' C957              :                 cmp     #'W'
00:0698' D020              :                 if      eq
00:069A' 20????            :                  jsr    GetWord         ; Get the target address
00:069D' B018              :                  if     cc
00:069F' 20????            :                   jsr   SetStartAddr    ; Copy to start address
00:06A2' 20????            :                   jsr   GetByte         ; Get the value
00:06A5' B010              :                   if    cc
00:06A7' A000              :                    ldy  #0              ; Write to memory
00:06A9' A5FB              :                    lda  TEMP+0
00:06AB' 91F7              :                    sta  (ADDR_S),Y
00:06AD' A901              :                    lda  #1              ; Increment address
00:06AF' 20????            :                    jsr  BumpAddr
00:06B2' A957              :                    lda  #'W'            ; Create prompt for next byte
00:06B4' 4C????            :                    jmp  SetPrompt

Portable 65xx Assembler [20.01]

                                               endif
                                              endif
00:06B7' 4C????            :                  jmp    Error           ; Handle syntax errors
                                             endif

                             ;===============================================================================
                             ; '?' - Display Help
                             ;-------------------------------------------------------------------------------

00:06BA' C93F              :                 cmp     #'?'
00:06BC' D004              :                 if      eq
00:06BE' A231              :                  ldx    #HLP_STR
00:06C0' 8002              :                 else
00:06C2' A22D              : Error:           ldx    #ERR_STR
                                             endif
00:06C4' 20????            :                 jsr     ShowString
00:06C7' 4C????            :                 jmp     NewCommand

                             ;===============================================================================
                             ;-------------------------------------------------------------------------------

                             SetStartAddr:
00:06CA' A5FB              :                 lda     TEMP+0
00:06CC' 85F7              :                 sta     ADDR_S+0
00:06CE' A5FC              :                 lda     TEMP+1
00:06D0' 85F8              :                 sta     ADDR_S+1
00:06D2' 60                :                 rts

                             SetEndAddr:
00:06D3' A5FB              :                 lda     TEMP+0
00:06D5' 85F9              :                 sta     ADDR_E+0
00:06D7' A5FC              :                 lda     TEMP+1
00:06D9' 85FA              :                 sta     ADDR_E+1
00:06DB' 60                :                 rts

                             BumpAddr:
00:06DC' 18                :                 clc
00:06DD' 65F7              :                 adc     ADDR_S+0
00:06DF' 85F7              :                 sta     ADDR_S+0
00:06E1' A900              :                 lda     #0
00:06E3' 65F8              :                 adc     ADDR_S+1
00:06E5' 85F8              :                 sta     ADDR_S+1
00:06E7' 60                :                 rts

                             CheckEnd:
00:06E8' A5F8              :                 lda     ADDR_S+1
00:06EA' C5FA              :                 cmp     ADDR_E+1
00:06EC' 9006              :                 if      cs
00:06EE' D004              :                  if     eq
00:06F0' A5F7              :                   lda   ADDR_S+0
00:06F2' C5F9              :                   cmp   ADDR_E+0
                                              endif
                                             endif
00:06F4' 60                :                 rts

Portable 65xx Assembler [20.01]


                             ; Create a prompt string in the command buffer for the command in A using the
                             ; current value of the starting address.

                             SetPrompt:
00:06F5' A200              :                 ldx     #0              ; Clear buffer and add command letter
00:06F7' 20????            :                 jsr     AppendChar
00:06FA' A920              :                 lda     #' '            ; Then a space
00:06FC' 20????            :                 jsr     AppendChar

00:06FF' A5F8              :                 lda     ADDR_S+1        ; Followed by the address
00:0701' 20????            :                 jsr     AppendHex2
00:0704' A5F7              :                 lda     ADDR_S+0
00:0706' 20????            :                 jsr     AppendHex2
00:0709' A920              :                 lda     #' '            ; And another space
00:070B' 20????            :                 jsr     AppendChar
00:070E' 4C????            :                 jmp     RptCommand      ; Then output it

                             ; Convert the byte in A into hexadecimal digits and append to the command buffer.

                             AppendHex2:
00:0711' 48                :                 pha
00:0712' 4A                :                 lsr     a
00:0713' 4A                :                 lsr     a
00:0714' 4A                :                 lsr     a
00:0715' 4A                :                 lsr     a
00:0716' 20????            :                 jsr     AppendHex
00:0719' 68                :                 pla
                             AppendHex:
00:071A' 20????            :                 jsr     ToHex

                             ; Append the character in A to the command buffer to create the next prompt
                             ; string.

                             AppendChar:
00:071D' 9D0002            :                 sta     COMMAND,x
00:0720' E8                :                 inx
00:0721' 86F6              :                 stx     CMD_LEN
00:0723' 60                :                 rts

                             ;===============================================================================
                             ; Parsing Utilities
                             ;-------------------------------------------------------------------------------

                             ; Get the next characater from the command buffer indicated by the X register
                             ; and convert it to UPPER case. If the carry is set then the end of the buffer
                             ; has been reached.

                             NextChar:
00:0724' E4F6              :                 cpx     CMD_LEN         ; Reached end of buffer>
00:0726' 9003              :                 if      cs
00:0728' A900              :                  lda    #0
00:072A' 60                :                  rts                    ; Yes, return with C=1
                                             endif

Portable 65xx Assembler [20.01]

00:072B' BD0002            :                 lda     COMMAND,X       ; No, fetch a character
00:072E' E8                :                 inx

                             ; Convert the character in A to upper case.

                             ToUpper:
00:072F' C961              :                 cmp     #'a'            ; Between 'a'
00:0731' 9006              :                 if      cs
00:0733' C97B              :                  cmp    #'z'+1          ; .. and 'z'?
00:0735' B002              :                  if     cc
00:0737' 295F              :                   and   #$5f            ; Yes, convert
                                              endif
                                             endif
00:0739' 18                :                 clc                     ; Ensure C=0
00:073A' 60                :                 rts

                             ; Fetch the next characters from the command buffer ignoring spaces.

                             SkipSpaces:
                                             repeat
00:073B' 20????            :                  jsr    NextChar        ; Fetch a character?
00:073E' B005              :                  break  cs              ; Reached the end?
00:0740' C920              :                  cmp    #' '            ; A space to ignore?
00:0742' 18                :                  clc
00:0743' F0F6              :                 until   ne
00:0745' 60                :                 rts                     ; Done

                             ; Parse a word from the command buffer and store it in TEMP. Return if the
                             ; carry set if there is a syntax error.

                             GetWord:
00:0746' A004              :                 ldy     #4              ; Set maximim number of nybbles
00:0748' D002              :                 bne     GetByte+2

                             ; Parse a word from the command buffer and store it in TEMP. Return if the
                             ; carry set if there is a syntax error.

                             GetByte:
00:074A' A002              :                 ldy     #2              ; Set maximum number of nybble
00:074C' 84FD              :                 sty     COUNT

                                             .if     __65C02__|__65SC02__
00:074E' 64FB              :                 stz     TEMP+0          ; Clear conversion area
00:0750' 64FC              :                 stz     TEMP+1
                                             .else
                           -                 ldy     #0
                           -                 sty     TEMP+0          ; Clear conversion area
                           -                 sty     TEMP+1
                                             .endif

00:0752' 20????            :                 jsr     SkipSpaces      ; Fetch first character
00:0755' 20????            :                 jsr     GetNybble       ; And try to convert
00:0758' 9001              :                 if      cs
00:075A' 60                :                  rts                    ; Syntax error

Portable 65xx Assembler [20.01]

                                             endif
                                             repeat
00:075B' 06FB              :                  asl    TEMP+0          ; Fold into the result
00:075D' 26FC              :                  rol    TEMP+1
00:075F' 06FB              :                  asl    TEMP+0
00:0761' 26FC              :                  rol    TEMP+1
00:0763' 06FB              :                  asl    TEMP+0
00:0765' 26FC              :                  rol    TEMP+1
00:0767' 06FB              :                  asl    TEMP+0
00:0769' 26FC              :                  rol    TEMP+1
00:076B' 05FB              :                  ora    TEMP+0
00:076D' 85FB              :                  sta    TEMP+0

00:076F' C6FD              :                  dec    COUNT           ; Reach maximum length?
00:0771' F008              :                  break  eq

00:0773' 20????            :                  jsr    NextChar        ; Try for another nybble
00:0776' 20????            :                  jsr    GetNybble
00:0779' 90E0              :                 until   cs
00:077B' 18                :                 clc                     ; Conversion sucessfull
00:077C' 60                :                 rts

                             ; Try to parse a nybble from the command line. If not a valid hex digit then
                             ; return with the carry set.

                             GetNybble:
00:077D' 20????            :                 jsr     IsHex           ; Got a hex digit?
00:0780' 900A              :                 if      cs
00:0782' C941              :                  cmp    #'A'            ; Handle letters
00:0784' 9002              :                  if     cs
00:0786' E907              :                   sbc   #7
                                              endif
00:0788' 290F              :                  and    #$0f            ; Strip out nybble
00:078A' 18                :                  clc                    ; Done
00:078B' 60                :                  rts
                                             endif
00:078C' 38                :                 sec                     ; Set carry -- not hex
00:078D' 60                :                 rts

                             ; Return with the carry set of the character in A is a digit or 'A' thru 'F'.

                             IsHex:
00:078E' C93A              :                 cmp     #'9'+1
00:0790' B003              :                 if      cc
00:0792' C930              :                  cmp    #'0'
00:0794' 60                :                  rts
                                             endif
00:0795' C947              :                 cmp     #'F'+1
00:0797' B003              :                 if      cc
00:0799' C941              :                  cmp    #'A'
00:079B' 60                :                  rts
                                             endif
00:079C' 18                :                 clc
00:079D' 60                :                 rts

Portable 65xx Assembler [20.01]


                             ; Return with the carry set of the character in A is not printable.

                             IsPrintable:
00:079E' C920              :                 cmp     #' '
00:07A0' 9006              :                 if      cs
00:07A2' C97F              :                  cmp    #DEL
00:07A4' B002              :                  if     CC
00:07A6' 38                :                   sec
00:07A7' 60                :                   rts
                                              endif
                                             endif
00:07A8' 18                :                 clc
00:07A9' 60                :                 rts

                             ;===============================================================================
                             ; Register Dump
                             ;-------------------------------------------------------------------------------

                             ; Dump all the save registers and the SP which is passed in X

                             DumpRegisters:
00:07AA' 8A                :                 txa                     ; Save SP
00:07AB' 48                :                 pha

00:07AC' A221              :                 ldx     #A_STR          ; Display A
00:07AE' 20????            :                 jsr     ShowString
00:07B1' A5F0              :                 lda     A_REG
00:07B3' 20????            :                 jsr     ShowHex2

00:07B6' A225              :                 ldx     #X_STR          ; Display X
00:07B8' 20????            :                 jsr     ShowString
00:07BB' A5F1              :                 lda     X_REG
00:07BD' 20????            :                 jsr     ShowHex2

00:07C0' A229              :                 ldx     #Y_STR          ; Display Y
00:07C2' 20????            :                 jsr     ShowString
00:07C5' A5F2              :                 lda     Y_REG
00:07C7' 20????            :                 jsr     ShowHex2

00:07CA' A21D              :                 ldx     #P_STR          ; Display P
00:07CC' 20????            :                 jsr     ShowString
00:07CF' A207              :                 ldx     #7
                                             repeat
00:07D1' A02E              :                  ldy    #'.'
00:07D3' BD????            :                  lda    BITS,x
00:07D6' 24F3              :                  bit    P_REG
00:07D8' F003              :                  if     ne
00:07DA' BC????            :                   ldy   FLAG,x
                                              endif
00:07DD' 98                :                  tya
00:07DE' 20????            :                  jsr    UartTx
00:07E1' CA                :                  dex
00:07E2' 10ED              :                 until mi

Portable 65xx Assembler [20.01]


00:07E4' A218              :                 ldx     #SP_STR         ; Display SP
00:07E6' 20????            :                 jsr     ShowString
00:07E9' 68                :                 pla
00:07EA' 4C????            :                 jmp     ShowHex2

                             ;===============================================================================
                             ; Disassembly
                             ;-------------------------------------------------------------------------------

                             Disassemble:
00:07ED' A5FB              :                 lda     TEMP+0          ; Save temporary area
00:07EF' 48                :                 pha
00:07F0' A5FC              :                 lda     TEMP+1
00:07F2' 48                :                 pha

00:07F3' 20????            :                 jsr     Space
00:07F6' A000              :                 ldy     #0              ; Fetch the opcode
00:07F8' B1F7              :                 lda     (ADDR_S),y
00:07FA' AA                :                 tax
00:07FB' 20????            :                 jsr     ShowHex2        ; .. and display it

00:07FE' 20????            :                 jsr     Space
00:0801' BD????            :                 lda     MODES,x         ; Fetch the mode
00:0804' 48                :                 pha                     ; And save some copies
00:0805' 48                :                 pha
00:0806' 2943              :                 and     #MB_REL|MB_ABS  ; Show second byte if relative,
00:0808' F008              :                 if      ne              ; .. zero page, immediate or absolute
00:080A' C8                :                  iny
00:080B' B1F7              :                  lda    (ADDR_S),y
00:080D' 20????            :                  jsr    ShowHex2
00:0810' 8003              :                 else
00:0812' 20????            :                  jsr    Space2
                                             endif

00:0815' 20????            :                 jsr     Space
00:0818' 68                :                 pla                     ; Show third byte
                                             .if     __65C02__
00:0819' C961              :                 cmp     #MO_BRL         ; .. if bit relative
00:081B' F006              :                 beq     .Skip
                                             .endif
00:081D' 2903              :                 and     #MB_ABS         ; .. or absolute
00:081F' C903              :                 cmp     #MB_ABS
00:0821' D008              :                 if      eq
00:0823' C8                : .Skip:           iny
00:0824' B1F7              :                  lda    (ADDR_S),y
00:0826' 20????            :                  jsr    ShowHex2
00:0829' 8003              :                 else
00:082B' 20????            :                  jsr    Space2
                                             endif

00:082E' C8                :                 iny                     ; Save the byte count
00:082F' 84FD              :                 sty     COUNT


Portable 65xx Assembler [20.01]

00:0831' 20????            :                 jsr     Space
00:0834' A000              :                 ldy     #0              ; Fetch the opcode
00:0836' B1F7              :                 lda     (ADDR_S),y
00:0838' AA                :                 tax
00:0839' BD????            :                 lda     OPCODES,x
00:083C' AA                :                 tax
00:083D' BD????            :                 lda     MNEMONICS+1,x
00:0840' 85FB              :                 sta     TEMP
00:0842' BD????            :                 lda     MNEMONICS+0,x
00:0845' 20????            :                 jsr     ExtractLetter
00:0848' 20????            :                 jsr     ExtractLetter
00:084B' 20????            :                 jsr     ExtractLetter
00:084E' 20????            :                 jsr     Space
00:0851' A204              :                 ldx     #4

                                             .if     __65C02__
00:0853' 68                :                 pla
00:0854' 48                :                 pha
00:0855' 2920              :                 and     #MB_BIT
00:0857' F016              :                 if      ne
00:0859' A000              :                  ldy    #0
00:085B' B1F7              :                  lda    (ADDR_S),y
00:085D' 2970              :                  and    #$70
00:085F' 4A                :                  lsr    a
00:0860' 4A                :                  lsr    a
00:0861' 4A                :                  lsr    a
00:0862' 4A                :                  lsr    a
00:0863' 0930              :                  ora    #'0'
00:0865' 20????            :                  jsr    UartTx
00:0868' A92C              :                  lda    #','
00:086A' 20????            :                  jsr    UartTx
00:086D' E8                :                  inx
00:086E' E8                :                  inx
                                             endif
                                             .endif

00:086F' 68                :                 pla                     ; Indirect mode?
00:0870' 48                :                 pha
00:0871' 1006              :                 if      mi
00:0873' A928              :                  lda    #'('
00:0875' 20????            :                  jsr    UartTx
00:0878' E8                :                  inx
                                             endif

00:0879' 68                :                 pla                     ; Has an address?
00:087A' 48                :                 pha
00:087B' 2903              :                 and     #MB_ABS
00:087D' F028              :                 if      ne
00:087F' 48                :                  pha
00:0880' C902              :                  cmp    #MB_IMM         ; Immediate?
00:0882' D006              :                  if     eq
00:0884' A923              :                   lda   #'#'
00:0886' 20????            :                   jsr   UartTx
00:0889' E8                :                   inx

Portable 65xx Assembler [20.01]

                                              endif
00:088A' A924              :                  lda    #'$'
00:088C' 20????            :                  jsr    UartTx
00:088F' E8                :                  inx
00:0890' 68                :                  pla
00:0891' C903              :                  cmp    #MB_ABS         ; Absolute?
00:0893' D009              :                  if     eq
00:0895' A002              :                   ldy   #2
00:0897' B1F7              :                   lda   (ADDR_S),y      ; Show hi byte
00:0899' 20????            :                   jsr   ShowHex2
00:089C' E8                :                   inx
00:089D' E8                :                   inx
                                              endif
00:089E' A001              :                  ldy    #1
00:08A0' B1F7              :                  lda    (ADDR_S),y      ; Then lo byte
00:08A2' 20????            :                  jsr    ShowHex2
00:08A5' E8                :                  inx
00:08A6' E8                :                  inx
                                             endif

                                             .if     __65C02__
00:08A7' 68                :                 pla
00:08A8' 48                :                 pha
00:08A9' 2960              :                 and     #MB_BIT|MB_REL
00:08AB' C960              :                 cmp     #MB_BIT|MB_REL
00:08AD' D006              :                 if      eq
00:08AF' A92C              :                  lda    #','
00:08B1' 20????            :                  jsr    UartTx
00:08B4' E8                :                  inx
                                             endif
                                             .endif

00:08B5' 68                :                 pla
00:08B6' 48                :                 pha
00:08B7' A8                :                 tay
00:08B8' 2940              :                 and     #MB_REL
00:08BA' F035              :                 if      ne
00:08BC' A924              :                  lda    #'$'
00:08BE' 20????            :                  jsr    UartTx
00:08C1' E8                :                  inx
00:08C2' 98                :                  tya
00:08C3' A001              :                  ldy    #1
00:08C5' 2920              :                  and    #MB_BIT
00:08C7' F001              :                  if     ne
00:08C9' C8                :                   iny
                                              endif

00:08CA' 38                :                  sec                    ; Word out address of next
00:08CB' 98                :                  tya                    ; .. instruction
00:08CC' 65F7              :                  adc    ADDR_S+0
00:08CE' 85FB              :                  sta    TEMP+0
00:08D0' A900              :                  lda    #0
00:08D2' 65F8              :                  adc    ADDR_S+1
00:08D4' 85FC              :                  sta    TEMP+1

Portable 65xx Assembler [20.01]


00:08D6' 18                :                  clc                    ; Fetch offset
00:08D7' B1F7              :                  lda    (ADDR_S),y      ; Work out lo byte
00:08D9' 65FB              :                  adc    TEMP+0
00:08DB' 48                :                  pha                    ; And save
00:08DC' B1F7              :                  lda    (ADDR_S),y
00:08DE' 2980              :                  and    #$80
00:08E0' 1002              :                  if     mi
00:08E2' A9FF              :                   lda   #$ff
                                              endif
00:08E4' 65FC              :                  adc    TEMP+1          ; Work out hi byte
00:08E6' 20????            :                  jsr    ShowHex2        ; And show result
00:08E9' E8                :                  inx
00:08EA' E8                :                  inx
00:08EB' 68                :                  pla
00:08EC' 20????            :                  jsr    ShowHex2
00:08EF' E8                :                  inx
00:08F0' E8                :                  inx
                                             endif

00:08F1' 68                :                 pla
00:08F2' 48                :                 pha
00:08F3' 2910              :                 and     #MB_ACC
00:08F5' F006              :                 if      ne
00:08F7' A941              :                  lda    #'A'
00:08F9' 20????            :                  jsr    UartTx
00:08FC' E8                :                  inx
                                             endif

00:08FD' 68                :                 pla
00:08FE' 48                :                 pha
00:08FF' 2908              :                 and     #MB_XRG
00:0901' F00C              :                 if      ne
00:0903' A92C              :                  lda    #','
00:0905' 20????            :                  jsr    UartTx
00:0908' A958              :                  lda    #'X'
00:090A' 20????            :                  jsr    UartTx
00:090D' E8                :                  inx
00:090E' E8                :                  inx
                                             endif

00:090F' 68                :                 pla
00:0910' 48                :                 pha
00:0911' 1006              :                 if      mi
00:0913' A929              :                  lda    #')'
00:0915' 20????            :                  jsr    UartTx
00:0918' E8                :                  inx
                                             endif

00:0919' 68                :                 pla
00:091A' 2904              :                 and     #MB_YRG
00:091C' F00C              :                 if      ne
00:091E' A92C              :                  lda    #','
00:0920' 20????            :                  jsr    UartTx

Portable 65xx Assembler [20.01]

00:0923' A959              :                  lda    #'Y'
00:0925' 20????            :                  jsr    UartTx
00:0928' E8                :                  inx
00:0929' E8                :                  inx
                                             endif

00:092A' 68                :                 pla                     ; Restore temporary area
00:092B' 85FC              :                 sta     TEMP+1
00:092D' 68                :                 pla
00:092E' 85FB              :                 sta     TEMP+0

00:0930' A5FD              :                 lda     COUNT           ; Return the number of bytes
00:0932' 60                :                 rts

                             ExtractLetter:
00:0933' 48                :                 pha
00:0934' 291F              :                 and     #$1f
00:0936' 0940              :                 ora     #'@'
00:0938' C95F              :                 cmp     #$5f
00:093A' D002              :                 if      eq
00:093C' A93F              :                  lda    #'?'
                                             endif
00:093E' 20????            :                 jsr     UartTx
00:0941' 68                :                 pla
00:0942' 46FB              :                 lsr     TEMP
00:0944' 6A                :                 ror     a
00:0945' 46FB              :                 lsr     TEMP
00:0947' 6A                :                 ror     a
00:0948' 46FB              :                 lsr     TEMP
00:094A' 6A                :                 ror     a
00:094B' 46FB              :                 lsr     TEMP
00:094D' 6A                :                 ror     a
00:094E' 46FB              :                 lsr     TEMP
00:0950' 6A                :                 ror     a
00:0951' 60                :                 rts

                             ;===============================================================================
                             ; Display Utilities
                             ;-------------------------------------------------------------------------------

                             ; Display the byte in A as two hexadecimal digits. The values in A & Y are
                             ; destroyed.

                             ShowHex2:
00:0952' 48                :                 pha                     ; Save a copy of the value
00:0953' 4A                :                 lsr     a               ; Shift down the hi nybble
00:0954' 4A                :                 lsr     a
00:0955' 4A                :                 lsr     a
00:0956' 4A                :                 lsr     a
00:0957' 20????            :                 jsr     ShowHex         ; Convert and display
00:095A' 68                :                 pla                     ; Pull back value and ...

                             ; Display the lo nybble of A as a hexadecimal digit. The values in A & Y are
                             ; destroyed.

Portable 65xx Assembler [20.01]


                             ShowHex:
00:095B' 20????            :                 jsr     ToHex           ; Convert to printable character
00:095E' 4C????            :                 jmp     UartTx          ; And display.

                             ; Convert the lo nybble of A to a hexadecimal digit.

00:0961' 290F              : ToHex           and     #$0f            ; Isolate the lo nybble
00:0963' F8                :                 sed                     ; Convert to ASCII using BCD
00:0964' 18                :                 clc
00:0965' 6990              :                 adc     #$90
00:0967' 6940              :                 adc     #$40
00:0969' D8                :                 cld
00:096A' 60                :                 rts                     ; Done

                             ;-------------------------------------------------------------------------------

                             ; Output two spaces.

                             Space2:
00:096B' 20????            :                 jsr     Space           ; Print one space then drop into ..

                             ; Output a single space. The values in A & Y are destroyed.

                             Space:
00:096E' A920              :                 lda     #' '
00:0970' 4C????            :                 jmp     UartTx

                             ; Output a vertical bar character.

                             Bar:
00:0973' A97C              :                 lda     #'|'
00:0975' 4C????            :                 jmp     UartTx

                             ; Output a new line

                             NewLine:
00:0978' A90D              :                 lda     #CR
00:097A' 20????            :                 jsr     UartTx
00:097D' A90A              :                 lda     #LF
00:097F' 4C????            :                 jmp     UartTx

                             ;===============================================================================
                             ; Strings
                             ;-------------------------------------------------------------------------------

                             ; Output the string in the string table starting at the offset in X until a
                             ; null byte is reached.

                             ShowString:
                                             repeat
00:0982' BD????            :                  lda    STRINGS,x       ; Fetch the next character
00:0985' F006              :                  break  eq              ; Reached the end?
00:0987' 20????            :                  jsr    UartTx          ; No, display it

Portable 65xx Assembler [20.01]

00:098A' E8                :                  inx                    ; Bump the index
00:098B' 80F5              :                 forever
00:098D' 60                :                 rts                     ; Done.

                             STRINGS:
         00000000          = TTL_STR         .equ    .-STRINGS
00:098E' 0D0A573635433032> :                 .byte   CR,LF,"W65C02SXB"
00:0999' 205B32302E31305D> :                 .byte   " [20.10]",0
         00000014          = PC_STR          .equ    .-STRINGS
00:09A2' 50433D00          :                 .byte   "PC=",0
         00000018          = SP_STR          .equ    .-STRINGS
00:09A6' 2053503D00        :                 .byte   " SP=",0
         0000001D          = P_STR           .equ    .-STRINGS
00:09AB' 20503D00          :                 .byte   " P=",0
         00000021          = A_STR           .equ    .-STRINGS
00:09AF' 20413D00          :                 .byte   " A=",0
         00000025          = X_STR           .equ    .-STRINGS
00:09B3' 20583D00          :                 .byte   " X=",0
         00000029          = Y_STR           .equ    .-STRINGS
00:09B7' 20593D00          :                 .byte   " Y=",0
         0000002D          = ERR_STR         .equ    .-STRINGS
00:09BB' 0D0A3F00          :                 .byte   CR,LF,"?",0
         00000031          = HLP_STR         .equ    .-STRINGS
00:09BF' 0D0A442078787878> :                 .byte   CR,LF,"D xxxx yyyy\t\tDisassemble"
00:09D9' 0D0A462078787878> :                 .byte   CR,LF,"F xxxx yyyy bb\t\tFill Memory"
00:09F6' 0D0A47205B787878> :                 .byte   CR,LF,"G [xxxx]\t\tGoto"
00:0A06' 0D0A4D2078787878> :                 .byte   CR,LF,"M xxxx yyyy\t\tDisplay Memory"
00:0A23' 0D0A520909094469> :                 .byte   CR,LF,"R\t\t\tDisplay Registers"
00:0A3A' 0D0A532E2E2E0909> :                 .byte   CR,LF,"S...\t\t\tS19 Load"
00:0A4B' 0D0A54205B787878> :                 .byte   CR,LF,"T [xxxx][,cccc]\t\tTrace"
00:0A63' 0D0A572078787878> :                 .byte   CR,LF,"W xxxx yy\t\tWrite Memory"
00:0A7C' 00                :                 .byte   0

00:0A7D' 435A49443131564E  : FLAG            .byte   "CZID11VN"
00:0A85' 0102040810204080  : BITS            .byte   $01,$02,$04,$08,$10,$20,$40,$80
00:0A8D' FEFDFBF7EFDFBF7F  : MASK            .byte   $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f

                             ;===============================================================================
                             ; Instruction Lookup Tables
                             ;-------------------------------------------------------------------------------

00:0A95' 0000000000000000> :                 .align  256

                                             .if     __6502__
                           - OPCODES:
                           -                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 0
                           -                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                           -                 .byte   OP_BPL,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 1
                           -                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                           -                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 2
                           -                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                           -                 .byte   OP_BMI,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 3
                           -                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                           -                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 4

Portable 65xx Assembler [20.01]

                           -                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_ERR
                           -                 .byte   OP_BVC,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 5
                           -                 .byte   OP_CLI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR
                           -                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 6
                           -                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_ERR
                           -                 .byte   OP_BVS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 7
                           -                 .byte   OP_SEI,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR
                           -                 .byte   OP_ERR,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 8
                           -                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR
                           -                 .byte   OP_BCC,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 9
                           -                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_ERR,OP_STA,OP_ERR,OP_ERR
                           -                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; A
                           -                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                           -                 .byte   OP_BCS,OP_LDA,OP_ERR,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; B
                           -                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                           -                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR ; C
                           -                 .byte   OP_INY,OP_CMP,OP_DEX,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR
                           -                 .byte   OP_BNE,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR ; D
                           -                 .byte   OP_CLD,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR
                           -                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR ; E
                           -                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR
                           -                 .byte   OP_BEQ,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR ; F
                           -                 .byte   OP_SED,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR

                           - MODES:
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 0
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 1
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 6
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 7
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_IMP,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E

Portable 65xx Assembler [20.01]

                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                             .endif

                             ;-------------------------------------------------------------------------------

                                             .if     __65C02__
                             OPCODES:
00:0B00' 1C4C0000824C065E  :                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_RMB ; 0
00:0B08' 504C0600824C0608  :                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_BBR
00:0B10' 184C4C00804C065E  :                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_RMB ; 1
00:0B18' 224C3800804C0608  :                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_BBR
00:0B20' 400400001204605E  :                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 2
00:0B28' 5804600012046008  :                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00:0B30' 140404001204605E  :                 .byte   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 3
00:0B38' 6A04300012046008  :                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00:0B40' 643600000036485E  :                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 4
00:0B48' 4E3648003E364808  :                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_BBR
00:0B50' 1E3636000036485E  :                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 5
00:0B58' 2636540000364808  :                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_BBR
00:0B60' 660200007A02625E  :                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 6
00:0B68' 560262003E026208  :                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00:0B70' 200202007A02625E  :                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 7
00:0B78' 6E025C003E026208  :                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00:0B80' 1A72000078727670  :                 .byte   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 8
00:0B88' 341286007872760A  :                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_BBS
00:0B90' 0C72720078727670  :                 .byte   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 9
00:0B98' 8A7288007A727A0A  :                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_BBS
00:0BA0' 4642440046424470  :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; A
00:0BA8' 7E427C004642440A  :                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00:0BB0' 0E42420046424470  :                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; B
00:0BB8' 284284004642440A  :                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00:0BC0' 2E2A00002E2A3070  :                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_SMB ; C
00:0BC8' 3C2A328C2E2A300A  :                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_BBS
00:0BD0' 162A2A00002A3070  :                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_SMB ; D
00:0BD8' 242A5274002A300A  :                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_BBS
00:0BE0' 2C6800002C683870  :                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_SMB ; E
00:0BE8' 3A684A002C68380A  :                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_BBS
00:0BF0' 1068680000683870  :                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_SMB ; F
00:0BF8' 6C685A000068380A  :                 .byte   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_BBS

                             MODES:
00:0C00' 0289020001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 0
00:0C08' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C10' 4085810001090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_ZPG ; 1
00:0C18' 00071000030B0B61  :                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00:0C20' 0389000001010101  :                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 2
00:0C28' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C30' 4085810009090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 3
00:0C38' 000710000B0B0B61  :                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_BRL
00:0C40' 0089000000010101  :                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG ; 4
00:0C48' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C50' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; 5

Portable 65xx Assembler [20.01]

00:0C58' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00:0C60' 0089000001010101  :                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 6
00:0C68' 0002100083030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_BRL
00:0C70' 4085810009090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 7
00:0C78' 000700008B0B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_BRL
00:0C80' 4089000001010101  :                 .byte   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 8
00:0C88' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C90' 4085810009090501  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; 9
00:0C98' 00070000030B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00:0CA0' 0289020001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; A
00:0CA8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CB0' 4085810009090501  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; B
00:0CB8' 000700000B0B0761  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_BRL
00:0CC0' 0289000001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; C
00:0CC8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CD0' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; D
00:0CD8' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00:0CE0' 0289000001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; E
00:0CE8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CF0' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; F
00:0CF8' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                                             .endif

                             ;-------------------------------------------------------------------------------

                                             .if     __65SC02__
                           - OPCODES:
                           -                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_NOP ; 0
                           -                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_NOP
                           -                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_NOP ; 1
                           -                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_NOP
                           -                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP ; 2
                           -                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP
                           -                 .byte   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP ; 3
                           -                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP
                           -                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP ; 4
                           -                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_NOP
                           -                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP ; 5
                           -                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP
                           -                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_NOP ; 6
                           -                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_NOP
                           -                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_NOP ; 7
                           -                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_NOP
                           -                 .byte   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP ; 8
                           -                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP
                           -                 .byte   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP ; 9
                           -                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_NOP
                           -                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP ; A
                           -                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP
                           -                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP ; B
                           -                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP
                           -                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_NOP ; C
                           -                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_NOP
                           -                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_NOP ; D

Portable 65xx Assembler [20.01]

                           -                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_NOP
                           -                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_NOP ; E
                           -                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_NOP
                           -                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_NOP ; F
                           -                 .byte   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_NOP

                           - MODES:
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 0
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_IMP ; 1
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 6
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 7
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                             .endif

                             ;===============================================================================
                             ; IRQ Handler
                             ;-------------------------------------------------------------------------------

                             ; Handle interrupts.

                             IRQ:
00:0D00' 48                :                 pha                     ; Save users registers
00:0D01' DA                :                 phx

00:0D02' BA                :                 tsx                     ; Check for BRK
00:0D03' BD0301            :                 lda     STACK+3,X
00:0D06' 2910              :                 and     #$10

Portable 65xx Assembler [20.01]

00:0D08' F004              :                 if      ne
00:0D0A' 5A                :                  phy
00:0D0B' 4C????            :                  jmp    BRK             ; Enter monitor with registers on stack
                                             endif

00:0D0E' FA                :                 plx
00:0D0F' 68                :                 pla
00:0D10' 40                : NMI:            rti                     ; Done

                             ;===============================================================================
                             ; UART I/O
                             ;-------------------------------------------------------------------------------

                             ; Inserts the byte in A into the transmit buffer. If the buffer is full then
                             ; wait until some space is available. Registers are preserved.

                             UartTx:
00:0D11' 48                :                 pha
00:0D12' DA                :                 phx
00:0D13' AA                :                 tax

00:0D14' A901              :                 lda     #$01
00:0D16' 2CE07F            : TxWait:         bit     VIA2_IRB        ; Is there space for more data
00:0D19' D0FB              :                 bne     TxWait

00:0D1B' A9FF              :                 lda     #$ff            ; Make port an output
00:0D1D' 8DE37F            :                 sta     VIA2_DDRA
00:0D20' 8EE17F            :                 stx     VIA2_ORA        ; And output the character
00:0D23' A904              :                 lda     #$04            ; Strobe WR high
00:0D25' 0CE07F            :                 tsb     VIA2_ORB
00:0D28' EA                :                 nop
00:0D29' EA                :                 nop
00:0D2A' 1CE07F            :                 trb     VIA2_ORB
00:0D2D' FA                :                 plx
00:0D2E' 68                :                 pla
00:0D2F' 60                :                 rts                     ; Done

                             ; Extracts the next character from the head of the RX buffer. If the buffer is
                             ; empty then wait for some data to be placed in it by the interrupt handler.

                             UartRx:
00:0D30' DA                :                 phx                     ; Save callers X

00:0D31' A902              :                 lda     #$02            ; Wait until data in buffer
00:0D33' 2CE07F            : RxWait:         bit     VIA2_IRB
00:0D36' D0FB              :                 bne     RxWait

00:0D38' 9CE37F            :                 stz     VIA2_DDRA       ; Make port all input
00:0D3B' ADE07F            :                 lda     VIA2_IRB
00:0D3E' A908              :                 lda     #$08            ; Strobe /RD low
00:0D40' 1CE07F            :                 trb     VIA2_ORB
00:0D43' EA                :                 nop                     ; Wait for data to be available
00:0D44' EA                :                 nop
00:0D45' EA                :                 nop

Portable 65xx Assembler [20.01]

00:0D46' EA                :                 nop
00:0D47' AEE17F            :                 ldx     VIA2_IRA        ; Read it
00:0D4A' 0CE07F            :                 tsb     VIA2_ORB        ; And end the strobe
00:0D4D' 8A                :                 txa
00:0D4E' FA                :                 plx                     ; .. and callers X
00:0D4F' 60                :                 rts                     ; Done

                             ;===============================================================================
                             ; Vector Locations
                             ;-------------------------------------------------------------------------------

00:0D50' 6C707E            : DO_IRQ          jmp     (IRQV)
00:0D53' 6C727E            : DO_NMI          jmp     (NMIV)

                             ; Shadow Vector Area

                                             .org    $7efa

00:7EFA  ????              :                 .word   DO_NMI          ; NMI
00:7EFC  ????              :                 .word   RESET           ; RESET
00:7EFE  ????              :                 .word   DO_IRQ          ; IRQ/BRK

                                             .END


Portable 65xx Assembler [20.01]

Symbol Table

ACIA                             00007F80  | ACIA_DATA                        00000000
ACIA_CMD                         00000002  | MB_IMP                           00000000
ACIA_CMD_DTR                     00000001  | MO_IMP                           00000000
ACIA_CMD_IRD                     00000002  | OP_ERR                           00000000
ACIA_CMD_PMC0                    00000040  | TTL_STR                          00000000
ACIA_CMD_PMC1                    00000080  | VIA_IRB                          00000000
ACIA_CMD_PME                     00000020  | VIA_ORB                          00000000
ACIA_CMD_REM                     00000010  | __6501__                         00000000
ACIA_CMD_TIC0                    00000004  | __6502__                         00000000
ACIA_CMD_TIC1                    00000008  | __65816__                        00000000
ACIA_CR                          00000003  | __65832__                        00000000
ACIA_CR_RCS                      00000010  | __65SC02__                       00000000
ACIA_CR_SBN                      00000080  | ACIA_CMD_DTR                     00000001
ACIA_CR_SBR0                     00000001  | ACIA_CR_SBR0                     00000001
ACIA_CR_SBR1                     00000002  | ACIA_SR                          00000001
ACIA_CR_SBR2                     00000004  | ACIA_SR_PE                       00000001
ACIA_CR_SBR3                     00000008  | C                                00000001
ACIA_CR_WL0                      00000020  | MB_ZPG                           00000001
ACIA_CR_WL1                      00000040  | MO_ZPG                           00000001
ACIA_DATA                        00000000  | SOH                              00000001
ACIA_SR                          00000001  | VIA_ACR_PB                       00000001
ACIA_SR_DCDB                     00000020  | VIA_IER_CA2                      00000001
ACIA_SR_DSRB                     00000040  | VIA_IFR_CA2                      00000001
ACIA_SR_FE                       00000002  | VIA_IRA                          00000001
ACIA_SR_IRQ                      00000080  | VIA_ORA                          00000001
ACIA_SR_OVRN                     00000004  | VIA_PCR_CA1C                     00000001
ACIA_SR_PE                       00000001  | __65C02__                        00000001
ACIA_SR_RDRF                     00000008  | ACIA_CMD                         00000002
ACIA_SR_TDRE                     00000010  | ACIA_CMD_IRD                     00000002
ACK                              00000006  | ACIA_CR_SBR1                     00000002
ADDR_E                           000000F9  | ACIA_SR_FE                       00000002
ADDR_S                           000000F7  | MB_IMM                           00000002
A_REG                            000000F0  | MO_IMM                           00000002
A_STR                            00000021  | OP_ADC                           00000002
AppendChar                       0000071D' | VIA_ACR_PA                       00000002
AppendHex                        0000071A' | VIA_DDRB                         00000002
AppendHex2                       00000711' | VIA_IER_CA1                      00000002
B                                00000010  | VIA_IFR_CA1                      00000002
BEL                              00000007  | VIA_PCR_CA2C0                    00000002
BITS                             00000A85' | Z                                00000002
BRK                              000000B4' | ACIA_CR                          00000003
BS                               00000008  | MB_ABS                           00000003
Bar                              00000973' | MNEMONICS                        00000003'
BumpAddr                         000006DC' | MO_ABS                           00000003
C                                00000001  | VIA_DDRA                         00000003
CAN                              00000018  | ACIA_CMD_TIC0                    00000004
CMD_LEN                          000000F6  | ACIA_CR_SBR2                     00000004
CMD_SIZE                         00000080  | ACIA_SR_OVRN                     00000004
COMMAND                          00000200  | EOT                              00000004
COUNT                            000000FD  | I                                00000004
CR                               0000000D  | MB_YRG                           00000004
CheckEnd                         000006E8' | OP_AND                           00000004

Portable 65xx Assembler [20.01]

D                                00000008  | VIA_ACR_SRC0                     00000004
DC1                              00000011  | VIA_IER_SR                       00000004
DC3                              00000013  | VIA_IFR_SR                       00000004
DEL                              0000007F  | VIA_PCR_CA2C1                    00000004
DO_IRQ                           00000D50' | VIA_T1CL                         00000004
DO_NMI                           00000D53' | MO_ZPY                           00000005
Disassemble                      000007ED' | VIA_T1CH                         00000005
Disassemble.Skip                 00000823' | ACK                              00000006
DumpRegisters                    000007AA' | OP_ASL                           00000006
EMULATE                          000003D1' | VIA_T1LL                         00000006
EM_ADC                           0000047B' | BEL                              00000007
EM_AND                           0000048F' | MO_ABY                           00000007
EM_ASL                           000004BD' | VIA_T1LH                         00000007
EM_BBR                           00000608' | ACIA_CMD_TIC1                    00000008
EM_BBS                           0000061A' | ACIA_CR_SBR3                     00000008
EM_BCC                           00000505' | ACIA_SR_RDRF                     00000008
EM_BCS                           0000050A' | BS                               00000008
EM_BEQ                           0000050F' | D                                00000008
EM_BIT                           0000049E' | MB_XRG                           00000008
EM_BMI                           00000514' | OP_BBR                           00000008
EM_BNE                           00000519' | VIA_ACR_SRC1                     00000008
EM_BPL                           0000051E' | VIA_IER_CB2                      00000008
EM_BRA                           00000523' | VIA_IFR_CB2                      00000008
EM_BRK                           000005A9' | VIA_PCR_CA2C2                    00000008
EM_BVC                           0000052E' | VIA_T2CL                         00000008
EM_BVS                           00000533' | MO_ZPX                           00000009
EM_CLC                           0000045F' | VIA_T2CH                         00000009
EM_CLD                           00000463' | LF                               0000000A
EM_CLI                           00000467' | OP_BBS                           0000000A
EM_CLV                           0000046B' | VIA_SR                           0000000A
EM_CMP                           0000048A' | MO_ABX                           0000000B
EM_CPX                           00000485' | VIA_ACR                          0000000B
EM_CPY                           00000488' | OP_BCC                           0000000C
EM_DEC                           000004DD' | VIA_PCR                          0000000C
EM_DEX                           000004E7' | CR                               0000000D
EM_DEY                           000004EC' | VIA_IFR                          0000000D
EM_EOR                           00000494' | OP_BCS                           0000000E
EM_ERR                           00000693' | VIA_IER                          0000000E
EM_INC                           000004F1' | VIA_IRAN                         0000000F
EM_INX                           000004FB' | VIA_ORAN                         0000000F
EM_INY                           00000500' | ACIA_CMD_REM                     00000010
EM_JMP                           00000546' | ACIA_CR_RCS                      00000010
EM_JSR                           00000538' | ACIA_SR_TDRE                     00000010
EM_LDA                           00000551' | B                                00000010
EM_LDX                           00000556' | MB_ACC                           00000010
EM_LDY                           0000055D' | MO_ACC                           00000010
EM_LSR                           000004C5' | OP_BEQ                           00000010
EM_NOP                           000005A6' | VIA_ACR_SRC2                     00000010
EM_ORA                           00000499' | VIA_IER_CB1                      00000010
EM_PHA                           00000578' | VIA_IFR_CB1                      00000010
EM_PHP                           0000057C' | VIA_PCR_CB1C                     00000010
EM_PHX                           00000582' | DC1                              00000011
EM_PHY                           00000588' | OP_BIT                           00000012
EM_PLA                           0000058E' | DC3                              00000013

Portable 65xx Assembler [20.01]

EM_PLP                           00000592' | OP_BMI                           00000014
EM_PLX                           0000059A' | PC_STR                           00000014
EM_PLY                           000005A0' | NAK                              00000015
EM_RMB                           0000062C' | OP_BNE                           00000016
EM_ROL                           000004CD' | CAN                              00000018
EM_ROR                           000004D5' | OP_BPL                           00000018
EM_RTI                           000005C1' | SP_STR                           00000018
EM_RTS                           000005CF' | OP_BRA                           0000001A
EM_SBC                           00000480' | ESC                              0000001B
EM_SEC                           0000046F' | OP_BRK                           0000001C
EM_SED                           00000473' | P_STR                            0000001D
EM_SEI                           00000477' | OP_BVC                           0000001E
EM_SMB                           0000063E' | ACIA_CMD_PME                     00000020
EM_STA                           00000564' | ACIA_CR_WL0                      00000020
EM_STP                           000005DE' | ACIA_SR_DCDB                     00000020
EM_STX                           00000569' | MB_BIT                           00000020
EM_STY                           0000056E' | OP_BVS                           00000020
EM_STZ                           00000573' | VIA_ACR_T2C                      00000020
EM_TAX                           000005E4' | VIA_IER_T2                       00000020
EM_TAY                           000005EB' | VIA_IFR_T2                       00000020
EM_TRB                           00000650' | VIA_PCR_CB2C0                    00000020
EM_TSB                           00000667' | A_STR                            00000021
EM_TSX                           000005F2' | MO_BIT                           00000021
EM_TXA                           000005F8' | OP_CLC                           00000022
EM_TXS                           000005FD' | OP_CLD                           00000024
EM_TYA                           00000603' | X_STR                            00000025
EM_WAI                           000005E1' | OP_CLI                           00000026
EOT                              00000004  | OP_CLV                           00000028
ERR_STR                          0000002D  | Y_STR                            00000029
ESC                              0000001B  | OP_CMP                           0000002A
Error                            000006C2' | OP_CPX                           0000002C
ExtractLetter                    00000933' | ERR_STR                          0000002D
FLAG                             00000A7D' | OP_CPY                           0000002E
FOSC                             007A1200  | OP_DEC                           00000030
GetByte                          0000074A' | HLP_STR                          00000031
GetNybble                        0000077D' | OP_DEX                           00000032
GetWord                          00000746' | OP_DEY                           00000034
HLP_STR                          00000031  | OP_EOR                           00000036
I                                00000004  | OP_INC                           00000038
IRQ                              00000D00' | OP_INX                           0000003A
IRQV                             00007E70  | OP_INY                           0000003C
IsHex                            0000078E' | OP_JMP                           0000003E
IsPrintable                      0000079E' | ACIA_CMD_PMC0                    00000040
LF                               0000000A  | ACIA_CR_WL1                      00000040
MASK                             00000A8D' | ACIA_SR_DSRB                     00000040
MB_ABS                           00000003  | MB_REL                           00000040
MB_ACC                           00000010  | MO_REL                           00000040
MB_BIT                           00000020  | OP_JSR                           00000040
MB_IMM                           00000002  | V                                00000040
MB_IMP                           00000000  | VIA_ACR_T1C0                     00000040
MB_IND                           00000080  | VIA_IER_T1                       00000040
MB_REL                           00000040  | VIA_IFR_T1                       00000040
MB_XRG                           00000008  | VIA_PCR_CB2C1                    00000040
MB_YRG                           00000004  | OP_LDA                           00000042

Portable 65xx Assembler [20.01]

MB_ZPG                           00000001  | OP_LDX                           00000044
MNEMONICS                        00000003' | OP_LDY                           00000046
MODES                            00000C00' | OP_LSR                           00000048
MO_ABS                           00000003  | OP_NOP                           0000004A
MO_ABX                           0000000B  | OP_ORA                           0000004C
MO_ABY                           00000007  | OP_PHA                           0000004E
MO_ACC                           00000010  | OP_PHP                           00000050
MO_BIT                           00000021  | OP_PHX                           00000052
MO_BRL                           00000061  | OP_PHY                           00000054
MO_IAB                           00000083  | OP_PLA                           00000056
MO_IAX                           0000008B  | OP_PLP                           00000058
MO_IMM                           00000002  | OP_PLX                           0000005A
MO_IMP                           00000000  | OP_PLY                           0000005C
MO_IZP                           00000081  | OP_RMB                           0000005E
MO_IZX                           00000089  | OP_ROL                           00000060
MO_IZY                           00000085  | MO_BRL                           00000061
MO_REL                           00000040  | OP_ROR                           00000062
MO_ZPG                           00000001  | OP_RTI                           00000064
MO_ZPX                           00000009  | OP_RTS                           00000066
MO_ZPY                           00000005  | OP_SBC                           00000068
N                                00000080  | OP_SEC                           0000006A
NAK                              00000015  | OP_SED                           0000006C
NMI                              00000D10' | OP_SEI                           0000006E
NMIV                             00007E72  | OP_SMB                           00000070
NewCommand                       000000E1' | OP_STA                           00000072
NewLine                          00000978' | OP_STP                           00000074
NextChar                         00000724' | OP_STX                           00000076
OPCODES                          00000B00' | OP_STY                           00000078
OP_ADC                           00000002  | OP_STZ                           0000007A
OP_AND                           00000004  | OP_TAX                           0000007C
OP_ASL                           00000006  | OP_TAY                           0000007E
OP_BBR                           00000008  | DEL                              0000007F
OP_BBS                           0000000A  | ACIA_CMD_PMC1                    00000080
OP_BCC                           0000000C  | ACIA_CR_SBN                      00000080
OP_BCS                           0000000E  | ACIA_SR_IRQ                      00000080
OP_BEQ                           00000010  | CMD_SIZE                         00000080
OP_BIT                           00000012  | MB_IND                           00000080
OP_BMI                           00000014  | N                                00000080
OP_BNE                           00000016  | OP_TRB                           00000080
OP_BPL                           00000018  | VIA_ACR_T1C1                     00000080
OP_BRA                           0000001A  | VIA_IER_SET                      00000080
OP_BRK                           0000001C  | VIA_IFR_IRQ                      00000080
OP_BVC                           0000001E  | VIA_PCR_CB2C2                    00000080
OP_BVS                           00000020  | MO_IZP                           00000081
OP_CLC                           00000022  | OP_TSB                           00000082
OP_CLD                           00000024  | MO_IAB                           00000083
OP_CLI                           00000026  | OP_TSX                           00000084
OP_CLV                           00000028  | MO_IZY                           00000085
OP_CMP                           0000002A  | OP_TXA                           00000086
OP_CPX                           0000002C  | OP_TXS                           00000088
OP_CPY                           0000002E  | MO_IZX                           00000089
OP_DEC                           00000030  | OP_TYA                           0000008A
OP_DEX                           00000032  | MO_IAX                           0000008B
OP_DEY                           00000034  | OP_WAI                           0000008C

Portable 65xx Assembler [20.01]

OP_EOR                           00000036  | RESET                            00000091'
OP_ERR                           00000000  | VECTORS                          000000B0'
OP_INC                           00000038  | BRK                              000000B4'
OP_INX                           0000003A  | ShowRegisters                    000000CB'
OP_INY                           0000003C  | NewCommand                       000000E1'
OP_JMP                           0000003E  | RptCommand                       000000E3'
OP_JSR                           00000040  | A_REG                            000000F0
OP_LDA                           00000042  | X_REG                            000000F1
OP_LDX                           00000044  | Y_REG                            000000F2
OP_LDY                           00000046  | P_REG                            000000F3
OP_LSR                           00000048  | PC_REG                           000000F4
OP_NOP                           0000004A  | CMD_LEN                          000000F6
OP_ORA                           0000004C  | ADDR_S                           000000F7
OP_PHA                           0000004E  | ADDR_E                           000000F9
OP_PHP                           00000050  | TEMP                             000000FB
OP_PHX                           00000052  | COUNT                            000000FD
OP_PHY                           00000054  | STACK                            00000100
OP_PLA                           00000056  | RptCommand.FillFail              000001B6'
OP_PLP                           00000058  | COMMAND                          00000200
OP_PLX                           0000005A  | RptCommand.S19Fail               0000029C'
OP_PLY                           0000005C  | Trace                            000002C7'
OP_RMB                           0000005E  | EMULATE                          000003D1'
OP_ROL                           00000060  | EM_CLC                           0000045F'
OP_ROR                           00000062  | EM_CLD                           00000463'
OP_RTI                           00000064  | EM_CLI                           00000467'
OP_RTS                           00000066  | EM_CLV                           0000046B'
OP_SBC                           00000068  | EM_SEC                           0000046F'
OP_SEC                           0000006A  | EM_SED                           00000473'
OP_SED                           0000006C  | EM_SEI                           00000477'
OP_SEI                           0000006E  | EM_ADC                           0000047B'
OP_SMB                           00000070  | EM_SBC                           00000480'
OP_STA                           00000072  | EM_CPX                           00000485'
OP_STP                           00000074  | EM_CPY                           00000488'
OP_STX                           00000076  | EM_CMP                           0000048A'
OP_STY                           00000078  | EM_AND                           0000048F'
OP_STZ                           0000007A  | EM_EOR                           00000494'
OP_TAX                           0000007C  | EM_ORA                           00000499'
OP_TAY                           0000007E  | EM_BIT                           0000049E'
OP_TRB                           00000080  | EM_ASL                           000004BD'
OP_TSB                           00000082  | EM_LSR                           000004C5'
OP_TSX                           00000084  | EM_ROL                           000004CD'
OP_TXA                           00000086  | EM_ROR                           000004D5'
OP_TXS                           00000088  | EM_DEC                           000004DD'
OP_TYA                           0000008A  | EM_DEX                           000004E7'
OP_WAI                           0000008C  | EM_DEY                           000004EC'
PC_REG                           000000F4  | EM_INC                           000004F1'
PC_STR                           00000014  | EM_INX                           000004FB'
PIA                              00007FA0  | EM_INY                           00000500'
P_REG                            000000F3  | EM_BCC                           00000505'
P_STR                            0000001D  | EM_BCS                           0000050A'
RESET                            00000091' | EM_BEQ                           0000050F'
RptCommand                       000000E3' | EM_BMI                           00000514'
RptCommand.FillFail              000001B6' | EM_BNE                           00000519'
RptCommand.S19Fail               0000029C' | EM_BPL                           0000051E'

Portable 65xx Assembler [20.01]

RxWait                           00000D33' | EM_BRA                           00000523'
SOH                              00000001  | EM_BVC                           0000052E'
SP_STR                           00000018  | EM_BVS                           00000533'
STACK                            00000100  | EM_JSR                           00000538'
STRINGS                          0000098E' | EM_JMP                           00000546'
SaveAP                           0000067C' | EM_LDA                           00000551'
SaveNone                         00000682' | EM_LDX                           00000556'
SaveP                            0000067E' | EM_LDY                           0000055D'
SetEndAddr                       000006D3' | EM_STA                           00000564'
SetPrompt                        000006F5' | EM_STX                           00000569'
SetStartAddr                     000006CA' | EM_STY                           0000056E'
ShowHex                          0000095B' | EM_STZ                           00000573'
ShowHex2                         00000952' | EM_PHA                           00000578'
ShowRegisters                    000000CB' | EM_PHP                           0000057C'
ShowString                       00000982' | EM_PHX                           00000582'
SkipSpaces                       0000073B' | EM_PHY                           00000588'
Space                            0000096E' | EM_PLA                           0000058E'
Space2                           0000096B' | EM_PLP                           00000592'
TEMP                             000000FB  | EM_PLX                           0000059A'
TTL_STR                          00000000  | EM_PLY                           000005A0'
ToHex                            00000961' | EM_NOP                           000005A6'
ToUpper                          0000072F' | EM_BRK                           000005A9'
Trace                            000002C7' | EM_RTI                           000005C1'
TxWait                           00000D16' | EM_RTS                           000005CF'
UartRx                           00000D30' | EM_STP                           000005DE'
UartTx                           00000D11' | EM_WAI                           000005E1'
V                                00000040  | EM_TAX                           000005E4'
VECTORS                          000000B0' | EM_TAY                           000005EB'
VIA1                             00007FC0  | EM_TSX                           000005F2'
VIA2                             00007FE0  | EM_TXA                           000005F8'
VIA2_DDRA                        00007FE3  | EM_TXS                           000005FD'
VIA2_DDRB                        00007FE2  | EM_TYA                           00000603'
VIA2_IRA                         00007FE1  | EM_BBR                           00000608'
VIA2_IRB                         00007FE0  | EM_BBS                           0000061A'
VIA2_ORA                         00007FE1  | EM_RMB                           0000062C'
VIA2_ORB                         00007FE0  | EM_SMB                           0000063E'
VIA_ACR                          0000000B  | EM_TRB                           00000650'
VIA_ACR_PA                       00000002  | EM_TSB                           00000667'
VIA_ACR_PB                       00000001  | SaveAP                           0000067C'
VIA_ACR_SRC0                     00000004  | SaveP                            0000067E'
VIA_ACR_SRC1                     00000008  | SaveNone                         00000682'
VIA_ACR_SRC2                     00000010  | EM_ERR                           00000693'
VIA_ACR_T1C0                     00000040  | Error                            000006C2'
VIA_ACR_T1C1                     00000080  | SetStartAddr                     000006CA'
VIA_ACR_T2C                      00000020  | SetEndAddr                       000006D3'
VIA_DDRA                         00000003  | BumpAddr                         000006DC'
VIA_DDRB                         00000002  | CheckEnd                         000006E8'
VIA_IER                          0000000E  | SetPrompt                        000006F5'
VIA_IER_CA1                      00000002  | AppendHex2                       00000711'
VIA_IER_CA2                      00000001  | AppendHex                        0000071A'
VIA_IER_CB1                      00000010  | AppendChar                       0000071D'
VIA_IER_CB2                      00000008  | NextChar                         00000724'
VIA_IER_SET                      00000080  | ToUpper                          0000072F'
VIA_IER_SR                       00000004  | SkipSpaces                       0000073B'

Portable 65xx Assembler [20.01]

VIA_IER_T1                       00000040  | GetWord                          00000746'
VIA_IER_T2                       00000020  | GetByte                          0000074A'
VIA_IFR                          0000000D  | GetNybble                        0000077D'
VIA_IFR_CA1                      00000002  | IsHex                            0000078E'
VIA_IFR_CA2                      00000001  | IsPrintable                      0000079E'
VIA_IFR_CB1                      00000010  | DumpRegisters                    000007AA'
VIA_IFR_CB2                      00000008  | Disassemble                      000007ED'
VIA_IFR_IRQ                      00000080  | Disassemble.Skip                 00000823'
VIA_IFR_SR                       00000004  | ExtractLetter                    00000933'
VIA_IFR_T1                       00000040  | ShowHex2                         00000952'
VIA_IFR_T2                       00000020  | ShowHex                          0000095B'
VIA_IRA                          00000001  | ToHex                            00000961'
VIA_IRAN                         0000000F  | Space2                           0000096B'
VIA_IRB                          00000000  | Space                            0000096E'
VIA_ORA                          00000001  | Bar                              00000973'
VIA_ORAN                         0000000F  | NewLine                          00000978'
VIA_ORB                          00000000  | ShowString                       00000982'
VIA_PCR                          0000000C  | STRINGS                          0000098E'
VIA_PCR_CA1C                     00000001  | FLAG                             00000A7D'
VIA_PCR_CA2C0                    00000002  | BITS                             00000A85'
VIA_PCR_CA2C1                    00000004  | MASK                             00000A8D'
VIA_PCR_CA2C2                    00000008  | OPCODES                          00000B00'
VIA_PCR_CB1C                     00000010  | MODES                            00000C00'
VIA_PCR_CB2C0                    00000020  | IRQ                              00000D00'
VIA_PCR_CB2C1                    00000040  | NMI                              00000D10'
VIA_PCR_CB2C2                    00000080  | UartTx                           00000D11'
VIA_SR                           0000000A  | TxWait                           00000D16'
VIA_T1CH                         00000005  | UartRx                           00000D30'
VIA_T1CL                         00000004  | RxWait                           00000D33'
VIA_T1LH                         00000007  | DO_IRQ                           00000D50'
VIA_T1LL                         00000006  | DO_NMI                           00000D53'
VIA_T2CH                         00000009  | IRQV                             00007E70
VIA_T2CL                         00000008  | NMIV                             00007E72
X_REG                            000000F1  | ACIA                             00007F80
X_STR                            00000025  | PIA                              00007FA0
Y_REG                            000000F2  | VIA1                             00007FC0
Y_STR                            00000029  | VIA2                             00007FE0
Z                                00000002  | VIA2_IRB                         00007FE0
__6501__                         00000000  | VIA2_ORB                         00007FE0
__6502__                         00000000  | VIA2_IRA                         00007FE1
__65816__                        00000000  | VIA2_ORA                         00007FE1
__65832__                        00000000  | VIA2_DDRB                        00007FE2
__65C02__                        00000001  | VIA2_DDRA                        00007FE3
__65SC02__                       00000000  | FOSC                             007A1200
