
Portable 65xx Assembler [20.01]

                             ;===============================================================================
                             ; __        ____  ____   ____ ___ ____  ______  ______
                             ; \ \      / / /_| ___| / ___/ _ \___ \/ ___\ \/ / __ )
                             ;  \ \ /\ / / '_ \___ \| |  | | | |__) \___ \\  /|  _ \
                             ;   \ V  V /| (_) |__) | |__| |_| / __/ ___) /  \| |_) |
                             ;  __\_/\_/  \___/____/ \____\___/_____|____/_/\_\____/
                             ; |  \/  | ___  _ __ (_) |_ ___  _ __
                             ; | |\/| |/ _ \| '_ \| | __/ _ \| '__|
                             ; | |  | | (_) | | | | | || (_) | |
                             ; |_|  |_|\___/|_| |_|_|\__\___/|_|
                             ;
                             ;
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2014-2020 Andrew John Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-NonCommercial-ShareAlike 4.0 International license. Open the
                             ; following URL to see the details.
                             ;
                             ; http://creativecommons.org/licenses/by-nc-sa/4.0/
                             ;===============================================================================
                             ;
                             ; Notes:
                             ;
                             ;
                             ;-------------------------------------------------------------------------------

                                             .include "w65c02sxb.inc"
                             ;===============================================================================
                             ; WDC W65C02SXB System Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                                             .include "w65c02.inc"
                             ;===============================================================================
                             ; WDC W65C02 Processor Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons

Portable 65xx Assembler [20.01]

                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                                             .65c02

                             ;===============================================================================
                             ; Constants
                             ;-------------------------------------------------------------------------------

                             ; Status Registers Bits

         00000080          = N               .equ    $80
         00000040          = V               .equ    $40
         00000010          = B               .equ    $10
         00000008          = D               .equ    $08
         00000004          = I               .equ    $04
         00000002          = Z               .equ    $02
         00000001          = C               .equ    $01

                             ; Hardware Stack Page

         00000100          = STACK           .equ    $0100
                                             .include "w65c22.inc"
                             ;===============================================================================
                             ; WDC W65C22 Versatile Interface Adapter (VIA) Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; Peripheral Registers
                             ;-------------------------------------------------------------------------------

         00000000          = VIA_ORB         .equ    $00
         00000000          = VIA_IRB         .equ    $00
         00000001          = VIA_ORA         .equ    $01

Portable 65xx Assembler [20.01]

         00000001          = VIA_IRA         .equ    $01
         00000002          = VIA_DDRB        .equ    $02
         00000003          = VIA_DDRA        .equ    $03
         00000004          = VIA_T1CL        .equ    $04
         00000005          = VIA_T1CH        .equ    $05
         00000006          = VIA_T1LL        .equ    $06
         00000007          = VIA_T1LH        .equ    $07
         00000008          = VIA_T2CL        .equ    $08
         00000009          = VIA_T2CH        .equ    $09
         0000000A          = VIA_SR          .equ    $0a
         0000000B          = VIA_ACR         .equ    $0b
         0000000C          = VIA_PCR         .equ    $0c
         0000000D          = VIA_IFR         .equ    $0d
         0000000E          = VIA_IER         .equ    $0e
         0000000F          = VIA_ORAN        .equ    $0f
         0000000F          = VIA_IRAN        .equ    $0f

                             ; ACR Register Bits

         00000080          = VIA_ACR_T1C1    .equ    $80
         00000040          = VIA_ACR_T1C0    .equ    $40
         00000020          = VIA_ACR_T2C     .equ    $20
         00000010          = VIA_ACR_SRC2    .equ    $10
         00000008          = VIA_ACR_SRC1    .equ    $08
         00000004          = VIA_ACR_SRC0    .equ    $04
         00000002          = VIA_ACR_PA      .equ    $02
         00000001          = VIA_ACR_PB      .equ    $01

                             ; PCR Register Bits

         00000080          = VIA_PCR_CB2C2   .equ    $80
         00000040          = VIA_PCR_CB2C1   .equ    $40
         00000020          = VIA_PCR_CB2C0   .equ    $20
         00000010          = VIA_PCR_CB1C    .equ    $10
         00000008          = VIA_PCR_CA2C2   .equ    $08
         00000004          = VIA_PCR_CA2C1   .equ    $04
         00000002          = VIA_PCR_CA2C0   .equ    $02
         00000001          = VIA_PCR_CA1C    .equ    $01

                             ; IFR Register Bits

         00000080          = VIA_IFR_IRQ     .equ    $80
         00000040          = VIA_IFR_T1      .equ    $40
         00000020          = VIA_IFR_T2      .equ    $20
         00000010          = VIA_IFR_CB1     .equ    $10
         00000008          = VIA_IFR_CB2     .equ    $08
         00000004          = VIA_IFR_SR      .equ    $04
         00000002          = VIA_IFR_CA1     .equ    $02
         00000001          = VIA_IFR_CA2     .equ    $01

                             ; IER Register Bits

         00000080          = VIA_IER_SET     .equ    $80
         00000040          = VIA_IER_T1      .equ    $40

Portable 65xx Assembler [20.01]

         00000020          = VIA_IER_T2      .equ    $20
         00000010          = VIA_IER_CB1     .equ    $10
         00000008          = VIA_IER_CB2     .equ    $08
         00000004          = VIA_IER_SR      .equ    $04
         00000002          = VIA_IER_CA1     .equ    $02
         00000001          = VIA_IER_CA2     .equ    $01
                                             .include "w65c51.inc"
                             ;===============================================================================
                             ; WDC W65C51 Asynchronous Communications Interface Adapter (ACIA) Definitions
                             ;-------------------------------------------------------------------------------
                             ; Copyright (C)2020 Andrew Jacobs.
                             ; All rights reserved.
                             ;
                             ; This work is made available under the terms of the Creative Commons
                             ; Attribution-ShareAlike 4.0 International license. Open the following URL to
                             ; see the details.
                             ;
                             ; https://creativecommons.org/licenses/by-sa/4.0/
                             ;
                             ;===============================================================================
                             ; Notes:
                             ;
                             ; The 'Transmitter Data Register Empty' (TDRE) bit in the status register is
                             ; faulty in physical W65C51 chips.
                             ;-------------------------------------------------------------------------------

                             ;===============================================================================
                             ; Peripheral Registers
                             ;-------------------------------------------------------------------------------

         00000000          = ACIA_DATA       .equ    0               ; Transmit/Receive Register
         00000001          = ACIA_SR         .equ    1               ; Status Register
         00000002          = ACIA_CMD        .equ    2               ; Command Register
         00000003          = ACIA_CR         .equ    3               ; Control Register

         00000080          = ACIA_SR_IRQ     .equ    1<<7            ; Interrupt (IRQ)
         00000040          = ACIA_SR_DSRB    .equ    1<<6            ; Data Set Ready (0=Ready)
         00000020          = ACIA_SR_DCDB    .equ    1<<5            ; Data Carrier Detect (0=Detected)
         00000010          = ACIA_SR_TDRE    .equ    1<<4            ; Tranmitter Data Register Empty
         00000008          = ACIA_SR_RDRF    .equ    1<<3            ; Receiver Data Register Full
         00000004          = ACIA_SR_OVRN    .equ    1<<2            ; Overrun
         00000002          = ACIA_SR_FE      .equ    1<<1            ; Framing Error
         00000001          = ACIA_SR_PE      .equ    1<<0            ; Parity Error

         00000080          = ACIA_CMD_PMC1   .equ    1<<7
         00000040          = ACIA_CMD_PMC0   .equ    1<<6
         00000020          = ACIA_CMD_PME    .equ    1<<5
         00000010          = ACIA_CMD_REM    .equ    1<<4
         00000008          = ACIA_CMD_TIC1   .equ    1<<3
         00000004          = ACIA_CMD_TIC0   .equ    1<<2
         00000002          = ACIA_CMD_IRD    .equ    1<<1
         00000001          = ACIA_CMD_DTR    .equ    1<<0

         00000080          = ACIA_CR_SBN     .equ    1<<7

Portable 65xx Assembler [20.01]

         00000040          = ACIA_CR_WL1     .equ    1<<6
         00000020          = ACIA_CR_WL0     .equ    1<<5
         00000010          = ACIA_CR_RCS     .equ    1<<4
         00000008          = ACIA_CR_SBR3    .equ    1<<3
         00000004          = ACIA_CR_SBR2    .equ    1<<2
         00000002          = ACIA_CR_SBR1    .equ    1<<1
         00000001          = ACIA_CR_SBR0    .equ    1<<0

                             ;===============================================================================
                             ; Configuration
                             ;-------------------------------------------------------------------------------

         007A1200          = FOSC            .equ    8000000         ; Oscillator speed (8MHz)

                             ;===============================================================================
                             ; Peripherals
                             ;-------------------------------------------------------------------------------

         00007F80          = ACIA            .equ    $7f80
         00007FA0          = PIA             .equ    $7fa0
         00007FC0          = VIA1            .equ    $7fc0
         00007FE0          = VIA2            .equ    $7fe0           ; Connected to FTDI 245

         00007FE0          = VIA2_IRB        .equ    VIA2+VIA_IRB
         00007FE0          = VIA2_ORB        .equ    VIA2+VIA_ORB
         00007FE1          = VIA2_ORA        .equ    VIA2+VIA_ORA
         00007FE1          = VIA2_IRA        .equ    VIA2+VIA_IRA
         00007FE2          = VIA2_DDRB       .equ    VIA2+VIA_DDRB
         00007FE3          = VIA2_DDRA       .equ    VIA2+VIA_DDRA

                             ;===============================================================================
                             ; Utility Routines
                             ;-------------------------------------------------------------------------------


                             ;===============================================================================
                             ; ASCII Control Characters
                             ;-------------------------------------------------------------------------------

         00000001          = SOH             .equ    $01
         00000004          = EOT             .equ    $04
         00000006          = ACK             .equ    $06
         00000007          = BEL             .equ    $07
         00000008          = BS              .equ    $08
         0000000A          = LF              .equ    $0a
         0000000D          = CR              .equ    $0d
         00000011          = DC1             .equ    $11             ; XON
         00000013          = DC3             .equ    $13             ; XOFF
         00000015          = NAK             .equ    $15
         00000018          = CAN             .equ    $18
         0000001B          = ESC             .equ    $1b
         0000007F          = DEL             .equ    $7f

                             ;===============================================================================

Portable 65xx Assembler [20.01]

                             ; Instruction and Mode Constants
                             ;-------------------------------------------------------------------------------

         00000000          = OP_ERR          .equ    $00
         00000002          = OP_ADC          .equ    $02
         00000004          = OP_AND          .equ    $04
         00000006          = OP_ASL          .equ    $06
                                             .if     __65C02__
         00000008          = OP_BBR          .equ    $08
         0000000A          = OP_BBS          .equ    $0A
                                             .endif
         0000000C          = OP_BCC          .equ    $0C
         0000000E          = OP_BCS          .equ    $0E
         00000010          = OP_BEQ          .equ    $10
         00000012          = OP_BIT          .equ    $12
         00000014          = OP_BMI          .equ    $14
         00000016          = OP_BNE          .equ    $16
         00000018          = OP_BPL          .equ    $18
                                             .if     __65C02__|__65SC02__
         0000001A          = OP_BRA          .equ    $1A
                                             .endif
         0000001C          = OP_BRK          .equ    $1C
         0000001E          = OP_BVC          .equ    $1E
         00000020          = OP_BVS          .equ    $20
         00000022          = OP_CLC          .equ    $22
         00000024          = OP_CLD          .equ    $24
         00000026          = OP_CLI          .equ    $26
         00000028          = OP_CLV          .equ    $28
         0000002A          = OP_CMP          .equ    $2A
         0000002C          = OP_CPX          .equ    $2C
         0000002E          = OP_CPY          .equ    $2E
         00000030          = OP_DEC          .equ    $30
         00000032          = OP_DEX          .equ    $32
         00000034          = OP_DEY          .equ    $34
         00000036          = OP_EOR          .equ    $36
         00000038          = OP_INC          .equ    $38
         0000003A          = OP_INX          .equ    $3A
         0000003C          = OP_INY          .equ    $3C
         0000003E          = OP_JMP          .equ    $3E
         00000040          = OP_JSR          .equ    $40
         00000042          = OP_LDA          .equ    $42
         00000044          = OP_LDX          .equ    $44
         00000046          = OP_LDY          .equ    $46
         00000048          = OP_LSR          .equ    $48
         0000004A          = OP_NOP          .equ    $4A
         0000004C          = OP_ORA          .equ    $4C
         0000004E          = OP_PHA          .equ    $4E
         00000050          = OP_PHP          .equ    $50
                                             .if     __65C02__|__65SC02__
         00000052          = OP_PHX          .equ    $52
         00000054          = OP_PHY          .equ    $54
                                             .endif
         00000056          = OP_PLA          .equ    $56
         00000058          = OP_PLP          .equ    $58

Portable 65xx Assembler [20.01]

                                             .if     __65C02__|__65SC02__
         0000005A          = OP_PLX          .equ    $5A
         0000005C          = OP_PLY          .equ    $5C
                                             .endif
                                             .if     __65C02__
         0000005E          = OP_RMB          .equ    $5E
                                             .endif
         00000060          = OP_ROL          .equ    $60
         00000062          = OP_ROR          .equ    $62
         00000064          = OP_RTI          .equ    $64
         00000066          = OP_RTS          .equ    $66
         00000068          = OP_SBC          .equ    $68
         0000006A          = OP_SEC          .equ    $6A
         0000006C          = OP_SED          .equ    $6C
         0000006E          = OP_SEI          .equ    $6E
                                             .if     __65C02__
         00000070          = OP_SMB          .equ    $70
                                             .endif
         00000072          = OP_STA          .equ    $72
                                             .if     __65C02__|__65SC02__
         00000074          = OP_STP          .equ    $74
                                             .endif
         00000076          = OP_STX          .equ    $76
         00000078          = OP_STY          .equ    $78
                                             .if     __65C02__|__65SC02__
         0000007A          = OP_STZ          .equ    $7A
                                             .endif
         0000007C          = OP_TAX          .equ    $7C
         0000007E          = OP_TAY          .equ    $7E
                                             .if     __65C02__|__65SC02__
         00000080          = OP_TRB          .equ    $80
         00000082          = OP_TSB          .equ    $82
                                             .endif
         00000084          = OP_TSX          .equ    $84
         00000086          = OP_TXA          .equ    $86
         00000088          = OP_TXS          .equ    $88
         0000008A          = OP_TYA          .equ    $8A
                                             .if     __65C02__|__65SC02__
         0000008C          = OP_WAI          .equ    $8C
                                             .endif

                             ; Bit patterns for addressing modes

         00000080          = MB_IND          .equ    %10000000
         00000040          = MB_REL          .equ    %01000000
         00000020          = MB_BIT          .equ    %00100000

         00000000          = MB_IMP          .equ    %00000000
         00000001          = MB_ZPG          .equ    %00000001
         00000002          = MB_IMM          .equ    %00000010
         00000003          = MB_ABS          .equ    %00000011

         00000010          = MB_ACC          .equ    %00010000
         00000008          = MB_XRG          .equ    %00001000

Portable 65xx Assembler [20.01]

         00000004          = MB_YRG          .equ    %00000100

                             ; Addressing modes

                                             .if     __65C02__
         00000021          = MO_BIT          .equ    MB_BIT       |MB_ZPG
         00000061          = MO_BRL          .equ    MB_BIT|MB_REL|MB_ZPG
                                             .endif
         00000010          = MO_ACC          .equ           MB_ACC|MB_IMP
         00000000          = MO_IMP          .equ                  MB_IMP
         00000002          = MO_IMM          .equ                  MB_IMM
         00000040          = MO_REL          .equ                  MB_REL
         00000001          = MO_ZPG          .equ                  MB_ZPG
         00000009          = MO_ZPX          .equ           MB_XRG|MB_ZPG
         00000005          = MO_ZPY          .equ           MB_YRG|MB_ZPG
                                             .if     __65C02__|__65SC02__
         00000081          = MO_IZP          .equ    MB_IND       |MB_ZPG
                                             .endif
         00000089          = MO_IZX          .equ    MB_IND|MB_XRG|MB_ZPG
         00000085          = MO_IZY          .equ    MB_IND|MB_YRG|MB_ZPG
         00000003          = MO_ABS          .equ                  MB_ABS
         0000000B          = MO_ABX          .equ           MB_XRG|MB_ABS
         00000007          = MO_ABY          .equ           MB_YRG|MB_ABS
         00000083          = MO_IAB          .equ    MB_IND       |MB_ABS
                                             .if     __65C02__|__65SC02__
         0000008B          = MO_IAX          .equ    MB_IND|MB_XRG|MB_ABS
                                             .endif

                             ;===============================================================================
                             ; Macros
                             ;-------------------------------------------------------------------------------

                             ; The MNEM macro compresses three characters into a 16-bit value.

                             MNEM            .macro  CH1,CH2,CH3
                                             .word   ((((CH3 & $1f) << 5)|(CH2 & $1f)) << 5)|(CH1 & $1f)
                                             .endm

                             ;===============================================================================
                             ; Data Areas
                             ;-------------------------------------------------------------------------------

                                             .page0
                                             .org    $00f0

00:00F0  00                : A_REG           .space  1                       ; Saved registers
00:00F1  00                : X_REG           .space  1
00:00F2  00                : Y_REG           .space  1
00:00F3  00                : P_REG           .space  1
00:00F4  0000              : PC_REG          .space  2

00:00F6  00                : CMD_LEN         .space  1                       ; Command buffer length
00:00F7  0000              : ADDR_S          .space  2
00:00F9  0000              : ADDR_E          .space  2

Portable 65xx Assembler [20.01]


00:00FB  0000              : TEMP            .space  2
00:00FD  00                : COUNT           .space  1

                             ;-------------------------------------------------------------------------------

                                             .org    $00fe

00:00FE  00                : IO_TEMP         .space  1

                             ;===============================================================================
                             ; UART Buffers
                             ;-------------------------------------------------------------------------------

                                             .bss
                                             .org    $0200

00:0200  0000              : IRQV            .space  2               ; Vectors
00:0202  0000              : NMIV            .space  2

         00000080          = CMD_SIZE        .equ    128

00:0204  0000000000000000> : COMMAND         .space  CMD_SIZE        ; Command buffer area

                             ;===============================================================================
                             ; Compressed Mnemonics
                             ;-------------------------------------------------------------------------------

                                             .code

                             MNEMONICS:
                                             MNEM    '?','?','?'
00:0000' FF7F              +                 .word   (((('?' & $1f) << 5)|('?' & $1f)) << 5)|('?' & $1f)
                                             MNEM    'A','D','C'
00:0002' 810C              +                 .word   (((('C' & $1f) << 5)|('D' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'A','N','D'
00:0004' C111              +                 .word   (((('D' & $1f) << 5)|('N' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'A','S','L'
00:0006' 6132              +                 .word   (((('L' & $1f) << 5)|('S' & $1f)) << 5)|('A' & $1f)
                                             MNEM    'B','B','R'
00:0008' 4248              +                 .word   (((('R' & $1f) << 5)|('B' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','B','S'
00:000A' 424C              +                 .word   (((('S' & $1f) << 5)|('B' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','C','C'
00:000C' 620C              +                 .word   (((('C' & $1f) << 5)|('C' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','C','S'
00:000E' 624C              +                 .word   (((('S' & $1f) << 5)|('C' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','E','Q'
00:0010' A244              +                 .word   (((('Q' & $1f) << 5)|('E' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','I','T'
00:0012' 2251              +                 .word   (((('T' & $1f) << 5)|('I' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','M','I'
00:0014' A225              +                 .word   (((('I' & $1f) << 5)|('M' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','N','E'

Portable 65xx Assembler [20.01]

00:0016' C215              +                 .word   (((('E' & $1f) << 5)|('N' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','P','L'
00:0018' 0232              +                 .word   (((('L' & $1f) << 5)|('P' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','R','A'
00:001A' 4206              +                 .word   (((('A' & $1f) << 5)|('R' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','R','K'
00:001C' 422E              +                 .word   (((('K' & $1f) << 5)|('R' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','V','C'
00:001E' C20E              +                 .word   (((('C' & $1f) << 5)|('V' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'B','V','S'
00:0020' C24E              +                 .word   (((('S' & $1f) << 5)|('V' & $1f)) << 5)|('B' & $1f)
                                             MNEM    'C','L','C'
00:0022' 830D              +                 .word   (((('C' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','D'
00:0024' 8311              +                 .word   (((('D' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','I'
00:0026' 8325              +                 .word   (((('I' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','L','V'
00:0028' 8359              +                 .word   (((('V' & $1f) << 5)|('L' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','M','P'
00:002A' A341              +                 .word   (((('P' & $1f) << 5)|('M' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','P','X'
00:002C' 0362              +                 .word   (((('X' & $1f) << 5)|('P' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'C','P','Y'
00:002E' 0366              +                 .word   (((('Y' & $1f) << 5)|('P' & $1f)) << 5)|('C' & $1f)
                                             MNEM    'D','E','C'
00:0030' A40C              +                 .word   (((('C' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'D','E','X'
00:0032' A460              +                 .word   (((('X' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'D','E','Y'
00:0034' A464              +                 .word   (((('Y' & $1f) << 5)|('E' & $1f)) << 5)|('D' & $1f)
                                             MNEM    'E','O','R'
00:0036' E549              +                 .word   (((('R' & $1f) << 5)|('O' & $1f)) << 5)|('E' & $1f)
                                             MNEM    'I','N','C'
00:0038' C90D              +                 .word   (((('C' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'I','N','X'
00:003A' C961              +                 .word   (((('X' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'I','N','Y'
00:003C' C965              +                 .word   (((('Y' & $1f) << 5)|('N' & $1f)) << 5)|('I' & $1f)
                                             MNEM    'J','M','P'
00:003E' AA41              +                 .word   (((('P' & $1f) << 5)|('M' & $1f)) << 5)|('J' & $1f)
                                             MNEM    'J','S','R'
00:0040' 6A4A              +                 .word   (((('R' & $1f) << 5)|('S' & $1f)) << 5)|('J' & $1f)
                                             MNEM    'L','D','A'
00:0042' 8C04              +                 .word   (((('A' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','D','X'
00:0044' 8C60              +                 .word   (((('X' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','D','Y'
00:0046' 8C64              +                 .word   (((('Y' & $1f) << 5)|('D' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'L','S','R'
00:0048' 6C4A              +                 .word   (((('R' & $1f) << 5)|('S' & $1f)) << 5)|('L' & $1f)
                                             MNEM    'N','O','P'
00:004A' EE41              +                 .word   (((('P' & $1f) << 5)|('O' & $1f)) << 5)|('N' & $1f)
                                             MNEM    'O','R','A'

Portable 65xx Assembler [20.01]

00:004C' 4F06              +                 .word   (((('A' & $1f) << 5)|('R' & $1f)) << 5)|('O' & $1f)
                                             MNEM    'P','H','A'
00:004E' 1005              +                 .word   (((('A' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','P'
00:0050' 1041              +                 .word   (((('P' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','X'
00:0052' 1061              +                 .word   (((('X' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','H','Y'
00:0054' 1065              +                 .word   (((('Y' & $1f) << 5)|('H' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','A'
00:0056' 9005              +                 .word   (((('A' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','P'
00:0058' 9041              +                 .word   (((('P' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','X'
00:005A' 9061              +                 .word   (((('X' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'P','L','Y'
00:005C' 9065              +                 .word   (((('Y' & $1f) << 5)|('L' & $1f)) << 5)|('P' & $1f)
                                             MNEM    'R','M','B'
00:005E' B209              +                 .word   (((('B' & $1f) << 5)|('M' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','O','L'
00:0060' F231              +                 .word   (((('L' & $1f) << 5)|('O' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','O','R'
00:0062' F249              +                 .word   (((('R' & $1f) << 5)|('O' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','T','I'
00:0064' 9226              +                 .word   (((('I' & $1f) << 5)|('T' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'R','T','S'
00:0066' 924E              +                 .word   (((('S' & $1f) << 5)|('T' & $1f)) << 5)|('R' & $1f)
                                             MNEM    'S','B','C'
00:0068' 530C              +                 .word   (((('C' & $1f) << 5)|('B' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','C'
00:006A' B30C              +                 .word   (((('C' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','D'
00:006C' B310              +                 .word   (((('D' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','E','I'
00:006E' B324              +                 .word   (((('I' & $1f) << 5)|('E' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','M','B'
00:0070' B309              +                 .word   (((('B' & $1f) << 5)|('M' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','A'
00:0072' 9306              +                 .word   (((('A' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','P'
00:0074' 9342              +                 .word   (((('P' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','X'
00:0076' 9362              +                 .word   (((('X' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','Y'
00:0078' 9366              +                 .word   (((('Y' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'S','T','Z'
00:007A' 936A              +                 .word   (((('Z' & $1f) << 5)|('T' & $1f)) << 5)|('S' & $1f)
                                             MNEM    'T','A','X'
00:007C' 3460              +                 .word   (((('X' & $1f) << 5)|('A' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','A','Y'
00:007E' 3464              +                 .word   (((('Y' & $1f) << 5)|('A' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','R','B'
00:0080' 540A              +                 .word   (((('B' & $1f) << 5)|('R' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','S','B'

Portable 65xx Assembler [20.01]

00:0082' 740A              +                 .word   (((('B' & $1f) << 5)|('S' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','S','X'
00:0084' 7462              +                 .word   (((('X' & $1f) << 5)|('S' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','X','A'
00:0086' 1407              +                 .word   (((('A' & $1f) << 5)|('X' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','X','S'
00:0088' 144F              +                 .word   (((('S' & $1f) << 5)|('X' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'T','Y','A'
00:008A' 3407              +                 .word   (((('A' & $1f) << 5)|('Y' & $1f)) << 5)|('T' & $1f)
                                             MNEM    'W','A','I'
00:008C' 3724              +                 .word   (((('I' & $1f) << 5)|('A' & $1f)) << 5)|('W' & $1f)

                             ;===============================================================================
                             ; Power On Reset
                             ;-------------------------------------------------------------------------------

                             RESET:
00:008E' 78                :                 sei
00:008F' D8                :                 cld                     ; Ensure binary mode

00:0090' A2FF              :                 ldx     #$FF            ; Reset the stack
00:0092' 9A                :                 txs

                                             repeat                  ; Setup vectors
00:0093' BD????            :                  lda    VECTORS,x
00:0096' 9D0002            :                  sta    IRQV,x
00:0099' E8                :                  inx
00:009A' E004              :                  cpx    #4
00:009C' D0F5              :                 until eq


00:009E' A91C              :                 lda     #$1c            ; Configure VIA for USB FIFO
00:00A0' 8DE27F            :                 sta     VIA2_DDRB
00:00A3' A918              :                 lda     #$18
00:00A5' 8DE07F            :                 sta     VIA2_ORB

00:00A8' 58                :                 cli                     ; Allow interrupts

00:00A9' 20????            :                 jsr     NewLine
00:00AC' A200              :                 ldx     #TTL_STR
00:00AE' 20????            :                 jsr     ShowString

                                             repeat
00:00B1' 0000              :                  brk    #0              ; And enter monitor
00:00B3' 80FC              :                 forever

                             ;-------------------------------------------------------------------------------

00:00B5' ????              : VECTORS:        .word   IRQ             ; Default vectors
00:00B7' ????              :                 .word   NMI

                             ;===============================================================================
                             ; Entry Point
                             ;-------------------------------------------------------------------------------

Portable 65xx Assembler [20.01]


                             BRK:
00:00B9' 68                :                 pla                     ; Pull off saved registers
00:00BA' 85F2              :                 sta     Y_REG
00:00BC' 68                :                 pla
00:00BD' 85F1              :                 sta     X_REG
00:00BF' 68                :                 pla
00:00C0' 85F0              :                 sta     A_REG
00:00C2' 68                :                 pla
00:00C3' 85F3              :                 sta     P_REG
00:00C5' 38                :                 sec                     ; Move PC back to BRK
00:00C6' 68                :                 pla
00:00C7' E902              :                 sbc     #2
00:00C9' 85F4              :                 sta     PC_REG+0
00:00CB' 68                :                 pla
00:00CC' E900              :                 sbc     #0
00:00CE' 85F5              :                 sta     PC_REG+1

00:00D0' 58                :                 cli                     ; Allow interrupts

                             ;===============================================================================
                             ; Show Registers
                             ;-------------------------------------------------------------------------------

                             ShowRegisters:
00:00D1' 20????            :                 jsr     NewLine
00:00D4' A213              :                 ldx     #PC_STR         ; Display the PC
00:00D6' 20????            :                 jsr     ShowString
00:00D9' A5F5              :                 lda     PC_REG+1
00:00DB' 20????            :                 jsr     ShowHex2
00:00DE' A5F4              :                 lda     PC_REG+0
00:00E0' 20????            :                 jsr     ShowHex2

00:00E3' BA                :                 tsx
00:00E4' 20????            :                 jsr     DumpRegisters

                             ;===============================================================================
                             ; Command Line
                             ;-------------------------------------------------------------------------------

                             NewCommand:
                                             .if     __65C02__|__65SC02__
00:00E7' 64F6              :                 stz     CMD_LEN         ; Mark the buffer as empty
                                             .else
                           -                 lda     #0              ; Mark the buffer as empty
                           -                 sta     CMD_LEN
                                             .endif

                             RptCommand:
00:00E9' 20????            :                 jsr     NewLine         ; Move cursor to next line
00:00EC' A92E              :                 lda     #'.'            ; And output the prompt
00:00EE' 20????            :                 jsr     UartTx

00:00F1' A200              :                 ldx     #0              ; Output prepared command

Portable 65xx Assembler [20.01]

                                             repeat
00:00F3' E4F6              :                  cpx    CMD_LEN         ; Any saved characters to display?
00:00F5' B009              :                  break  cs              ; No
00:00F7' BD0402            :                  lda    COMMAND,x       ; Yes, print from the buffer
00:00FA' 20????            :                  jsr    UartTx
00:00FD' E8                :                  inx
00:00FE' 80F3              :                 forever

00:0100' A911              :                 lda     #DC1            ; Send XON
00:0102' 20????            :                 jsr     UartTx
                                             repeat
00:0105' 20????            :                  jsr    UartRx          ; Wait for some user input
00:0108' 9D0402            :                  sta    COMMAND,x

00:010B' C90D              :                  cmp    #CR             ; End of input?
00:010D' F033              :                  break eq

00:010F' C91B              :                  cmp    #ESC            ; Cancel input?
00:0111' D002              :                  if     eq
00:0113' F0D2              :                   beq   NewCommand      ; Yes
                                              endif

00:0115' C97F              :                  cmp    #DEL            ; Turn a delete
00:0117' D002              :                  if     eq
00:0119' A908              :                   lda   #BS             ; .. into a backspace
                                              endif

00:011B' C908              :                  cmp    #BS             ; Handle backspace
00:011D' D012              :                  if     eq
00:011F' E000              :                   cpx   #0
00:0121' F00C              :                   if    ne
00:0123' 48                :                    pha
00:0124' 20????            :                    jsr  UartTx
00:0127' 20????            :                    jsr  Space
00:012A' 68                :                    pla
00:012B' 20????            :                    jsr  UartTx
00:012E' CA                :                    dex
                                               endif
00:012F' 80D4              :                   continue
                                              endif

00:0131' C920              :                  cmp    #' '            ; Beep if non-printable
00:0133' B007              :                  if     cc
00:0135' A907              :                   lda   #BEL
00:0137' 20????            :                   jsr   UartTx
00:013A' 80C9              :                   continue
                                              endif

00:013C' 20????            :                  jsr    UartTx          ; Otherwise echo to screen
00:013F' E8                :                  inx                    ; And bump counter
00:0140' 80C3              :                 forever

00:0142' 86F6              :                 stx     CMD_LEN         ; Save the command length
00:0144' A913              :                 lda     #DC3            ; Send XOFF

Portable 65xx Assembler [20.01]

00:0146' 20????            :                 jsr     UartTx

00:0149' A200              :                 ldx     #0              ; Set character offset to start
00:014B' 20????            :                 jsr     SkipSpaces      ; And get first character
00:014E' B097              :                 bcs     NewCommand

00:0150' C90D              :                 cmp     #CR             ; Empty line?
00:0152' F093              :                 beq     NewCommand      ; Yes

                             ;===============================================================================
                             ; 'D' - Disassemble Memory
                             ;-------------------------------------------------------------------------------

00:0154' C944              :                 cmp     #'D'
00:0156' D037              :                 if      eq
00:0158' 20????            :                  jsr    GetWord
00:015B' B02F              :                  if     cc
00:015D' 20????            :                   jsr   SetStartAddr
00:0160' 20????            :                   jsr   SetEndAddr
00:0163' 20????            :                   jsr   GetWord
00:0166' B005              :                   if    cc
00:0168' 20????            :                    jsr  SetEndAddr
00:016B' 8002              :                   else
00:016D' E6FA              :                    inc  ADDR_E+1
                                               endif

                                               repeat
00:016F' 20????            :                    jsr  NewLine         ; Print the memory address
00:0172' A5F8              :                    lda  ADDR_S+1
00:0174' 20????            :                    jsr  ShowHex2
00:0177' A5F7              :                    lda  ADDR_S+0
00:0179' 20????            :                    jsr  ShowHex2

00:017C' 20????            :                    jsr  Disassemble
00:017F' 20????            :                    jsr  BumpAddr
00:0182' B005              :                    break cs
00:0184' 20????            :                    jsr  CheckEnd
00:0187' 90E6              :                   until cs
00:0189' 4C????            :                   jmp   NewCommand
                                              endif
00:018C' 4C????            :                  jmp    Error
                                             endif

                             ;===============================================================================
                             ; 'F' - Fill
                             ;-------------------------------------------------------------------------------

00:018F' C946              :                 cmp     #'F'
00:0191' D02F              :                 if      eq
00:0193' 20????            :                  jsr    GetWord         ; Extract start address
00:0196' B024              :                  if cc
00:0198' 20????            :                   jsr   SetStartAddr
00:019B' 20????            :                   jsr   GetWord         ; Extract end address
00:019E' B01C              :                   bcs   .FillFail

Portable 65xx Assembler [20.01]

00:01A0' 20????            :                   jsr   SetEndAddr
00:01A3' 20????            :                   jsr   GetByte         ; Extract fill byte
00:01A6' B014              :                   bcs   .FillFail

                                               repeat
00:01A8' A000              :                    ldy  #0              ; Perform the fill
00:01AA' A5FB              :                    lda  TEMP+0
00:01AC' 91F7              :                    sta  (ADDR_S),y

00:01AE' C8                :                    iny
00:01AF' 98                :                    tya
00:01B0' 20????            :                    jsr  BumpAddr        ; Until the end
00:01B3' B005              :                    break cs
00:01B5' 20????            :                    jsr  CheckEnd
00:01B8' 90EE              :                   until cs
00:01BA' 8003              :                  else
00:01BC' 4C????            : .FillFail:        jmp   Error
                                              endif
00:01BF' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'G' - Go
                             ;-------------------------------------------------------------------------------

00:01C2' C947              :                 cmp     #'G'
00:01C4' D022              :                 if      eq
00:01C6' 20????            :                  jsr    GetWord         ; Extract start address
00:01C9' B008              :                  if cc
00:01CB' A5FC              :                   lda   TEMP+1
00:01CD' 48                :                   pha
00:01CE' A5FB              :                   lda   TEMP+0
00:01D0' 48                :                   pha
00:01D1' 8006              :                  else
00:01D3' A5F5              :                   lda   PC_REG+1        ; Push the target address
00:01D5' 48                :                   pha
00:01D6' A5F4              :                   lda   PC_REG+0
00:01D8' 48                :                   pha
                                              endif

00:01D9' A911              :                  lda    #DC1            ; Send XON
00:01DB' 20????            :                  jsr    UartTx

00:01DE' A5F3              :                  lda    P_REG           ; And status flags
00:01E0' 48                :                  pha
00:01E1' A5F0              :                  lda    A_REG           ; Reload A, X and Y
00:01E3' A6F1              :                  ldx    X_REG
00:01E5' A4F2              :                  ldy    Y_REG
00:01E7' 40                :                  rti                    ; Then go to code
                                             endif

                             ;===============================================================================
                             ; 'M' - Show Memory
                             ;-------------------------------------------------------------------------------

Portable 65xx Assembler [20.01]


00:01E8' C94D              :                 cmp     #'M'
00:01EA' D060              :                 if      eq
00:01EC' 20????            :                  jsr    GetWord         ; Extract start address
00:01EF' B058              :                  if     cc
00:01F1' 20????            :                   jsr   SetStartAddr
00:01F4' 20????            :                   jsr   SetEndAddr
00:01F7' 20????            :                   jsr   GetWord         ; Extract end address
00:01FA' B005              :                   if    cc
00:01FC' 20????            :                    jsr  SetEndAddr
00:01FF' 8002              :                   else
00:0201' E6FA              :                    inc  ADDR_E+1        ; Or default to start + 256
                                               endif

                                               repeat
00:0203' 20????            :                    jsr  NewLine         ; Print the memory address
00:0206' A5F8              :                    lda  ADDR_S+1
00:0208' 20????            :                    jsr  ShowHex2
00:020B' A5F7              :                    lda  ADDR_S+0
00:020D' 20????            :                    jsr  ShowHex2

00:0210' A000              :                    ldy  #0              ; Dump 16 bytes of data
                                                repeat
00:0212' 20????            :                     jsr Space
00:0215' B1F7              :                     lda (ADDR_S),Y
00:0217' C8                :                     iny
00:0218' 20????            :                     jsr ShowHex2
00:021B' C010              :                     cpy #16
00:021D' D0F3              :                    until eq

00:021F' 20????            :                    jsr  Space           ; Then show as characters
00:0222' 20????            :                    jsr  Bar
00:0225' A000              :                    ldy  #0
                                                repeat
00:0227' B1F7              :                     lda (ADDR_S),Y
00:0229' C8                :                     iny
00:022A' 20????            :                     jsr IsPrintable
00:022D' B002              :                     if  cc
00:022F' A92E              :                      lda #'.'
                                                 endif
00:0231' 20????            :                     jsr UartTx
00:0234' C010              :                     cpy #16
00:0236' D0EF              :                    until eq
00:0238' 20????            :                    jsr  Bar

00:023B' 98                :                    tya
00:023C' 20????            :                    jsr  BumpAddr
00:023F' B005              :                    break cs
00:0241' 20????            :                    jsr  CheckEnd
00:0244' 90BD              :                   until cs
00:0246' 4C????            :                   jmp   NewCommand
                                              endif
00:0249' 4C????            :                  jmp    Error
                                             endif

Portable 65xx Assembler [20.01]


                             ;===============================================================================
                             ; 'R' - Show Registers
                             ;-------------------------------------------------------------------------------

00:024C' C952              :                 cmp     #'R'
00:024E' D003              :                 if      eq
00:0250' 4C????            :                  jmp    ShowRegisters
                                             endif

                             ;===============================================================================
                             ; 'S' - S19 Record Loader
                             ;-------------------------------------------------------------------------------

00:0253' C953              :                 cmp     #'S'
00:0255' D051              :                 if      eq
00:0257' 20????            :                  jsr    NextChar
00:025A' C931              :                  cmp    #'1'            ; Data record?
00:025C' D02C              :                  if     eq
00:025E' 20????            :                   jsr   GetByte         ; Extract length
00:0261' B03F              :                   bcs   .S19Fail
00:0263' 85F9              :                   sta   ADDR_E+0
00:0265' 20????            :                   jsr   GetWord         ; Extract address
00:0268' B038              :                   bcs   .S19Fail
00:026A' 20????            :                   jsr   SetStartAddr
00:026D' C6F9              :                   dec   ADDR_E+0        ; Reduce count
00:026F' C6F9              :                   dec   ADDR_E+0
00:0271' C6F9              :                   dec   ADDR_E+0

00:0273' A000              :                   ldy   #0
00:0275' 84FA              :                   sty   ADDR_E+1
                                               repeat
00:0277' 20????            :                    jsr  GetByte         ; Extract data byte
00:027A' B026              :                    bcs  .S19Fail
00:027C' A4FA              :                    ldy  ADDR_E+1        ; And save
00:027E' A5FB              :                    lda  TEMP+0
00:0280' 91F7              :                    sta  (ADDR_S),y
00:0282' E6FA              :                    inc  ADDR_E+1
00:0284' C6F9              :                    dec  ADDR_E+0        ; Until line processed
00:0286' D0EF              :                   until eq
00:0288' 801B              :                  else
00:028A' C939              :                   cmp   #'9'
00:028C' D014              :                   if    eq
00:028E' 20????            :                    jsr  GetByte         ; Extract length
00:0291' B00F              :                    bcs  .S19Fail
00:0293' 20????            :                    jsr  GetWord         ; Extract start address
00:0296' B00A              :                    bcs  .S19Fail
00:0298' A5FB              :                    lda  TEMP+0          ; Copy to PC
00:029A' 85F4              :                    sta  PC_REG+0
00:029C' A5FC              :                    lda  TEMP+1
00:029E' 85F5              :                    sta  PC_REG+1
00:02A0' 8003              :                   else
00:02A2' 4C????            : .S19Fail:          jmp  Error
                                               endif

Portable 65xx Assembler [20.01]

                                              endif
00:02A5' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'T' - Trace
                             ;-------------------------------------------------------------------------------

00:02A8' C954              :                 cmp     #'T'
00:02AA' F0034C????        :                 if eq
00:02AF' 20????            :                  jsr    GetWord         ; Extract start address
00:02B2' B008              :                  if cc
00:02B4' A4FB              :                   ldy   TEMP+0          ; And overwrite PC
00:02B6' 84F4              :                   sty   PC_REG+0
00:02B8' A4FC              :                   ldy   TEMP+1
00:02BA' 84F5              :                   sty   PC_REG+1
                                              endif

00:02BC' C92C              :                  cmp    #','
00:02BE' 38                :                  sec
00:02BF' D003              :                  if eq
00:02C1' 20????            :                   jsr   GetWord         ; Extract count
                                              endif
00:02C4' 9007              :                  if cs
00:02C6' A001              :                   ldy   #1              ; Default one step
00:02C8' 84FB              :                   sty   TEMP+0
00:02CA' 88                :                   dey
00:02CB' 84FC              :                   sty   TEMP+1
                                              endif

                             Trace:
00:02CD' 20????            :                  jsr    NewLine         ; Show the current PC
00:02D0' A5F5              :                  lda    PC_REG+1
00:02D2' 85F8              :                  sta    ADDR_S+1
00:02D4' 20????            :                  jsr    ShowHex2
00:02D7' A5F4              :                  lda    PC_REG+0
00:02D9' 85F7              :                  sta    ADDR_S+0
00:02DB' 20????            :                  jsr    ShowHex2

00:02DE' 20????            :                  jsr    Disassemble     ; Disassembly opcode
                                              repeat
00:02E1' E010              :                   cpx   #16             ; .. justify output
00:02E3' B006              :                   break cs
00:02E5' 20????            :                   jsr   Space
00:02E8' E8                :                   inx
00:02E9' 80F6              :                  forever
00:02EB' BA                :                  tsx
00:02EC' 20????            :                  jsr    DumpRegisters   ; .. and show registers

00:02EF' A9F0              :                  lda    #<A_REG         ; Assume accumulator is target
00:02F1' 85F7              :                  sta    ADDR_S+0
00:02F3' A900              :                  lda    #>A_REG
00:02F5' 85F8              :                  sta    ADDR_S+1


Portable 65xx Assembler [20.01]

00:02F7' A000              :                  ldy    #0
00:02F9' B1F4              :                  lda    (PC_REG),y      ; Fetch the next opcode
00:02FB' E6F4              :                  inc    PC_REG+0        ; .. and bump PC
00:02FD' D002              :                  if eq
00:02FF' E6F5              :                   inc   PC_REG+1
                                              endif
00:0301' AA                :                  tax
00:0302' BD????            :                  lda    MODES,X         ; Extract address type
00:0305' 2903              :                  and    #MB_ABS
00:0307' C901              :                  cmp    #MB_ZPG         ; Zero page?
00:0309' D00E              :                  if eq
00:030B' B1F4              :                   lda   (PC_REG),y
00:030D' 85F7              :                   sta   ADDR_S+0
00:030F' 84F8              :                   sty   ADDR_S+1
00:0311' E6F4              :                   inc   PC_REG+0
00:0313' D002              :                   if eq
00:0315' E6F5              :                    inc  PC_REG+1
                                               endif
00:0317' 802C              :                  else
00:0319' C903              :                   cmp   #MB_ABS         ; Absolute ?
00:031B' D016              :                   if eq
00:031D' B1F4              :                    lda  (PC_REG),y
00:031F' 85F7              :                    sta  ADDR_S+0
00:0321' E6F4              :                    inc  PC_REG+0
00:0323' D002              :                    if eq
00:0325' E6F5              :                     inc PC_REG+1
                                                endif
00:0327' B1F4              :                    lda  (PC_REG),y
00:0329' 85F8              :                    sta  ADDR_S+1
00:032B' E6F4              :                    inc  PC_REG+0
00:032D' D002              :                    if eq
00:032F' E6F5              :                     inc PC_REG+1
                                                endif
00:0331' 8012              :                   else
00:0333' C902              :                    cmp  #MB_IMM         ; Immediate?
00:0335' D00E              :                    if eq
00:0337' A5F4              :                     lda PC_REG+0
00:0339' 85F7              :                     sta ADDR_S+0
00:033B' A5F5              :                     lda PC_REG+1
00:033D' 85F8              :                     sta ADDR_S+1
00:033F' E6F4              :                     inc PC_REG+0
00:0341' D002              :                     if eq
00:0343' E6F5              :                      inc PC_REG+1
                                                 endif
                                                endif
                                               endif
                                              endif

00:0345' A908              :                  lda    #MB_XRG         ; Handle X index
00:0347' 3D????            :                  and    MODES,x
00:034A' F01D              :                  if ne
00:034C' 18                :                   clc
00:034D' A5F1              :                   lda   X_REG
00:034F' 65F7              :                   adc   ADDR_S+0

Portable 65xx Assembler [20.01]

00:0351' 85F7              :                   sta   ADDR_S+0
00:0353' 9002              :                   if cs
00:0355' E6F8              :                    inc  ADDR_S+1
                                               endif

00:0357' A909              :                   lda   #MO_ZPX         ; Force wrap around for ZPG,X
00:0359' DD????            :                   cmp   MODES,x
00:035C' D002              :                   if eq
00:035E' 84F8              :                    sty  ADDR_S+1
                                               endif

00:0360' A989              :                   lda   #MO_IZX         ; .. and (ZPG,X)
00:0362' DD????            :                   cmp   MODES,x
00:0365' D002              :                   if eq
00:0367' 84F8              :                    sty  ADDR_S+1
                                               endif
                                              endif

00:0369' A980              :                  lda    #MB_IND         ; Handle indirection
00:036B' 3D????            :                  and    MODES,x
00:036E' F01C              :                  if ne
00:0370' B1F7              :                   lda   (ADDR_S),y      ; Fetch low byte of target
00:0372' 48                :                   pha

                                             .if     __65C02__|__65SC02__
00:0373' E06C              :                   cpx   #$6C            ; JMP (abs)?
00:0375' F002              :                   if ne
00:0377' E07C              :                    cpx  #$7C            ; or JMP (abs,X)?
                                               endif
00:0379' D008              :                   if eq
00:037B' E6F7              :                    inc  ADDR_S+0        ; 65C02 increments properly
00:037D' D002              :                    if eq
00:037F' E6F8              :                     inc ADDR_S+1
                                                endif
00:0381' 8002              :                   else
00:0383' E6F7              :                    inc  ADDR_S+0        ; Otherwise just the low byte
                                               endif
                                             .else
                           -                   inc   ADDR_S+0        ; 6502 bumps just the low byte
                                             .endif

00:0385' B1F7              :                   lda   (ADDR_S),y      ; Fetch high byte of target
00:0387' 85F8              :                   sta   ADDR_S+1        ; And save indirect address
00:0389' 68                :                   pla
00:038A' 85F7              :                   sta   ADDR_S+0
                                              endif

00:038C' A904              :                  lda    #MB_YRG         ; Handle Y index
00:038E' 3D????            :                  and    MODES,x
00:0391' F014              :                  if ne
00:0393' 18                :                   clc
00:0394' A5F2              :                   lda   Y_REG
00:0396' 65F7              :                   adc   ADDR_S+0
00:0398' 85F7              :                   sta   ADDR_S+0

Portable 65xx Assembler [20.01]

00:039A' 9002              :                   if cs
00:039C' E6F8              :                    inc  ADDR_S+1
                                               endif

00:039E' A901              :                   lda   #MB_ZPG         ; Restrict to zero page
00:03A0' 3D????            :                   and   MODES,x
00:03A3' F002              :                   if ne
00:03A5' A4F8              :                    ldy  ADDR_S+1
                                               endif
                                              endif

00:03A7' A940              :                  lda    #MB_REL         ; Relative address?
00:03A9' 3D????            :                  and    MODES,x
00:03AC' F015              :                  if ne
00:03AE' B1F4              :                   lda   (PC_REG),y
00:03B0' 1001              :                   if mi
00:03B2' 88                :                    dey
                                               endif
00:03B3' E6F4              :                   inc   PC_REG+0
00:03B5' D002              :                   if eq
00:03B7' E6F5              :                    inc  PC_REG+1
                                               endif
00:03B9' 18                :                   clc
00:03BA' 65F4              :                   adc   PC_REG+0
00:03BC' 85F9              :                   sta   ADDR_E+0
00:03BE' 98                :                   tya
00:03BF' 65F5              :                   adc   PC_REG+1
00:03C1' 85FA              :                   sta   ADDR_E+1
                                              endif

00:03C3' BC????            :                  ldy    OPCODES,x       ; Recover the opcode index
00:03C6' B9????            :                  lda    EMULATE+1,y
00:03C9' 48                :                  pha
00:03CA' B9????            :                  lda    EMULATE+0,y
00:03CD' 48                :                  pha
00:03CE' A000              :                  ldy    #0
00:03D0' A5F3              :                  lda    P_REG           ; Restore status flags
00:03D2' 48                :                  pha
00:03D3' A5F0              :                  lda    A_REG           ; .. and A
00:03D5' 28                :                  plp
00:03D6' 60                :                  rts                    ; Go to emulation code

                             EMULATE:
00:03D7' ????              :                 .word   EM_ERR-1
00:03D9' ????              :                 .word   EM_ADC-1
00:03DB' ????              :                 .word   EM_AND-1
00:03DD' ????              :                 .word   EM_ASL-1
00:03DF' ????              :                 .word   EM_BBR-1
00:03E1' ????              :                 .word   EM_BBS-1
00:03E3' ????              :                 .word   EM_BCC-1
00:03E5' ????              :                 .word   EM_BCS-1
00:03E7' ????              :                 .word   EM_BEQ-1
00:03E9' ????              :                 .word   EM_BIT-1
00:03EB' ????              :                 .word   EM_BMI-1

Portable 65xx Assembler [20.01]

00:03ED' ????              :                 .word   EM_BNE-1
00:03EF' ????              :                 .word   EM_BPL-1
00:03F1' ????              :                 .word   EM_BRA-1
00:03F3' ????              :                 .word   EM_BRK-1
00:03F5' ????              :                 .word   EM_BVC-1
00:03F7' ????              :                 .word   EM_BVS-1
00:03F9' ????              :                 .word   EM_CLC-1
00:03FB' ????              :                 .word   EM_CLD-1
00:03FD' ????              :                 .word   EM_CLI-1
00:03FF' ????              :                 .word   EM_CLV-1
00:0401' ????              :                 .word   EM_CMP-1
00:0403' ????              :                 .word   EM_CPX-1
00:0405' ????              :                 .word   EM_CPY-1
00:0407' ????              :                 .word   EM_DEC-1
00:0409' ????              :                 .word   EM_DEX-1
00:040B' ????              :                 .word   EM_DEY-1
00:040D' ????              :                 .word   EM_EOR-1
00:040F' ????              :                 .word   EM_INC-1
00:0411' ????              :                 .word   EM_INX-1
00:0413' ????              :                 .word   EM_INY-1
00:0415' ????              :                 .word   EM_JMP-1
00:0417' ????              :                 .word   EM_JSR-1
00:0419' ????              :                 .word   EM_LDA-1
00:041B' ????              :                 .word   EM_LDX-1
00:041D' ????              :                 .word   EM_LDY-1
00:041F' ????              :                 .word   EM_LSR-1
00:0421' ????              :                 .word   EM_NOP-1
00:0423' ????              :                 .word   EM_ORA-1
00:0425' ????              :                 .word   EM_PHA-1
00:0427' ????              :                 .word   EM_PHP-1
00:0429' ????              :                 .word   EM_PHX-1
00:042B' ????              :                 .word   EM_PHY-1
00:042D' ????              :                 .word   EM_PLA-1
00:042F' ????              :                 .word   EM_PLP-1
00:0431' ????              :                 .word   EM_PLX-1
00:0433' ????              :                 .word   EM_PLY-1
00:0435' ????              :                 .word   EM_RMB-1
00:0437' ????              :                 .word   EM_ROL-1
00:0439' ????              :                 .word   EM_ROR-1
00:043B' ????              :                 .word   EM_RTI-1
00:043D' ????              :                 .word   EM_RTS-1
00:043F' ????              :                 .word   EM_SBC-1
00:0441' ????              :                 .word   EM_SEC-1
00:0443' ????              :                 .word   EM_SED-1
00:0445' ????              :                 .word   EM_SEI-1
00:0447' ????              :                 .word   EM_SMB-1
00:0449' ????              :                 .word   EM_STA-1
00:044B' ????              :                 .word   EM_STP-1
00:044D' ????              :                 .word   EM_STX-1
00:044F' ????              :                 .word   EM_STY-1
00:0451' ????              :                 .word   EM_STZ-1
00:0453' ????              :                 .word   EM_TAX-1
00:0455' ????              :                 .word   EM_TAY-1
00:0457' ????              :                 .word   EM_TSB-1

Portable 65xx Assembler [20.01]

00:0459' ????              :                 .word   EM_TRB-1
00:045B' ????              :                 .word   EM_TXS-1
00:045D' ????              :                 .word   EM_TXA-1
00:045F' ????              :                 .word   EM_TXS-1
00:0461' ????              :                 .word   EM_TYA-1
00:0463' ????              :                 .word   EM_WAI-1

                             ;-------------------------------------------------------------------------------

                             EM_CLC:
00:0465' 18                :                  clc
00:0466' 4C????            :                  jmp    SaveP

                             EM_CLD:
00:0469' D8                :                  cld
00:046A' 4C????            :                  jmp    SaveP

                             EM_CLI:
00:046D' 58                :                  cli
00:046E' 4C????            :                  jmp    SaveP

                             EM_CLV:
00:0471' B8                :                  clv
00:0472' 4C????            :                  jmp    SaveP

                             EM_SEC:
00:0475' 38                :                  sec
00:0476' 4C????            :                  jmp    SaveP

                             EM_SED:
00:0479' F8                :                  sed
00:047A' 4C????            :                  jmp    SaveP

                             EM_SEI:
00:047D' 78                :                  sei
00:047E' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_ADC:
00:0481' 71F7              :                  adc    (ADDR_S),y
00:0483' 4C????            :                  jmp    SaveAP

                             EM_SBC:
00:0486' F1F7              :                  sbc    (ADDR_S),y
00:0488' 4C????            :                  jmp    SaveAP

                             ;-------------------------------------------------------------------------------

                             EM_CPX:
00:048B' A5F1              :                  lda    X_REG
00:048D' 2C                :                  .byte  $2c             ; BIT trick

                             EM_CPY:

Portable 65xx Assembler [20.01]

00:048E' A5F2              :                  lda    Y_REG

                             EM_CMP:
00:0490' D1F7              :                  cmp    (ADDR_S),y
00:0492' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_AND:
00:0495' 31F7              :                  and    (ADDR_S),y
00:0497' 4C????            :                  jmp    SaveAP

                             EM_EOR:
00:049A' 51F7              :                  eor    (ADDR_S),y
00:049C' 4C????            :                  jmp    SaveAP

                             EM_ORA:
00:049F' 31F7              :                  and    (ADDR_S),y
00:04A1' 4C????            :                  jmp    SaveAP

                             EM_BIT:
                                             .if     __65C02__|__65SC02__
00:04A4' E089              :                  cpx    #$89            ; Immediate does not affect NV
00:04A6' F00C              :                  if ne
00:04A8' 48                :                   pha
00:04A9' B1F7              :                   lda   (ADDR_S),y      ; Extract NV bits from value
00:04AB' 45F3              :                   eor   P_REG
00:04AD' 29C0              :                   and   #$c0
00:04AF' 45F3              :                   eor   P_REG
00:04B1' 85F3              :                   sta   P_REG
00:04B3' 68                :                   pla
                                              endif
                                             .endif
00:04B4' 31F7              :                  and    (ADDR_S),y      ; Handle Z flag
00:04B6' 08                :                  php
00:04B7' 68                :                  pla
00:04B8' 45F3              :                  eor    P_REG
00:04BA' 2902              :                  and    #$02
00:04BC' 45F3              :                  eor    P_REG
00:04BE' 85F3              :                  sta    P_REG
00:04C0' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_ASL:
00:04C3' B1F7              :                  lda    (ADDR_S),y
00:04C5' 0A                :                  asl    a
00:04C6' 91F7              :                  sta    (ADDR_S),y
00:04C8' 4C????            :                  jmp    SaveP

                             EM_LSR:
00:04CB' B1F7              :                  lda    (ADDR_S),y
00:04CD' 4A                :                  lsr    a
00:04CE' 91F7              :                  sta    (ADDR_S),y

Portable 65xx Assembler [20.01]

00:04D0' 4C????            :                  jmp    SaveP

                             EM_ROL:
00:04D3' B1F7              :                  lda    (ADDR_S),y
00:04D5' 2A                :                  rol    a
00:04D6' 91F7              :                  sta    (ADDR_S),y
00:04D8' 4C????            :                  jmp    SaveP

                             EM_ROR:
00:04DB' B1F7              :                  lda    (ADDR_S),y
00:04DD' 6A                :                  ror    a
00:04DE' 91F7              :                  sta    (ADDR_S),y
00:04E0' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_DEC:
00:04E3' B1F7              :                  lda    (ADDR_S),y
00:04E5' AA                :                  tax
00:04E6' CA                :                  dex
00:04E7' 8A                :                  txa
00:04E8' 91F7              :                  sta    (ADDR_S),y
00:04EA' 4C????            :                  jmp    SaveP

                             EM_DEX:
00:04ED' C6F1              :                  dec    X_REG
00:04EF' 4C????            :                  jmp    SaveP

                             EM_DEY:
00:04F2' C6F2              :                  dec    Y_REG
00:04F4' 4C????            :                  jmp    SaveP

                             EM_INC:
00:04F7' B1F7              :                  lda    (ADDR_S),y
00:04F9' AA                :                  tax
00:04FA' E8                :                  inx
00:04FB' 8A                :                  txa
00:04FC' 91F7              :                  sta    (ADDR_S),y
00:04FE' 4C????            :                  jmp    SaveP

                             EM_INX:
00:0501' E6F1              :                  inc    X_REG
00:0503' 4C????            :                  jmp    SaveP

                             EM_INY:
00:0506' E6F2              :                  inc    Y_REG
00:0508' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_BCC:
00:050B' 901C              :                  bcc    EM_BRA
00:050D' 4C????            :                  jmp    SaveNone


Portable 65xx Assembler [20.01]

                             EM_BCS:
00:0510' B017              :                  bcs    EM_BRA
00:0512' 4C????            :                  jmp    SaveNone

                             EM_BEQ:
00:0515' F012              :                  beq    EM_BRA
00:0517' 4C????            :                  jmp    SaveNone

                             EM_BMI:
00:051A' 300D              :                  bmi    EM_BRA
00:051C' 4C????            :                  jmp    SaveNone

                             EM_BNE:
00:051F' D008              :                  bne    EM_BRA
00:0521' 4C????            :                  jmp    SaveNone

                             EM_BPL:
00:0524' 1003              :                  bpl    EM_BRA
00:0526' 4C????            :                  jmp    SaveNone

                             EM_BRA:
00:0529' A5F9              :                  lda    ADDR_E+0
00:052B' 85F4              :                  sta    PC_REG+0
00:052D' A5FA              :                  lda    ADDR_E+1
00:052F' 85F5              :                  sta    PC_REG+1
00:0531' 4C????            :                  jmp    SaveNone

                             EM_BVC:
00:0534' 50F3              :                  bvc    EM_BRA
00:0536' 4C????            :                  jmp    SaveNone

                             EM_BVS:
00:0539' 70EE              :                  bvs    EM_BRA
00:053B' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_JSR:
00:053E' A5F4              :                  lda    PC_REG+0        ; Back up
00:0540' D002              :                  if eq
00:0542' C6F5              :                   dec   PC_REG+1
                                              endif
00:0544' C6F4              :                  dec    PC_REG+0
00:0546' A5F5              :                  lda    PC_REG+1        ; And push PC
00:0548' 48                :                  pha
00:0549' A5F4              :                  lda    PC_REG+0
00:054B' 48                :                  pha

                             EM_JMP:
00:054C' A5F7              :                  lda    ADDR_S+0        ; Set PC to target address
00:054E' 85F4              :                  sta    PC_REG+0
00:0550' A5F8              :                  lda    ADDR_S+1
00:0552' 85F5              :                  sta    PC_REG+1
00:0554' 4C????            :                  jmp    SaveNone

Portable 65xx Assembler [20.01]


                             ;-------------------------------------------------------------------------------

                             EM_LDA:
00:0557' B1F7              :                  lda    (ADDR_S),y
00:0559' 4C????            :                  jmp    SaveAP

                             EM_LDX:
00:055C' B1F7              :                  lda    (ADDR_S),y
00:055E' 85F1              :                  sta    X_REG
00:0560' 4C????            :                  jmp    SaveP

                             EM_LDY:
00:0563' B1F7              :                  lda    (ADDR_S),y
00:0565' 85F2              :                  sta    Y_REG
00:0567' 4C????            :                  jmp    SaveP

                             EM_STA:
00:056A' 91F7              :                  sta    (ADDR_S),y
00:056C' 4C????            :                  jmp    SaveNone

                             EM_STX:
00:056F' A5F1              :                  lda    X_REG
00:0571' 4C????            :                  JMP    EM_STA

                             EM_STY:
00:0574' A5F2              :                  lda    Y_REG
00:0576' 4C????            :                  jmp    EM_STA

                             EM_STZ:
00:0579' A900              :                  lda    #0
00:057B' 4C????            :                  jmp    EM_STA

                             ;-------------------------------------------------------------------------------

                             EM_PHA:
00:057E' 48                :                  pha
00:057F' 4C????            :                  jmp    SaveNone

                             EM_PHP:
00:0582' A5F3              :                  lda    P_REG
00:0584' 48                :                  pha
00:0585' 4C????            :                  jmp    SaveNone

                             EM_PHX:
00:0588' A5F1              :                  lda    X_REG
00:058A' 48                :                  pha
00:058B' 4C????            :                  jmp    SaveNone

                             EM_PHY:
00:058E' A5F2              :                  lda    Y_REG
00:0590' 48                :                  pha
00:0591' 4C????            :                  jmp    SaveNone


Portable 65xx Assembler [20.01]

                             EM_PLA:
00:0594' 68                :                  pla
00:0595' 4C????            :                  jmp    SaveAP

                             EM_PLP:
00:0598' 68                :                  pla
00:0599' 0930              :                  ora    #$30
00:059B' 85F3              :                  sta    P_REG
00:059D' 4C????            :                  jmp    SaveNone

                             EM_PLX:
00:05A0' 68                :                  pla
00:05A1' 85F1              :                  sta    X_REG
00:05A3' 4C????            :                  jmp    SaveP

                             EM_PLY:
00:05A6' 68                :                  pla
00:05A7' 85F2              :                  sta    Y_REG
00:05A9' 4C????            :                  jmp    SaveP

                             ;-------------------------------------------------------------------------------

                             EM_NOP:
00:05AC' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_BRK:
00:05AF' 08                :                  php
00:05B0' 68                :                  pla
00:05B1' 0904              :                  ora    #(1<<2)         ; Set interrupt disable bit
00:05B3' 48                :                  pha
00:05B4' A5F5              :                  lda    PC_REG+1        ; Push instruction address
00:05B6' 48                :                  pha
00:05B7' A5F4              :                  lda    PC_REG+0
00:05B9' 48                :                  pha
00:05BA' ADFEFF            :                  lda    $fffe           ; Load vector address
00:05BD' 85F4              :                  sta    PC_REG+0
00:05BF' ADFFFF            :                  lda    $ffff
00:05C2' 85F5              :                  sta    PC_REG+1
00:05C4' 4C????            :                  jmp    SaveNone

                             EM_RTI:
00:05C7' 68                :                  pla
00:05C8' 85F4              :                  sta    PC_REG+0
00:05CA' 68                :                  pla
00:05CB' 85F5              :                  sta    PC_REG+1
00:05CD' 68                :                  pla
00:05CE' 0930              :                  ora    #$30
00:05D0' 85F3              :                  sta    P_REG
00:05D2' 4C????            :                  jmp    SaveNone

                             EM_RTS:
00:05D5' 68                :                  pla

Portable 65xx Assembler [20.01]

00:05D6' 85F4              :                  sta    PC_REG+0
00:05D8' 68                :                  pla
00:05D9' 85F5              :                  sta    PC_REG+1
00:05DB' E6F4              :                  inc    PC_REG+0
00:05DD' D002              :                  if eq
00:05DF' E6F5              :                   inc   PC_REG+1
                                              endif
00:05E1' 4C????            :                  jmp    SaveNone

                             EM_STP:
00:05E4' 4C????            :                  jmp    SaveNone

                             EM_WAI:
00:05E7' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             EM_TAX:
00:05EA' A5F0              :                  lda    A_REG
00:05EC' 85F1              :                  sta    X_REG
00:05EE' 4C????            :                  jmp    SaveP

                             EM_TAY:
00:05F1' A5F0              :                  lda    A_REG
00:05F3' 85F2              :                  sta    Y_REG
00:05F5' 4C????            :                  jmp    SaveP

                             EM_TSX:
00:05F8' BA                :                  tsx
00:05F9' 86F1              :                  stx    X_REG
00:05FB' 4C????            :                  jmp    SaveP

                             EM_TXA:
00:05FE' A5F1              :                  lda    X_REG
00:0600' 4C????            :                  jmp    SaveAP

                             EM_TXS:
00:0603' A6F1              :                  ldx    X_REG
00:0605' 9A                :                  txs
00:0606' 4C????            :                  jmp    SaveNone

                             EM_TYA:
00:0609' A5F2              :                  lda    Y_REG
00:060B' 4C????            :                  jmp    SaveAP

                             ;-------------------------------------------------------------------------------

                             EM_BBR:
00:060E' 8A                :                  txa                    ; Get bit number
00:060F' 2970              :                  and    #$70
00:0611' 4A                :                  lsr    a
00:0612' 4A                :                  lsr    a
00:0613' 4A                :                  lsr    a
00:0614' 4A                :                  lsr    a

Portable 65xx Assembler [20.01]

00:0615' AA                :                  tax
00:0616' BD????            :                  lda    BITS,x          ; Map to bit mask
00:0619' 31F7              :                  and    (ADDR_S),y      ; And test value
00:061B' D06B              :                  bne    SaveNone
00:061D' 4C????            :                  jmp    EM_BRA

                             EM_BBS:
00:0620' 8A                :                  txa                    ; Get bit number
00:0621' 2970              :                  and    #$70
00:0623' 4A                :                  lsr    a
00:0624' 4A                :                  lsr    a
00:0625' 4A                :                  lsr    a
00:0626' 4A                :                  lsr    a
00:0627' AA                :                  tax
00:0628' BD????            :                  lda    BITS,x          ; Map to bit mask
00:062B' 31F7              :                  and    (ADDR_S),y      ; And test value
00:062D' F059              :                  beq    SaveNone
00:062F' 4C????            :                  jmp    EM_BRA

                             EM_RMB:
00:0632' 8A                :                  txa                    ; Get bit number
00:0633' 2970              :                  and    #$70
00:0635' 4A                :                  lsr    a
00:0636' 4A                :                  lsr    a
00:0637' 4A                :                  lsr    a
00:0638' 4A                :                  lsr    a
00:0639' AA                :                  tax
00:063A' BD????            :                  lda    MASK,x          ; Map to bit mask
00:063D' 31F7              :                  and    (ADDR_S),y
00:063F' 91F7              :                  sta    (ADDR_S),y
00:0641' 4C????            :                  jmp    SaveNone

                             EM_SMB:
00:0644' 8A                :                  txa                    ; Get bit number
00:0645' 2970              :                  and    #$70
00:0647' 4A                :                  lsr    a
00:0648' 4A                :                  lsr    a
00:0649' 4A                :                  lsr    a
00:064A' 4A                :                  lsr    a
00:064B' AA                :                  tax
00:064C' BD????            :                  lda    BITS,x          ; Map to bit mask
00:064F' 11F7              :                  ora    (ADDR_S),y
00:0651' 91F7              :                  sta    (ADDR_S),y
00:0653' 4C????            :                  jmp    SaveNone

                             EM_TRB:
00:0656' 48                :                  pha
00:0657' 31F7              :                  and    (ADDR_S),Y
00:0659' 08                :                  php
00:065A' 68                :                  pla
00:065B' 45F3              :                  eor    P_REG
00:065D' 2902              :                  and    #1<<1
00:065F' 45F3              :                  eor    P_REG
00:0661' 85F3              :                  sta    P_REG

Portable 65xx Assembler [20.01]

00:0663' 68                :                  pla
00:0664' 49FF              :                  eor    #$ff
00:0666' 31F7              :                  and    (ADDR_S),y
00:0668' 91F7              :                  sta    (ADDR_S),y
00:066A' 4C????            :                  jmp    SaveNone

                             EM_TSB:
00:066D' 48                :                  pha
00:066E' 31F7              :                  and    (ADDR_S),Y
00:0670' 08                :                  php
00:0671' 68                :                  pla
00:0672' 45F3              :                  eor    P_REG
00:0674' 2902              :                  and    #1<<1
00:0676' 45F3              :                  eor    P_REG
00:0678' 85F3              :                  sta    P_REG
00:067A' 68                :                  pla
00:067B' 11F7              :                  ora    (ADDR_S),y
00:067D' 91F7              :                  sta    (ADDR_S),y
00:067F' 4C????            :                  jmp    SaveNone

                             ;-------------------------------------------------------------------------------

                             SaveAP:
00:0682' 85F0              :                  sta    A_REG           ; Save the updated A
                             SaveP:
00:0684' 08                :                  php                    ; Save the updated flags
00:0685' 68                :                  pla
00:0686' 85F3              :                  sta    P_REG
                             SaveNone:
00:0688' A5FB              :                  lda    TEMP+0          ; Repeat as instructed
00:068A' D002              :                  if eq
00:068C' C6FC              :                   dec   TEMP+1
                                              endif
00:068E' C6FB              :                  dec    TEMP+0

00:0690' A5FB              :                  lda    TEMP+0
00:0692' 05FC              :                  ora    TEMP+1
00:0694' F003              :                  if ne
00:0696' 4C????            :                   jmp   Trace
                                              endif

                             EM_ERR:
00:0699' 4C????            :                  jmp    NewCommand
                                             endif

                             ;===============================================================================
                             ; 'W' - Write Memory
                             ;-------------------------------------------------------------------------------

00:069C' C957              :                 cmp     #'W'
00:069E' D020              :                 if      eq
00:06A0' 20????            :                  jsr    GetWord         ; Get the target address
00:06A3' B018              :                  if     cc
00:06A5' 20????            :                   jsr   SetStartAddr    ; Copy to start address

Portable 65xx Assembler [20.01]

00:06A8' 20????            :                   jsr   GetByte         ; Get the value
00:06AB' B010              :                   if    cc
00:06AD' A000              :                    ldy  #0              ; Write to memory
00:06AF' A5FB              :                    lda  TEMP+0
00:06B1' 91F7              :                    sta  (ADDR_S),Y
00:06B3' A901              :                    lda  #1              ; Increment address
00:06B5' 20????            :                    jsr  BumpAddr
00:06B8' A957              :                    lda  #'W'            ; Create prompt for next byte
00:06BA' 4C????            :                    jmp  SetPrompt
                                               endif
                                              endif
00:06BD' 4C????            :                  jmp    Error           ; Handle syntax errors
                                             endif

                             ;===============================================================================
                             ; '?' - Display Help
                             ;-------------------------------------------------------------------------------

00:06C0' C93F              :                 cmp     #'?'
00:06C2' D004              :                 if      eq
00:06C4' A230              :                  ldx    #HLP_STR
00:06C6' 8002              :                 else
00:06C8' A22C              : Error:           ldx    #ERR_STR
                                             endif
00:06CA' 20????            :                 jsr     ShowString
00:06CD' 4C????            :                 jmp     NewCommand

                             ;===============================================================================
                             ;-------------------------------------------------------------------------------

                             SetStartAddr:
00:06D0' A5FB              :                 lda     TEMP+0
00:06D2' 85F7              :                 sta     ADDR_S+0
00:06D4' A5FC              :                 lda     TEMP+1
00:06D6' 85F8              :                 sta     ADDR_S+1
00:06D8' 60                :                 rts

                             SetEndAddr:
00:06D9' A5FB              :                 lda     TEMP+0
00:06DB' 85F9              :                 sta     ADDR_E+0
00:06DD' A5FC              :                 lda     TEMP+1
00:06DF' 85FA              :                 sta     ADDR_E+1
00:06E1' 60                :                 rts

                             BumpAddr:
00:06E2' 18                :                 clc
00:06E3' 65F7              :                 adc     ADDR_S+0
00:06E5' 85F7              :                 sta     ADDR_S+0
00:06E7' A900              :                 lda     #0
00:06E9' 65F8              :                 adc     ADDR_S+1
00:06EB' 85F8              :                 sta     ADDR_S+1
00:06ED' 60                :                 rts

                             CheckEnd:

Portable 65xx Assembler [20.01]

00:06EE' A5F8              :                 lda     ADDR_S+1
00:06F0' C5FA              :                 cmp     ADDR_E+1
00:06F2' 9006              :                 if      cs
00:06F4' D004              :                  if     eq
00:06F6' A5F7              :                   lda   ADDR_S+0
00:06F8' C5F9              :                   cmp   ADDR_E+0
                                              endif
                                             endif
00:06FA' 60                :                 rts

                             ; Create a prompt string in the command buffer for the command in A using the
                             ; current value of the starting address.

                             SetPrompt:
00:06FB' A200              :                 ldx     #0              ; Clear buffer and add command letter
00:06FD' 20????            :                 jsr     AppendChar
00:0700' A920              :                 lda     #' '            ; Then a space
00:0702' 20????            :                 jsr     AppendChar

00:0705' A5F8              :                 lda     ADDR_S+1        ; Followed by the address
00:0707' 20????            :                 jsr     AppendHex2
00:070A' A5F7              :                 lda     ADDR_S+0
00:070C' 20????            :                 jsr     AppendHex2
00:070F' A920              :                 lda     #' '            ; And another space
00:0711' 20????            :                 jsr     AppendChar
00:0714' 4C????            :                 jmp     RptCommand      ; Then output it

                             ; Convert the byte in A into hexadecimal digits and append to the command buffer.

                             AppendHex2:
00:0717' 48                :                 pha
00:0718' 4A                :                 lsr     a
00:0719' 4A                :                 lsr     a
00:071A' 4A                :                 lsr     a
00:071B' 4A                :                 lsr     a
00:071C' 20????            :                 jsr     AppendHex
00:071F' 68                :                 pla
                             AppendHex:
00:0720' 20????            :                 jsr     ToHex

                             ; Append the character in A to the command buffer to create the next prompt
                             ; string.

                             AppendChar:
00:0723' 9D0402            :                 sta     COMMAND,x
00:0726' E8                :                 inx
00:0727' 86F6              :                 stx     CMD_LEN
00:0729' 60                :                 rts

                             ;===============================================================================
                             ; Parsing Utilities
                             ;-------------------------------------------------------------------------------

                             ; Get the next characater from the command buffer indicated by the X register

Portable 65xx Assembler [20.01]

                             ; and convert it to UPPER case. If the carry is set then the end of the buffer
                             ; has been reached.

                             NextChar:
00:072A' E4F6              :                 cpx     CMD_LEN         ; Reached end of buffer>
00:072C' 9003              :                 if      cs
00:072E' A900              :                  lda    #0
00:0730' 60                :                  rts                    ; Yes, return with C=1
                                             endif
00:0731' BD0402            :                 lda     COMMAND,X       ; No, fetch a character
00:0734' E8                :                 inx

                             ; Convert the character in A to upper case.

                             ToUpper:
00:0735' C961              :                 cmp     #'a'            ; Between 'a'
00:0737' 9006              :                 if      cs
00:0739' C97B              :                  cmp    #'z'+1          ; .. and 'z'?
00:073B' B002              :                  if     cc
00:073D' 295F              :                   and   #$5f            ; Yes, convert
                                              endif
                                             endif
00:073F' 18                :                 clc                     ; Ensure C=0
00:0740' 60                :                 rts

                             ; Fetch the next characters from the command buffer ignoring spaces.

                             SkipSpaces:
                                             repeat
00:0741' 20????            :                  jsr    NextChar        ; Fetch a character?
00:0744' B005              :                  break  cs              ; Reached the end?
00:0746' C920              :                  cmp    #' '            ; A space to ignore?
00:0748' 18                :                  clc
00:0749' F0F6              :                 until   ne
00:074B' 60                :                 rts                     ; Done

                             ; Parse a word from the command buffer and store it in TEMP. Return if the
                             ; carry set if there is a syntax error.

                             GetWord:
00:074C' A004              :                 ldy     #4              ; Set maximim number of nybbles
00:074E' D002              :                 bne     GetByte+2

                             ; Parse a word from the command buffer and store it in TEMP. Return if the
                             ; carry set if there is a syntax error.

                             GetByte:
00:0750' A002              :                 ldy     #2              ; Set maximum number of nybble
00:0752' 84FD              :                 sty     COUNT

                                             .if     __65C02__|__65SC02__
00:0754' 64FB              :                 stz     TEMP+0          ; Clear conversion area
00:0756' 64FC              :                 stz     TEMP+1
                                             .else

Portable 65xx Assembler [20.01]

                           -                 ldy     #0
                           -                 sty     TEMP+0          ; Clear conversion area
                           -                 sty     TEMP+1
                                             .endif

00:0758' 20????            :                 jsr     SkipSpaces      ; Fetch first character
00:075B' 20????            :                 jsr     GetNybble       ; And try to convert
00:075E' 9001              :                 if      cs
00:0760' 60                :                  rts                    ; Syntax error
                                             endif
                                             repeat
00:0761' 06FB              :                  asl    TEMP+0          ; Fold into the result
00:0763' 26FC              :                  rol    TEMP+1
00:0765' 06FB              :                  asl    TEMP+0
00:0767' 26FC              :                  rol    TEMP+1
00:0769' 06FB              :                  asl    TEMP+0
00:076B' 26FC              :                  rol    TEMP+1
00:076D' 06FB              :                  asl    TEMP+0
00:076F' 26FC              :                  rol    TEMP+1
00:0771' 05FB              :                  ora    TEMP+0
00:0773' 85FB              :                  sta    TEMP+0

00:0775' C6FD              :                  dec    COUNT           ; Reach maximum length?
00:0777' F008              :                  break  eq

00:0779' 20????            :                  jsr    NextChar        ; Try for another nybble
00:077C' 20????            :                  jsr    GetNybble
00:077F' 90E0              :                 until   cs
00:0781' 18                :                 clc                     ; Conversion sucessfull
00:0782' 60                :                 rts

                             ; Try to parse a nybble from the command line. If not a valid hex digit then
                             ; return with the carry set.

                             GetNybble:
00:0783' 20????            :                 jsr     IsHex           ; Got a hex digit?
00:0786' 900A              :                 if      cs
00:0788' C941              :                  cmp    #'A'            ; Handle letters
00:078A' 9002              :                  if     cs
00:078C' E907              :                   sbc   #7
                                              endif
00:078E' 290F              :                  and    #$0f            ; Strip out nybble
00:0790' 18                :                  clc                    ; Done
00:0791' 60                :                  rts
                                             endif
00:0792' 38                :                 sec                     ; Set carry -- not hex
00:0793' 60                :                 rts

                             ; Return with the carry set of the character in A is a digit or 'A' thru 'F'.

                             IsHex:
00:0794' C93A              :                 cmp     #'9'+1
00:0796' B003              :                 if      cc
00:0798' C930              :                  cmp    #'0'

Portable 65xx Assembler [20.01]

00:079A' 60                :                  rts
                                             endif
00:079B' C947              :                 cmp     #'F'+1
00:079D' B003              :                 if      cc
00:079F' C941              :                  cmp    #'A'
00:07A1' 60                :                  rts
                                             endif
00:07A2' 18                :                 clc
00:07A3' 60                :                 rts

                             ; Return with the carry set of the character in A is not printable.

                             IsPrintable:
00:07A4' C920              :                 cmp     #' '
00:07A6' 9006              :                 if      cs
00:07A8' C97F              :                  cmp    #DEL
00:07AA' B002              :                  if     CC
00:07AC' 38                :                   sec
00:07AD' 60                :                   rts
                                              endif
                                             endif
00:07AE' 18                :                 clc
00:07AF' 60                :                 rts

                             ;===============================================================================
                             ; Register Dump
                             ;-------------------------------------------------------------------------------

                             ; Dump all the save registers and the SP which is passed in X

                             DumpRegisters:
00:07B0' 8A                :                 txa                     ; Save SP
00:07B1' 48                :                 pha

00:07B2' A220              :                 ldx     #A_STR          ; Display A
00:07B4' 20????            :                 jsr     ShowString
00:07B7' A5F0              :                 lda     A_REG
00:07B9' 20????            :                 jsr     ShowHex2

00:07BC' A224              :                 ldx     #X_STR          ; Display X
00:07BE' 20????            :                 jsr     ShowString
00:07C1' A5F1              :                 lda     X_REG
00:07C3' 20????            :                 jsr     ShowHex2

00:07C6' A228              :                 ldx     #Y_STR          ; Display Y
00:07C8' 20????            :                 jsr     ShowString
00:07CB' A5F2              :                 lda     Y_REG
00:07CD' 20????            :                 jsr     ShowHex2

00:07D0' A21C              :                 ldx     #P_STR          ; Display P
00:07D2' 20????            :                 jsr     ShowString
00:07D5' A207              :                 ldx     #7
                                             repeat
00:07D7' A02E              :                  ldy    #'.'

Portable 65xx Assembler [20.01]

00:07D9' BD????            :                  lda    BITS,x
00:07DC' 24F3              :                  bit    P_REG
00:07DE' F003              :                  if     ne
00:07E0' BC????            :                   ldy   FLAG,x
                                              endif
00:07E3' 98                :                  tya
00:07E4' 20????            :                  jsr    UartTx
00:07E7' CA                :                  dex
00:07E8' 10ED              :                 until mi

00:07EA' A217              :                 ldx     #SP_STR         ; Display SP
00:07EC' 20????            :                 jsr     ShowString
00:07EF' 68                :                 pla
00:07F0' 4C????            :                 jmp     ShowHex2

                             ;===============================================================================
                             ; Disassembly
                             ;-------------------------------------------------------------------------------

                             Disassemble:
00:07F3' A5FB              :                 lda     TEMP+0          ; Save temporary area
00:07F5' 48                :                 pha
00:07F6' A5FC              :                 lda     TEMP+1
00:07F8' 48                :                 pha

00:07F9' 20????            :                 jsr     Space
00:07FC' A000              :                 ldy     #0              ; Fetch the opcode
00:07FE' B1F7              :                 lda     (ADDR_S),y
00:0800' AA                :                 tax
00:0801' 20????            :                 jsr     ShowHex2        ; .. and display it

00:0804' 20????            :                 jsr     Space
00:0807' BD????            :                 lda     MODES,x         ; Fetch the mode
00:080A' 48                :                 pha                     ; And save some copies
00:080B' 48                :                 pha
00:080C' 2943              :                 and     #MB_REL|MB_ABS  ; Show second byte if relative,
00:080E' F008              :                 if      ne              ; .. zero page, immediate or absolute
00:0810' C8                :                  iny
00:0811' B1F7              :                  lda    (ADDR_S),y
00:0813' 20????            :                  jsr    ShowHex2
00:0816' 8003              :                 else
00:0818' 20????            :                  jsr    Space2
                                             endif

00:081B' 20????            :                 jsr     Space
00:081E' 68                :                 pla                     ; Show third byte
                                             .if     __65C02__
00:081F' C961              :                 cmp     #MO_BRL         ; .. if bit relative
00:0821' F006              :                 beq     .Skip
                                             .endif
00:0823' 2903              :                 and     #MB_ABS         ; .. or absolute
00:0825' C903              :                 cmp     #MB_ABS
00:0827' D008              :                 if      eq
00:0829' C8                : .Skip:           iny

Portable 65xx Assembler [20.01]

00:082A' B1F7              :                  lda    (ADDR_S),y
00:082C' 20????            :                  jsr    ShowHex2
00:082F' 8003              :                 else
00:0831' 20????            :                  jsr    Space2
                                             endif

00:0834' C8                :                 iny                     ; Save the byte count
00:0835' 84FD              :                 sty     COUNT

00:0837' 20????            :                 jsr     Space
00:083A' A000              :                 ldy     #0              ; Fetch the opcode
00:083C' B1F7              :                 lda     (ADDR_S),y
00:083E' AA                :                 tax
00:083F' BD????            :                 lda     OPCODES,x
00:0842' AA                :                 tax
00:0843' BD????            :                 lda     MNEMONICS+1,x
00:0846' 85FB              :                 sta     TEMP
00:0848' BD????            :                 lda     MNEMONICS+0,x
00:084B' 20????            :                 jsr     ExtractLetter
00:084E' 20????            :                 jsr     ExtractLetter
00:0851' 20????            :                 jsr     ExtractLetter
00:0854' 20????            :                 jsr     Space
00:0857' A204              :                 ldx     #4

                                             .if     __65C02__
00:0859' 68                :                 pla
00:085A' 48                :                 pha
00:085B' 2920              :                 and     #MB_BIT
00:085D' F016              :                 if      ne
00:085F' A000              :                  ldy    #0
00:0861' B1F7              :                  lda    (ADDR_S),y
00:0863' 2970              :                  and    #$70
00:0865' 4A                :                  lsr    a
00:0866' 4A                :                  lsr    a
00:0867' 4A                :                  lsr    a
00:0868' 4A                :                  lsr    a
00:0869' 0930              :                  ora    #'0'
00:086B' 20????            :                  jsr    UartTx
00:086E' A92C              :                  lda    #','
00:0870' 20????            :                  jsr    UartTx
00:0873' E8                :                  inx
00:0874' E8                :                  inx
                                             endif
                                             .endif

00:0875' 68                :                 pla                     ; Indirect mode?
00:0876' 48                :                 pha
00:0877' 1006              :                 if      mi
00:0879' A928              :                  lda    #'('
00:087B' 20????            :                  jsr    UartTx
00:087E' E8                :                  inx
                                             endif

00:087F' 68                :                 pla                     ; Has an address?

Portable 65xx Assembler [20.01]

00:0880' 48                :                 pha
00:0881' 2903              :                 and     #MB_ABS
00:0883' F028              :                 if      ne
00:0885' 48                :                  pha
00:0886' C902              :                  cmp    #MB_IMM         ; Immediate?
00:0888' D006              :                  if     eq
00:088A' A923              :                   lda   #'#'
00:088C' 20????            :                   jsr   UartTx
00:088F' E8                :                   inx
                                              endif
00:0890' A924              :                  lda    #'$'
00:0892' 20????            :                  jsr    UartTx
00:0895' E8                :                  inx
00:0896' 68                :                  pla
00:0897' C903              :                  cmp    #MB_ABS         ; Absolute?
00:0899' D009              :                  if     eq
00:089B' A002              :                   ldy   #2
00:089D' B1F7              :                   lda   (ADDR_S),y      ; Show hi byte
00:089F' 20????            :                   jsr   ShowHex2
00:08A2' E8                :                   inx
00:08A3' E8                :                   inx
                                              endif
00:08A4' A001              :                  ldy    #1
00:08A6' B1F7              :                  lda    (ADDR_S),y      ; Then lo byte
00:08A8' 20????            :                  jsr    ShowHex2
00:08AB' E8                :                  inx
00:08AC' E8                :                  inx
                                             endif

                                             .if     __65C02__
00:08AD' 68                :                 pla
00:08AE' 48                :                 pha
00:08AF' 2960              :                 and     #MB_BIT|MB_REL
00:08B1' C960              :                 cmp     #MB_BIT|MB_REL
00:08B3' D006              :                 if      eq
00:08B5' A92C              :                  lda    #','
00:08B7' 20????            :                  jsr    UartTx
00:08BA' E8                :                  inx
                                             endif
                                             .endif

00:08BB' 68                :                 pla
00:08BC' 48                :                 pha
00:08BD' A8                :                 tay
00:08BE' 2940              :                 and     #MB_REL
00:08C0' F035              :                 if      ne
00:08C2' A924              :                  lda    #'$'
00:08C4' 20????            :                  jsr    UartTx
00:08C7' E8                :                  inx
00:08C8' 98                :                  tya
00:08C9' A001              :                  ldy    #1
00:08CB' 2920              :                  and    #MB_BIT
00:08CD' F001              :                  if     ne
00:08CF' C8                :                   iny

Portable 65xx Assembler [20.01]

                                              endif

00:08D0' 38                :                  sec                    ; Word out address of next
00:08D1' 98                :                  tya                    ; .. instruction
00:08D2' 65F7              :                  adc    ADDR_S+0
00:08D4' 85FB              :                  sta    TEMP+0
00:08D6' A900              :                  lda    #0
00:08D8' 65F8              :                  adc    ADDR_S+1
00:08DA' 85FC              :                  sta    TEMP+1

00:08DC' 18                :                  clc                    ; Fetch offset
00:08DD' B1F7              :                  lda    (ADDR_S),y      ; Work out lo byte
00:08DF' 65FB              :                  adc    TEMP+0
00:08E1' 48                :                  pha                    ; And save
00:08E2' B1F7              :                  lda    (ADDR_S),y
00:08E4' 2980              :                  and    #$80
00:08E6' 1002              :                  if     mi
00:08E8' A9FF              :                   lda   #$ff
                                              endif
00:08EA' 65FC              :                  adc    TEMP+1          ; Work out hi byte
00:08EC' 20????            :                  jsr    ShowHex2        ; And show result
00:08EF' E8                :                  inx
00:08F0' E8                :                  inx
00:08F1' 68                :                  pla
00:08F2' 20????            :                  jsr    ShowHex2
00:08F5' E8                :                  inx
00:08F6' E8                :                  inx
                                             endif

00:08F7' 68                :                 pla
00:08F8' 48                :                 pha
00:08F9' 2910              :                 and     #MB_ACC
00:08FB' F006              :                 if      ne
00:08FD' A941              :                  lda    #'A'
00:08FF' 20????            :                  jsr    UartTx
00:0902' E8                :                  inx
                                             endif

00:0903' 68                :                 pla
00:0904' 48                :                 pha
00:0905' 2908              :                 and     #MB_XRG
00:0907' F00C              :                 if      ne
00:0909' A92C              :                  lda    #','
00:090B' 20????            :                  jsr    UartTx
00:090E' A958              :                  lda    #'X'
00:0910' 20????            :                  jsr    UartTx
00:0913' E8                :                  inx
00:0914' E8                :                  inx
                                             endif

00:0915' 68                :                 pla
00:0916' 48                :                 pha
00:0917' 1006              :                 if      mi
00:0919' A929              :                  lda    #')'

Portable 65xx Assembler [20.01]

00:091B' 20????            :                  jsr    UartTx
00:091E' E8                :                  inx
                                             endif

00:091F' 68                :                 pla
00:0920' 2904              :                 and     #MB_YRG
00:0922' F00C              :                 if      ne
00:0924' A92C              :                  lda    #','
00:0926' 20????            :                  jsr    UartTx
00:0929' A959              :                  lda    #'Y'
00:092B' 20????            :                  jsr    UartTx
00:092E' E8                :                  inx
00:092F' E8                :                  inx
                                             endif

00:0930' 68                :                 pla                     ; Restore temporary area
00:0931' 85FC              :                 sta     TEMP+1
00:0933' 68                :                 pla
00:0934' 85FB              :                 sta     TEMP+0

00:0936' A5FD              :                 lda     COUNT           ; Return the number of bytes
00:0938' 60                :                 rts

                             ExtractLetter:
00:0939' 48                :                 pha
00:093A' 291F              :                 and     #$1f
00:093C' 0940              :                 ora     #'@'
00:093E' C95F              :                 cmp     #$5f
00:0940' D002              :                 if      eq
00:0942' A93F              :                  lda    #'?'
                                             endif
00:0944' 20????            :                 jsr     UartTx
00:0947' 68                :                 pla
00:0948' 46FB              :                 lsr     TEMP
00:094A' 6A                :                 ror     a
00:094B' 46FB              :                 lsr     TEMP
00:094D' 6A                :                 ror     a
00:094E' 46FB              :                 lsr     TEMP
00:0950' 6A                :                 ror     a
00:0951' 46FB              :                 lsr     TEMP
00:0953' 6A                :                 ror     a
00:0954' 46FB              :                 lsr     TEMP
00:0956' 6A                :                 ror     a
00:0957' 60                :                 rts


                             ;===============================================================================
                             ; Display Utilities
                             ;-------------------------------------------------------------------------------

                             ; Display the byte in A as two hexadecimal digits. The values in A & Y are
                             ; destroyed.

                             ShowHex2:

Portable 65xx Assembler [20.01]

00:0958' 48                :                 pha                     ; Save a copy of the value
00:0959' 4A                :                 lsr     a               ; Shift down the hi nybble
00:095A' 4A                :                 lsr     a
00:095B' 4A                :                 lsr     a
00:095C' 4A                :                 lsr     a
00:095D' 20????            :                 jsr     ShowHex         ; Convert and display
00:0960' 68                :                 pla                     ; Pull back value and ...

                             ; Display the lo nybble of A as a hexadecimal digit. The values in A & Y are
                             ; destroyed.

                             ShowHex:
00:0961' 20????            :                 jsr     ToHex           ; Convert to printable character
00:0964' 4C????            :                 jmp     UartTx          ; And display.

                             ; Convert the lo nybble of A to a hexadecimal digit.

00:0967' 290F              : ToHex           and     #$0f            ; Isolate the lo nybble
00:0969' F8                :                 sed                     ; Convert to ASCII using BCD
00:096A' 18                :                 clc
00:096B' 6990              :                 adc     #$90
00:096D' 6940              :                 adc     #$40
00:096F' D8                :                 cld
00:0970' 60                :                 rts                     ; Done

                             ;-------------------------------------------------------------------------------

                             ; Output two spaces.

                             Space2:
00:0971' 20????            :                 jsr     Space           ; Print one space then drop into ..

                             ; Output a single space. The values in A & Y are destroyed.

                             Space:
00:0974' A920              :                 lda     #' '
00:0976' 4C????            :                 jmp     UartTx

                             ; Output a vertical bar character.

                             Bar:
00:0979' A97C              :                 lda     #'|'
00:097B' 4C????            :                 jmp     UartTx

                             ; Output a new line

                             NewLine:
00:097E' A90D              :                 lda     #CR
00:0980' 20????            :                 jsr     UartTx
00:0983' A90A              :                 lda     #LF
00:0985' 4C????            :                 jmp     UartTx

                             ;===============================================================================
                             ; Strings

Portable 65xx Assembler [20.01]

                             ;-------------------------------------------------------------------------------

                             ; Output the string in the string table starting at the offset in X until a
                             ; null byte is reached.

                             ShowString:
                                             repeat
00:0988' BD????            :                  lda    STRINGS,x       ; Fetch the next character
00:098B' F006              :                  break  eq              ; Reached the end?
00:098D' 20????            :                  jsr    UartTx          ; No, display it
00:0990' E8                :                  inx                    ; Bump the index
00:0991' 80F5              :                 forever
00:0993' 60                :                 rts                     ; Done.

                             STRINGS:
         00000000          = TTL_STR         .equ    .-STRINGS
00:0994' 0D0A53422D        :                 .byte   CR,LF,"SB-"
                                             .if     __6502__
                           -                 .byte   "6502"
                                             .endif
                                             .if     __65C02__
00:0999' 3635433032        :                 .byte   "65C02"
                                             .endif
                                             .if     __65SC02__
                           -                 .byte   "65SC02"
                                             .endif
00:099E' 205B32302E30335D> :                 .byte   " [20.03]",0
         00000013          = PC_STR          .equ    .-STRINGS
00:09A7' 50433D00          :                 .byte   "PC=",0
         00000017          = SP_STR          .equ    .-STRINGS
00:09AB' 2053503D00        :                 .byte   " SP=",0
         0000001C          = P_STR           .equ    .-STRINGS
00:09B0' 20503D00          :                 .byte   " P=",0
         00000020          = A_STR           .equ    .-STRINGS
00:09B4' 20413D00          :                 .byte   " A=",0
         00000024          = X_STR           .equ    .-STRINGS
00:09B8' 20583D00          :                 .byte   " X=",0
         00000028          = Y_STR           .equ    .-STRINGS
00:09BC' 20593D00          :                 .byte   " Y=",0
         0000002C          = ERR_STR         .equ    .-STRINGS
00:09C0' 0D0A3F00          :                 .byte   CR,LF,"?",0
         00000030          = HLP_STR         .equ    .-STRINGS
00:09C4' 0D0A442078787878> :                 .byte   CR,LF,"D xxxx yyyy\t\tDisassemble"
00:09DE' 0D0A462078787878> :                 .byte   CR,LF,"F xxxx yyyy bb\t\tFill Memory"
00:09FB' 0D0A47205B787878> :                 .byte   CR,LF,"G [xxxx]\t\tGoto"
00:0A0B' 0D0A4D2078787878> :                 .byte   CR,LF,"M xxxx yyyy\t\tDisplay Memory"
00:0A28' 0D0A520909094469> :                 .byte   CR,LF,"R\t\t\tDisplay Registers"
00:0A3F' 0D0A532E2E2E0909> :                 .byte   CR,LF,"S...\t\t\tS19 Load"
00:0A50' 0D0A54205B787878> :                 .byte   CR,LF,"T [xxxx][,cccc]\t\tTrace"
00:0A68' 0D0A572078787878> :                 .byte   CR,LF,"W xxxx yy\t\tWrite Memory"
00:0A81' 00                :                 .byte   0

00:0A82' 435A49443131564E  : FLAG            .byte   "CZID11VN"
00:0A8A' 0102040810204080  : BITS            .byte   $01,$02,$04,$08,$10,$20,$40,$80

Portable 65xx Assembler [20.01]

00:0A92' FEFDFBF7EFDFBF7F  : MASK            .byte   $fe,$fd,$fb,$f7,$ef,$df,$bf,$7f

                             ;===============================================================================
                             ; Instruction Lookup Tables
                             ;-------------------------------------------------------------------------------

00:0A9A' 0000000000000000> :                 .align  256

                                             .if     __6502__
                           - OPCODES:
                           -                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 0
                           -                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                           -                 .byte   OP_BPL,OP_ORA,OP_ERR,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR ; 1
                           -                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_ERR,OP_ORA,OP_ASL,OP_ERR
                           -                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 2
                           -                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                           -                 .byte   OP_BMI,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR ; 3
                           -                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_ERR
                           -                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 4
                           -                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_ERR
                           -                 .byte   OP_BVC,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR ; 5
                           -                 .byte   OP_CLI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_ERR
                           -                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 6
                           -                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_ERR
                           -                 .byte   OP_BVS,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR ; 7
                           -                 .byte   OP_SEI,OP_ADC,OP_ERR,OP_ERR,OP_ERR,OP_ADC,OP_ROR,OP_ERR
                           -                 .byte   OP_ERR,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 8
                           -                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR
                           -                 .byte   OP_BCC,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_ERR ; 9
                           -                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_ERR,OP_STA,OP_ERR,OP_ERR
                           -                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; A
                           -                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                           -                 .byte   OP_BCS,OP_LDA,OP_ERR,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR ; B
                           -                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_ERR
                           -                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR ; C
                           -                 .byte   OP_INY,OP_CMP,OP_DEX,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_ERR
                           -                 .byte   OP_BNE,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR ; D
                           -                 .byte   OP_CLD,OP_CMP,OP_ERR,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_ERR
                           -                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR ; E
                           -                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_ERR
                           -                 .byte   OP_BEQ,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR ; F
                           -                 .byte   OP_SED,OP_SBC,OP_ERR,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_ERR

                           - MODES:
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 0
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 1
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP

Portable 65xx Assembler [20.01]

                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 6
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 7
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_IMP,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IMP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                             .endif

                             ;-------------------------------------------------------------------------------

                                             .if     __65C02__
                             OPCODES:
00:0B00' 1C4C0000824C065E  :                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_RMB ; 0
00:0B08' 504C0600824C0608  :                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_BBR
00:0B10' 184C4C00804C065E  :                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_RMB ; 1
00:0B18' 224C3800804C0608  :                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_BBR
00:0B20' 400400001204605E  :                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 2
00:0B28' 5804600012046008  :                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00:0B30' 140404001204605E  :                 .byte   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_RMB ; 3
00:0B38' 6A04300012046008  :                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_BBR
00:0B40' 643600000036485E  :                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 4
00:0B48' 4E3648003E364808  :                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_BBR
00:0B50' 1E3636000036485E  :                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_RMB ; 5
00:0B58' 2636540000364808  :                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_BBR
00:0B60' 660200007A02625E  :                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 6
00:0B68' 560262003E026208  :                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00:0B70' 200202007A02625E  :                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_RMB ; 7
00:0B78' 6E025C003E026208  :                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_BBR
00:0B80' 1A72000078727670  :                 .byte   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 8
00:0B88' 341286007872760A  :                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_BBS
00:0B90' 0C72720078727670  :                 .byte   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_SMB ; 9
00:0B98' 8A7288007A727A0A  :                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_BBS
00:0BA0' 4642440046424470  :                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; A
00:0BA8' 7E427C004642440A  :                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00:0BB0' 0E42420046424470  :                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_SMB ; B
00:0BB8' 284284004642440A  :                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_BBS
00:0BC0' 2E2A00002E2A3070  :                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_SMB ; C
00:0BC8' 3C2A328C2E2A300A  :                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_BBS

Portable 65xx Assembler [20.01]

00:0BD0' 162A2A00002A3070  :                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_SMB ; D
00:0BD8' 242A5274002A300A  :                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_BBS
00:0BE0' 2C6800002C683870  :                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_SMB ; E
00:0BE8' 3A684A002C68380A  :                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_BBS
00:0BF0' 1068680000683870  :                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_SMB ; F
00:0BF8' 6C685A000068380A  :                 .byte   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_BBS

                             MODES:
00:0C00' 0289020001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 0
00:0C08' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C10' 4085810001090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_ZPG ; 1
00:0C18' 00071000030B0B61  :                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00:0C20' 0389000001010101  :                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 2
00:0C28' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C30' 4085810009090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 3
00:0C38' 000710000B0B0B61  :                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_BRL
00:0C40' 0089000000010101  :                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG ; 4
00:0C48' 0002100003030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C50' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; 5
00:0C58' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00:0C60' 0089000001010101  :                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 6
00:0C68' 0002100083030361  :                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_BRL
00:0C70' 4085810009090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_ZPG ; 7
00:0C78' 000700008B0B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_BRL
00:0C80' 4089000001010101  :                 .byte   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; 8
00:0C88' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0C90' 4085810009090501  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; 9
00:0C98' 00070000030B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_BRL
00:0CA0' 0289020001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; A
00:0CA8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CB0' 4085810009090501  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_ZPG ; B
00:0CB8' 000700000B0B0761  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_BRL
00:0CC0' 0289000001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; C
00:0CC8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CD0' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; D
00:0CD8' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
00:0CE0' 0289000001010101  :                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_ZPG ; E
00:0CE8' 0002000003030361  :                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_BRL
00:0CF0' 4085810000090901  :                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPG ; F
00:0CF8' 00070000000B0B61  :                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_BRL
                                             .endif

                             ;-------------------------------------------------------------------------------

                                             .if     __65SC02__
                           - OPCODES:
                           -                 .byte   OP_BRK,OP_ORA,OP_ERR,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_NOP ; 0
                           -                 .byte   OP_PHP,OP_ORA,OP_ASL,OP_ERR,OP_TSB,OP_ORA,OP_ASL,OP_NOP
                           -                 .byte   OP_BPL,OP_ORA,OP_ORA,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_NOP ; 1
                           -                 .byte   OP_CLC,OP_ORA,OP_INC,OP_ERR,OP_TRB,OP_ORA,OP_ASL,OP_NOP
                           -                 .byte   OP_JSR,OP_AND,OP_ERR,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP ; 2
                           -                 .byte   OP_PLP,OP_AND,OP_ROL,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP
                           -                 .byte   OP_BMI,OP_AND,OP_AND,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP ; 3
                           -                 .byte   OP_SEC,OP_AND,OP_DEC,OP_ERR,OP_BIT,OP_AND,OP_ROL,OP_NOP

Portable 65xx Assembler [20.01]

                           -                 .byte   OP_RTI,OP_EOR,OP_ERR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP ; 4
                           -                 .byte   OP_PHA,OP_EOR,OP_LSR,OP_ERR,OP_JMP,OP_EOR,OP_LSR,OP_NOP
                           -                 .byte   OP_BVC,OP_EOR,OP_EOR,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP ; 5
                           -                 .byte   OP_CLI,OP_EOR,OP_PHY,OP_ERR,OP_ERR,OP_EOR,OP_LSR,OP_NOP
                           -                 .byte   OP_RTS,OP_ADC,OP_ERR,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_NOP ; 6
                           -                 .byte   OP_PLA,OP_ADC,OP_ROR,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_NOP
                           -                 .byte   OP_BVS,OP_ADC,OP_ADC,OP_ERR,OP_STZ,OP_ADC,OP_ROR,OP_NOP ; 7
                           -                 .byte   OP_SEI,OP_ADC,OP_PLY,OP_ERR,OP_JMP,OP_ADC,OP_ROR,OP_NOP
                           -                 .byte   OP_BRA,OP_STA,OP_ERR,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP ; 8
                           -                 .byte   OP_DEY,OP_BIT,OP_TXA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP
                           -                 .byte   OP_BCC,OP_STA,OP_STA,OP_ERR,OP_STY,OP_STA,OP_STX,OP_NOP ; 9
                           -                 .byte   OP_TYA,OP_STA,OP_TXS,OP_ERR,OP_STZ,OP_STA,OP_STZ,OP_NOP
                           -                 .byte   OP_LDY,OP_LDA,OP_LDX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP ; A
                           -                 .byte   OP_TAY,OP_LDA,OP_TAX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP
                           -                 .byte   OP_BCS,OP_LDA,OP_LDA,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP ; B
                           -                 .byte   OP_CLV,OP_LDA,OP_TSX,OP_ERR,OP_LDY,OP_LDA,OP_LDX,OP_NOP
                           -                 .byte   OP_CPY,OP_CMP,OP_ERR,OP_ERR,OP_CPY,OP_CMP,OP_DEC,OP_NOP ; C
                           -                 .byte   OP_INY,OP_CMP,OP_DEX,OP_WAI,OP_CPY,OP_CMP,OP_DEC,OP_NOP
                           -                 .byte   OP_BNE,OP_CMP,OP_CMP,OP_ERR,OP_ERR,OP_CMP,OP_DEC,OP_NOP ; D
                           -                 .byte   OP_CLD,OP_CMP,OP_PHX,OP_STP,OP_ERR,OP_CMP,OP_DEC,OP_NOP
                           -                 .byte   OP_CPX,OP_SBC,OP_ERR,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_NOP ; E
                           -                 .byte   OP_INX,OP_SBC,OP_NOP,OP_ERR,OP_CPX,OP_SBC,OP_INC,OP_NOP
                           -                 .byte   OP_BEQ,OP_SBC,OP_SBC,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_NOP ; F
                           -                 .byte   OP_SED,OP_SBC,OP_PLX,OP_ERR,OP_ERR,OP_SBC,OP_INC,OP_NOP

                           - MODES:
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 0
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPG,MO_ZPX,MO_ZPX,MO_IMP ; 1
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_ABS,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 2
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 3
                           -                 .byte   MO_IMP,MO_ABY,MO_ACC,MO_IMP,MO_ABX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_IMP ; 4
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; 5
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMP,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 6
                           -                 .byte   MO_IMP,MO_IMM,MO_ACC,MO_IMP,MO_IAB,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPX,MO_IMP ; 7
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IAX,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_REL,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; 8
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; 9
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABS,MO_ABX,MO_ABX,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMM,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; A
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_ZPX,MO_ZPX,MO_ZPY,MO_IMP ; B
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_ABY,MO_IMP
                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; C
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; D
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP

Portable 65xx Assembler [20.01]

                           -                 .byte   MO_IMM,MO_IZX,MO_IMP,MO_IMP,MO_ZPG,MO_ZPG,MO_ZPG,MO_IMP ; E
                           -                 .byte   MO_IMP,MO_IMM,MO_IMP,MO_IMP,MO_ABS,MO_ABS,MO_ABS,MO_IMP
                           -                 .byte   MO_REL,MO_IZY,MO_IZP,MO_IMP,MO_IMP,MO_ZPX,MO_ZPX,MO_IMP ; F
                           -                 .byte   MO_IMP,MO_ABY,MO_IMP,MO_IMP,MO_IMP,MO_ABX,MO_ABX,MO_IMP
                                             .endif

                             ;===============================================================================
                             ; IRQ Handler
                             ;-------------------------------------------------------------------------------

                             ; Handle interrupts.

                             IRQ:
00:0D00' 48                :                 pha                     ; Save users registers
                                             .if     __65C02__|__65SC02__
00:0D01' DA                :                 phx
00:0D02' 5A                :                 phy
                                             .else
                           -                 txa
                           -                 pha
                           -                 tya
                           -                 pha
                           -                 cld
                                             .endif

00:0D03' BA                :                 tsx                     ; Check for BRK
00:0D04' BD0401            :                 lda     STACK+4,X
00:0D07' 2910              :                 and     #$10
00:0D09' F003              :                 if      ne
00:0D0B' 4C????            :                  jmp    BRK             ; Enter monitor with registers on stack
                                             endif

                             ;-------------------------------------------------------------------------------

                                             .if     __65C02__|__65SC02__
00:0D0E' 7A                :                 ply                     ; Restore user registers
00:0D0F' FA                :                 plx
                                             .else
                           -                 pla                     ; Restore user registers
                           -                 tay
                           -                 pla
                           -                 tax
                                             .endif
00:0D10' 68                :                 pla
00:0D11' 40                : NMI:            rti                     ; Done

                             ;===============================================================================
                             ; UART I/O
                             ;-------------------------------------------------------------------------------

                             ; Inserts the byte in A into the transmit buffer. If the buffer is full then
                             ; wait until some space is available. Registers are preserved.

                             UartTx:

Portable 65xx Assembler [20.01]

00:0D12' DA                :                 phx
00:0D13' A200              :                 ldx     #$00            ; Make data port all input
00:0D15' 8EE37F            :                 stx     VIA2_DDRA
00:0D18' 8DE17F            :                 sta     VIA2_ORA        ; Save the output character
00:0D1B' A901              :                 lda     #%01
00:0D1D' 2CE07F            : TxWait:         bit     VIA2_IRB        ; Is there space for more data
00:0D20' D0FB              :                 bne     TxWait

00:0D22' ADE07F            :                 lda     VIA2_IRB        ; Strobe WR
00:0D25' 29FB              :                 and     #$fb
00:0D27' AA                :                 tax
00:0D28' 0904              :                 ora     #$04
00:0D2A' 8DE07F            :                 sta     VIA2_ORB
00:0D2D' A9FF              :                 lda     #$ff            ; Make data port all output
00:0D2F' 8DE37F            :                 sta     VIA2_DDRA
00:0D32' EA                :                 nop
00:0D33' EA                :                 nop
00:0D34' 8EE07F            :                 stx     VIA2_ORB        ; End strobe
00:0D37' ADE17F            :                 lda     VIA2_IRA
00:0D3A' A200              :                 ldx     #$00            ; Make data port all output
00:0D3C' 8EE37F            :                 stx     VIA2_DDRA
00:0D3F' FA                :                 plx
00:0D40' 60                :                 rts                     ; Done

                             ; Extracts the next character from the head of the RX buffer. If the buffer is
                             ; empty then wait for some data to be placed in it by the interrupt handler.

                             UartRx:
00:0D41' DA                :                 phx                     ; Save callers X
00:0D42' A902              :                 lda     #$02            ; Wait until data in buffer
00:0D44' 2CE07F            : RxWait:         bit     VIA2_IRB
00:0D47' D0FB              :                 bne     RxWait

00:0D49' ADE07F            :                 lda     VIA2_IRB        ; Strobe /RD low
00:0D4C' 0908              :                 ora     #$08
00:0D4E' AA                :                 tax
00:0D4F' 29F7              :                 and     #$f7
00:0D51' 8DE07F            :                 sta     VIA2_ORB
00:0D54' EA                :                 nop                     ; Wait for data to be available
00:0D55' EA                :                 nop
00:0D56' EA                :                 nop
00:0D57' EA                :                 nop
00:0D58' ADE17F            :                 lda     VIA2_IRA        ; Read it
00:0D5B' 8EE07F            :                 stx     VIA2_ORB        ; And end the strobe
00:0D5E' FA                :                 plx                     ; .. and callers X
00:0D5F' 60                :                 rts                     ; Done

                             ;===============================================================================
                             ; Vector Locations
                             ;-------------------------------------------------------------------------------

00:0D60' 6C0002            : DO_IRQ          jmp     (IRQV)
00:0D63' 6C0202            : DO_NMI          jmp     (NMIV)


Portable 65xx Assembler [20.01]

                             ; Shadow Vector Area

                                             .org    $7efa

00:7EFA  ????              :                 .word   DO_NMI          ; NMI
00:7EFC  ????              :                 .word   RESET           ; RESET
00:7EFE  ????              :                 .word   DO_IRQ          ; IRQ/BRK

                                             .END


Portable 65xx Assembler [20.01]

Symbol Table

ACIA                             00007F80  | ACIA_DATA                        00000000
ACIA_CMD                         00000002  | MB_IMP                           00000000
ACIA_CMD_DTR                     00000001  | MNEMONICS                        00000000'
ACIA_CMD_IRD                     00000002  | MO_IMP                           00000000
ACIA_CMD_PMC0                    00000040  | OP_ERR                           00000000
ACIA_CMD_PMC1                    00000080  | TTL_STR                          00000000
ACIA_CMD_PME                     00000020  | VIA_IRB                          00000000
ACIA_CMD_REM                     00000010  | VIA_ORB                          00000000
ACIA_CMD_TIC0                    00000004  | __6501__                         00000000
ACIA_CMD_TIC1                    00000008  | __6502__                         00000000
ACIA_CR                          00000003  | __65816__                        00000000
ACIA_CR_RCS                      00000010  | __65832__                        00000000
ACIA_CR_SBN                      00000080  | __65SC02__                       00000000
ACIA_CR_SBR0                     00000001  | ACIA_CMD_DTR                     00000001
ACIA_CR_SBR1                     00000002  | ACIA_CR_SBR0                     00000001
ACIA_CR_SBR2                     00000004  | ACIA_SR                          00000001
ACIA_CR_SBR3                     00000008  | ACIA_SR_PE                       00000001
ACIA_CR_WL0                      00000020  | C                                00000001
ACIA_CR_WL1                      00000040  | MB_ZPG                           00000001
ACIA_DATA                        00000000  | MO_ZPG                           00000001
ACIA_SR                          00000001  | SOH                              00000001
ACIA_SR_DCDB                     00000020  | VIA_ACR_PB                       00000001
ACIA_SR_DSRB                     00000040  | VIA_IER_CA2                      00000001
ACIA_SR_FE                       00000002  | VIA_IFR_CA2                      00000001
ACIA_SR_IRQ                      00000080  | VIA_IRA                          00000001
ACIA_SR_OVRN                     00000004  | VIA_ORA                          00000001
ACIA_SR_PE                       00000001  | VIA_PCR_CA1C                     00000001
ACIA_SR_RDRF                     00000008  | __65C02__                        00000001
ACIA_SR_TDRE                     00000010  | ACIA_CMD                         00000002
ACK                              00000006  | ACIA_CMD_IRD                     00000002
ADDR_E                           000000F9  | ACIA_CR_SBR1                     00000002
ADDR_S                           000000F7  | ACIA_SR_FE                       00000002
A_REG                            000000F0  | MB_IMM                           00000002
A_STR                            00000020  | MO_IMM                           00000002
AppendChar                       00000723' | OP_ADC                           00000002
AppendHex                        00000720' | VIA_ACR_PA                       00000002
AppendHex2                       00000717' | VIA_DDRB                         00000002
B                                00000010  | VIA_IER_CA1                      00000002
BEL                              00000007  | VIA_IFR_CA1                      00000002
BITS                             00000A8A' | VIA_PCR_CA2C0                    00000002
BRK                              000000B9' | Z                                00000002
BS                               00000008  | ACIA_CR                          00000003
Bar                              00000979' | MB_ABS                           00000003
BumpAddr                         000006E2' | MO_ABS                           00000003
C                                00000001  | VIA_DDRA                         00000003
CAN                              00000018  | ACIA_CMD_TIC0                    00000004
CMD_LEN                          000000F6  | ACIA_CR_SBR2                     00000004
CMD_SIZE                         00000080  | ACIA_SR_OVRN                     00000004
COMMAND                          00000204  | EOT                              00000004
COUNT                            000000FD  | I                                00000004
CR                               0000000D  | MB_YRG                           00000004
CheckEnd                         000006EE' | OP_AND                           00000004

Portable 65xx Assembler [20.01]

D                                00000008  | VIA_ACR_SRC0                     00000004
DC1                              00000011  | VIA_IER_SR                       00000004
DC3                              00000013  | VIA_IFR_SR                       00000004
DEL                              0000007F  | VIA_PCR_CA2C1                    00000004
DO_IRQ                           00000D60' | VIA_T1CL                         00000004
DO_NMI                           00000D63' | MO_ZPY                           00000005
Disassemble                      000007F3' | VIA_T1CH                         00000005
Disassemble.Skip                 00000829' | ACK                              00000006
DumpRegisters                    000007B0' | OP_ASL                           00000006
EMULATE                          000003D7' | VIA_T1LL                         00000006
EM_ADC                           00000481' | BEL                              00000007
EM_AND                           00000495' | MO_ABY                           00000007
EM_ASL                           000004C3' | VIA_T1LH                         00000007
EM_BBR                           0000060E' | ACIA_CMD_TIC1                    00000008
EM_BBS                           00000620' | ACIA_CR_SBR3                     00000008
EM_BCC                           0000050B' | ACIA_SR_RDRF                     00000008
EM_BCS                           00000510' | BS                               00000008
EM_BEQ                           00000515' | D                                00000008
EM_BIT                           000004A4' | MB_XRG                           00000008
EM_BMI                           0000051A' | OP_BBR                           00000008
EM_BNE                           0000051F' | VIA_ACR_SRC1                     00000008
EM_BPL                           00000524' | VIA_IER_CB2                      00000008
EM_BRA                           00000529' | VIA_IFR_CB2                      00000008
EM_BRK                           000005AF' | VIA_PCR_CA2C2                    00000008
EM_BVC                           00000534' | VIA_T2CL                         00000008
EM_BVS                           00000539' | MO_ZPX                           00000009
EM_CLC                           00000465' | VIA_T2CH                         00000009
EM_CLD                           00000469' | LF                               0000000A
EM_CLI                           0000046D' | OP_BBS                           0000000A
EM_CLV                           00000471' | VIA_SR                           0000000A
EM_CMP                           00000490' | MO_ABX                           0000000B
EM_CPX                           0000048B' | VIA_ACR                          0000000B
EM_CPY                           0000048E' | OP_BCC                           0000000C
EM_DEC                           000004E3' | VIA_PCR                          0000000C
EM_DEX                           000004ED' | CR                               0000000D
EM_DEY                           000004F2' | VIA_IFR                          0000000D
EM_EOR                           0000049A' | OP_BCS                           0000000E
EM_ERR                           00000699' | VIA_IER                          0000000E
EM_INC                           000004F7' | VIA_IRAN                         0000000F
EM_INX                           00000501' | VIA_ORAN                         0000000F
EM_INY                           00000506' | ACIA_CMD_REM                     00000010
EM_JMP                           0000054C' | ACIA_CR_RCS                      00000010
EM_JSR                           0000053E' | ACIA_SR_TDRE                     00000010
EM_LDA                           00000557' | B                                00000010
EM_LDX                           0000055C' | MB_ACC                           00000010
EM_LDY                           00000563' | MO_ACC                           00000010
EM_LSR                           000004CB' | OP_BEQ                           00000010
EM_NOP                           000005AC' | VIA_ACR_SRC2                     00000010
EM_ORA                           0000049F' | VIA_IER_CB1                      00000010
EM_PHA                           0000057E' | VIA_IFR_CB1                      00000010
EM_PHP                           00000582' | VIA_PCR_CB1C                     00000010
EM_PHX                           00000588' | DC1                              00000011
EM_PHY                           0000058E' | OP_BIT                           00000012
EM_PLA                           00000594' | DC3                              00000013

Portable 65xx Assembler [20.01]

EM_PLP                           00000598' | PC_STR                           00000013
EM_PLX                           000005A0' | OP_BMI                           00000014
EM_PLY                           000005A6' | NAK                              00000015
EM_RMB                           00000632' | OP_BNE                           00000016
EM_ROL                           000004D3' | SP_STR                           00000017
EM_ROR                           000004DB' | CAN                              00000018
EM_RTI                           000005C7' | OP_BPL                           00000018
EM_RTS                           000005D5' | OP_BRA                           0000001A
EM_SBC                           00000486' | ESC                              0000001B
EM_SEC                           00000475' | OP_BRK                           0000001C
EM_SED                           00000479' | P_STR                            0000001C
EM_SEI                           0000047D' | OP_BVC                           0000001E
EM_SMB                           00000644' | ACIA_CMD_PME                     00000020
EM_STA                           0000056A' | ACIA_CR_WL0                      00000020
EM_STP                           000005E4' | ACIA_SR_DCDB                     00000020
EM_STX                           0000056F' | A_STR                            00000020
EM_STY                           00000574' | MB_BIT                           00000020
EM_STZ                           00000579' | OP_BVS                           00000020
EM_TAX                           000005EA' | VIA_ACR_T2C                      00000020
EM_TAY                           000005F1' | VIA_IER_T2                       00000020
EM_TRB                           00000656' | VIA_IFR_T2                       00000020
EM_TSB                           0000066D' | VIA_PCR_CB2C0                    00000020
EM_TSX                           000005F8' | MO_BIT                           00000021
EM_TXA                           000005FE' | OP_CLC                           00000022
EM_TXS                           00000603' | OP_CLD                           00000024
EM_TYA                           00000609' | X_STR                            00000024
EM_WAI                           000005E7' | OP_CLI                           00000026
EOT                              00000004  | OP_CLV                           00000028
ERR_STR                          0000002C  | Y_STR                            00000028
ESC                              0000001B  | OP_CMP                           0000002A
Error                            000006C8' | ERR_STR                          0000002C
ExtractLetter                    00000939' | OP_CPX                           0000002C
FLAG                             00000A82' | OP_CPY                           0000002E
FOSC                             007A1200  | HLP_STR                          00000030
GetByte                          00000750' | OP_DEC                           00000030
GetNybble                        00000783' | OP_DEX                           00000032
GetWord                          0000074C' | OP_DEY                           00000034
HLP_STR                          00000030  | OP_EOR                           00000036
I                                00000004  | OP_INC                           00000038
IO_TEMP                          000000FE  | OP_INX                           0000003A
IRQ                              00000D00' | OP_INY                           0000003C
IRQV                             00000200  | OP_JMP                           0000003E
IsHex                            00000794' | ACIA_CMD_PMC0                    00000040
IsPrintable                      000007A4' | ACIA_CR_WL1                      00000040
LF                               0000000A  | ACIA_SR_DSRB                     00000040
MASK                             00000A92' | MB_REL                           00000040
MB_ABS                           00000003  | MO_REL                           00000040
MB_ACC                           00000010  | OP_JSR                           00000040
MB_BIT                           00000020  | V                                00000040
MB_IMM                           00000002  | VIA_ACR_T1C0                     00000040
MB_IMP                           00000000  | VIA_IER_T1                       00000040
MB_IND                           00000080  | VIA_IFR_T1                       00000040
MB_REL                           00000040  | VIA_PCR_CB2C1                    00000040
MB_XRG                           00000008  | OP_LDA                           00000042

Portable 65xx Assembler [20.01]

MB_YRG                           00000004  | OP_LDX                           00000044
MB_ZPG                           00000001  | OP_LDY                           00000046
MNEMONICS                        00000000' | OP_LSR                           00000048
MODES                            00000C00' | OP_NOP                           0000004A
MO_ABS                           00000003  | OP_ORA                           0000004C
MO_ABX                           0000000B  | OP_PHA                           0000004E
MO_ABY                           00000007  | OP_PHP                           00000050
MO_ACC                           00000010  | OP_PHX                           00000052
MO_BIT                           00000021  | OP_PHY                           00000054
MO_BRL                           00000061  | OP_PLA                           00000056
MO_IAB                           00000083  | OP_PLP                           00000058
MO_IAX                           0000008B  | OP_PLX                           0000005A
MO_IMM                           00000002  | OP_PLY                           0000005C
MO_IMP                           00000000  | OP_RMB                           0000005E
MO_IZP                           00000081  | OP_ROL                           00000060
MO_IZX                           00000089  | MO_BRL                           00000061
MO_IZY                           00000085  | OP_ROR                           00000062
MO_REL                           00000040  | OP_RTI                           00000064
MO_ZPG                           00000001  | OP_RTS                           00000066
MO_ZPX                           00000009  | OP_SBC                           00000068
MO_ZPY                           00000005  | OP_SEC                           0000006A
N                                00000080  | OP_SED                           0000006C
NAK                              00000015  | OP_SEI                           0000006E
NMI                              00000D11' | OP_SMB                           00000070
NMIV                             00000202  | OP_STA                           00000072
NewCommand                       000000E7' | OP_STP                           00000074
NewLine                          0000097E' | OP_STX                           00000076
NextChar                         0000072A' | OP_STY                           00000078
OPCODES                          00000B00' | OP_STZ                           0000007A
OP_ADC                           00000002  | OP_TAX                           0000007C
OP_AND                           00000004  | OP_TAY                           0000007E
OP_ASL                           00000006  | DEL                              0000007F
OP_BBR                           00000008  | ACIA_CMD_PMC1                    00000080
OP_BBS                           0000000A  | ACIA_CR_SBN                      00000080
OP_BCC                           0000000C  | ACIA_SR_IRQ                      00000080
OP_BCS                           0000000E  | CMD_SIZE                         00000080
OP_BEQ                           00000010  | MB_IND                           00000080
OP_BIT                           00000012  | N                                00000080
OP_BMI                           00000014  | OP_TRB                           00000080
OP_BNE                           00000016  | VIA_ACR_T1C1                     00000080
OP_BPL                           00000018  | VIA_IER_SET                      00000080
OP_BRA                           0000001A  | VIA_IFR_IRQ                      00000080
OP_BRK                           0000001C  | VIA_PCR_CB2C2                    00000080
OP_BVC                           0000001E  | MO_IZP                           00000081
OP_BVS                           00000020  | OP_TSB                           00000082
OP_CLC                           00000022  | MO_IAB                           00000083
OP_CLD                           00000024  | OP_TSX                           00000084
OP_CLI                           00000026  | MO_IZY                           00000085
OP_CLV                           00000028  | OP_TXA                           00000086
OP_CMP                           0000002A  | OP_TXS                           00000088
OP_CPX                           0000002C  | MO_IZX                           00000089
OP_CPY                           0000002E  | OP_TYA                           0000008A
OP_DEC                           00000030  | MO_IAX                           0000008B
OP_DEX                           00000032  | OP_WAI                           0000008C

Portable 65xx Assembler [20.01]

OP_DEY                           00000034  | RESET                            0000008E'
OP_EOR                           00000036  | VECTORS                          000000B5'
OP_ERR                           00000000  | BRK                              000000B9'
OP_INC                           00000038  | ShowRegisters                    000000D1'
OP_INX                           0000003A  | NewCommand                       000000E7'
OP_INY                           0000003C  | RptCommand                       000000E9'
OP_JMP                           0000003E  | A_REG                            000000F0
OP_JSR                           00000040  | X_REG                            000000F1
OP_LDA                           00000042  | Y_REG                            000000F2
OP_LDX                           00000044  | P_REG                            000000F3
OP_LDY                           00000046  | PC_REG                           000000F4
OP_LSR                           00000048  | CMD_LEN                          000000F6
OP_NOP                           0000004A  | ADDR_S                           000000F7
OP_ORA                           0000004C  | ADDR_E                           000000F9
OP_PHA                           0000004E  | TEMP                             000000FB
OP_PHP                           00000050  | COUNT                            000000FD
OP_PHX                           00000052  | IO_TEMP                          000000FE
OP_PHY                           00000054  | STACK                            00000100
OP_PLA                           00000056  | RptCommand.FillFail              000001BC'
OP_PLP                           00000058  | IRQV                             00000200
OP_PLX                           0000005A  | NMIV                             00000202
OP_PLY                           0000005C  | COMMAND                          00000204
OP_RMB                           0000005E  | RptCommand.S19Fail               000002A2'
OP_ROL                           00000060  | Trace                            000002CD'
OP_ROR                           00000062  | EMULATE                          000003D7'
OP_RTI                           00000064  | EM_CLC                           00000465'
OP_RTS                           00000066  | EM_CLD                           00000469'
OP_SBC                           00000068  | EM_CLI                           0000046D'
OP_SEC                           0000006A  | EM_CLV                           00000471'
OP_SED                           0000006C  | EM_SEC                           00000475'
OP_SEI                           0000006E  | EM_SED                           00000479'
OP_SMB                           00000070  | EM_SEI                           0000047D'
OP_STA                           00000072  | EM_ADC                           00000481'
OP_STP                           00000074  | EM_SBC                           00000486'
OP_STX                           00000076  | EM_CPX                           0000048B'
OP_STY                           00000078  | EM_CPY                           0000048E'
OP_STZ                           0000007A  | EM_CMP                           00000490'
OP_TAX                           0000007C  | EM_AND                           00000495'
OP_TAY                           0000007E  | EM_EOR                           0000049A'
OP_TRB                           00000080  | EM_ORA                           0000049F'
OP_TSB                           00000082  | EM_BIT                           000004A4'
OP_TSX                           00000084  | EM_ASL                           000004C3'
OP_TXA                           00000086  | EM_LSR                           000004CB'
OP_TXS                           00000088  | EM_ROL                           000004D3'
OP_TYA                           0000008A  | EM_ROR                           000004DB'
OP_WAI                           0000008C  | EM_DEC                           000004E3'
PC_REG                           000000F4  | EM_DEX                           000004ED'
PC_STR                           00000013  | EM_DEY                           000004F2'
PIA                              00007FA0  | EM_INC                           000004F7'
P_REG                            000000F3  | EM_INX                           00000501'
P_STR                            0000001C  | EM_INY                           00000506'
RESET                            0000008E' | EM_BCC                           0000050B'
RptCommand                       000000E9' | EM_BCS                           00000510'
RptCommand.FillFail              000001BC' | EM_BEQ                           00000515'

Portable 65xx Assembler [20.01]

RptCommand.S19Fail               000002A2' | EM_BMI                           0000051A'
RxWait                           00000D44' | EM_BNE                           0000051F'
SOH                              00000001  | EM_BPL                           00000524'
SP_STR                           00000017  | EM_BRA                           00000529'
STACK                            00000100  | EM_BVC                           00000534'
STRINGS                          00000994' | EM_BVS                           00000539'
SaveAP                           00000682' | EM_JSR                           0000053E'
SaveNone                         00000688' | EM_JMP                           0000054C'
SaveP                            00000684' | EM_LDA                           00000557'
SetEndAddr                       000006D9' | EM_LDX                           0000055C'
SetPrompt                        000006FB' | EM_LDY                           00000563'
SetStartAddr                     000006D0' | EM_STA                           0000056A'
ShowHex                          00000961' | EM_STX                           0000056F'
ShowHex2                         00000958' | EM_STY                           00000574'
ShowRegisters                    000000D1' | EM_STZ                           00000579'
ShowString                       00000988' | EM_PHA                           0000057E'
SkipSpaces                       00000741' | EM_PHP                           00000582'
Space                            00000974' | EM_PHX                           00000588'
Space2                           00000971' | EM_PHY                           0000058E'
TEMP                             000000FB  | EM_PLA                           00000594'
TTL_STR                          00000000  | EM_PLP                           00000598'
ToHex                            00000967' | EM_PLX                           000005A0'
ToUpper                          00000735' | EM_PLY                           000005A6'
Trace                            000002CD' | EM_NOP                           000005AC'
TxWait                           00000D1D' | EM_BRK                           000005AF'
UartRx                           00000D41' | EM_RTI                           000005C7'
UartTx                           00000D12' | EM_RTS                           000005D5'
V                                00000040  | EM_STP                           000005E4'
VECTORS                          000000B5' | EM_WAI                           000005E7'
VIA1                             00007FC0  | EM_TAX                           000005EA'
VIA2                             00007FE0  | EM_TAY                           000005F1'
VIA2_DDRA                        00007FE3  | EM_TSX                           000005F8'
VIA2_DDRB                        00007FE2  | EM_TXA                           000005FE'
VIA2_IRA                         00007FE1  | EM_TXS                           00000603'
VIA2_IRB                         00007FE0  | EM_TYA                           00000609'
VIA2_ORA                         00007FE1  | EM_BBR                           0000060E'
VIA2_ORB                         00007FE0  | EM_BBS                           00000620'
VIA_ACR                          0000000B  | EM_RMB                           00000632'
VIA_ACR_PA                       00000002  | EM_SMB                           00000644'
VIA_ACR_PB                       00000001  | EM_TRB                           00000656'
VIA_ACR_SRC0                     00000004  | EM_TSB                           0000066D'
VIA_ACR_SRC1                     00000008  | SaveAP                           00000682'
VIA_ACR_SRC2                     00000010  | SaveP                            00000684'
VIA_ACR_T1C0                     00000040  | SaveNone                         00000688'
VIA_ACR_T1C1                     00000080  | EM_ERR                           00000699'
VIA_ACR_T2C                      00000020  | Error                            000006C8'
VIA_DDRA                         00000003  | SetStartAddr                     000006D0'
VIA_DDRB                         00000002  | SetEndAddr                       000006D9'
VIA_IER                          0000000E  | BumpAddr                         000006E2'
VIA_IER_CA1                      00000002  | CheckEnd                         000006EE'
VIA_IER_CA2                      00000001  | SetPrompt                        000006FB'
VIA_IER_CB1                      00000010  | AppendHex2                       00000717'
VIA_IER_CB2                      00000008  | AppendHex                        00000720'
VIA_IER_SET                      00000080  | AppendChar                       00000723'

Portable 65xx Assembler [20.01]

VIA_IER_SR                       00000004  | NextChar                         0000072A'
VIA_IER_T1                       00000040  | ToUpper                          00000735'
VIA_IER_T2                       00000020  | SkipSpaces                       00000741'
VIA_IFR                          0000000D  | GetWord                          0000074C'
VIA_IFR_CA1                      00000002  | GetByte                          00000750'
VIA_IFR_CA2                      00000001  | GetNybble                        00000783'
VIA_IFR_CB1                      00000010  | IsHex                            00000794'
VIA_IFR_CB2                      00000008  | IsPrintable                      000007A4'
VIA_IFR_IRQ                      00000080  | DumpRegisters                    000007B0'
VIA_IFR_SR                       00000004  | Disassemble                      000007F3'
VIA_IFR_T1                       00000040  | Disassemble.Skip                 00000829'
VIA_IFR_T2                       00000020  | ExtractLetter                    00000939'
VIA_IRA                          00000001  | ShowHex2                         00000958'
VIA_IRAN                         0000000F  | ShowHex                          00000961'
VIA_IRB                          00000000  | ToHex                            00000967'
VIA_ORA                          00000001  | Space2                           00000971'
VIA_ORAN                         0000000F  | Space                            00000974'
VIA_ORB                          00000000  | Bar                              00000979'
VIA_PCR                          0000000C  | NewLine                          0000097E'
VIA_PCR_CA1C                     00000001  | ShowString                       00000988'
VIA_PCR_CA2C0                    00000002  | STRINGS                          00000994'
VIA_PCR_CA2C1                    00000004  | FLAG                             00000A82'
VIA_PCR_CA2C2                    00000008  | BITS                             00000A8A'
VIA_PCR_CB1C                     00000010  | MASK                             00000A92'
VIA_PCR_CB2C0                    00000020  | OPCODES                          00000B00'
VIA_PCR_CB2C1                    00000040  | MODES                            00000C00'
VIA_PCR_CB2C2                    00000080  | IRQ                              00000D00'
VIA_SR                           0000000A  | NMI                              00000D11'
VIA_T1CH                         00000005  | UartTx                           00000D12'
VIA_T1CL                         00000004  | TxWait                           00000D1D'
VIA_T1LH                         00000007  | UartRx                           00000D41'
VIA_T1LL                         00000006  | RxWait                           00000D44'
VIA_T2CH                         00000009  | DO_IRQ                           00000D60'
VIA_T2CL                         00000008  | DO_NMI                           00000D63'
X_REG                            000000F1  | ACIA                             00007F80
X_STR                            00000024  | PIA                              00007FA0
Y_REG                            000000F2  | VIA1                             00007FC0
Y_STR                            00000028  | VIA2                             00007FE0
Z                                00000002  | VIA2_IRB                         00007FE0
__6501__                         00000000  | VIA2_ORB                         00007FE0
__6502__                         00000000  | VIA2_IRA                         00007FE1
__65816__                        00000000  | VIA2_ORA                         00007FE1
__65832__                        00000000  | VIA2_DDRB                        00007FE2
__65C02__                        00000001  | VIA2_DDRA                        00007FE3
__65SC02__                       00000000  | FOSC                             007A1200
